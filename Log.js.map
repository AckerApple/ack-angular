{"version":3,"sources":["../src/Log.ts"],"names":[],"mappings":";;AAAA,sCAA2C;AAE1C;IAAA;QACQ,QAAG,GAAG,EAAE,CAAA;QACR,WAAM,GAAG,EAAE,CAAA;IAkCpB,CAAC;IAhCC,iBAAG,GAAH,UAAI,CAAC,EAAE,SAAU;QACf,IAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,EAAC,SAAS,CAAC,CAAA;QACvC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAE,EAAE,CAAE,CAAC;QACvB,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;YACd,OAAM,IAAI,CAAC,GAAG,CAAC,MAAM,GAAC,IAAI,CAAC,MAAM,EAAC,CAAC;gBACjC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA,CAAA,aAAa;YAC7B,CAAC;QACH,CAAC;QACD,MAAM,CAAC,CAAC,CAAA;IACV,CAAC;IAED,wBAAU,GAAV,UAAW,CAAC,EAAE,SAAU;QACtB,MAAM,CAAA,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA,CAAC;YACpB,KAAK,MAAM,CAAC;YACZ,KAAK,OAAO,CAAC;YACb,KAAK,MAAM,EAAC,CAAC;gBACX,CAAC,GAAG,EAAC,OAAO,EAAC,CAAC,EAAC,CAAA;YACjB,CAAC;QACH,CAAC;QAED,EAAE,CAAA,CAAC,SAAS,IAAE,IAAI,IAAI,SAAS,CAAC;YAAA,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAE9C,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,IAAE,iBAAiB,EAAE,CAAA;QAElD,MAAM,CAAC,CAAC,CAAA;IACV,CAAC;IACI,cAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,UAAC;CApCA,AAoCA,IAAA;AApCa,kBAAG;AAsCjB;IACE,MAAM,CANC,CAAA,UAAE,CAAS,IAAE,MAAC,CAAM,CAAA,CAAE,GAAC,GAAG,CAAC,CAAC,CAAC,QAAC,EAAQ,GAAE,CAAC,CAAC,CAAC,CAAC,KAAC,CAAK,CAAC,CAAC,CAAC,GAAC,GAAC,GAAG,CAAC,GAAC,GAAG,CAAC,CAAC,OAAC,EAAO,CAAE,CAAC,KAAC,CAAK,CAAC,CAAC,CAAC,GAAC,GAAC,GAAG,CAAC,CAAC,WAAC,EAAW,CAAE,CAAA,CAAA,CAAC,CAAC,CAAC,IAAI,IAAA,EAAK,CAAE,GAAC,GAAC,GAAG,CAAC,UAAC,CAAS,IAAE,IAAI,CAAA,GAAE,CAAC,CAAC,QAAC,EAAQ,EAAE,CAAC,GAAC,IAAC,EAAI,CAAC,GAAC,CAAC,CAAC,UAAC,EAAU,CAAE,CAAA,IAAI,EAAA,GAAK,CAAA,GAAE,EAAC,GAAE,GAAC,GAAG,CAAC,GAAC,CAAC,CAAC,CAAA,CAAC,GAAG,CAAA,IAAE,EAAE,GAAE,CAAC,CAAC,GAAC,IAAC,EAAI,CAAC,GAAC,EAAC,IAAE,EAAE,CAAE,GAAC,CAAC,IAAC,CAAE,GAAC,EAAC,GAAE,CAAC,CAAC,CAAA,MAAC,CAAM,CAAA,GAAE,GAAG,CAAC,CAAC,CAAC,KAAC,CAAK,CAAC,CAAC,CAAC,GAAC,GAAC,GAAG,CAAC,GAAC,GAAG,EAAC,CAAE,CAAC,KAAC,CAAK,CAAC,CAAC,CAAC,GAAC,GAAC,GAAG,CAAC,CAAA,CAAA,CAAC,CAAC,CAAC,IAAI,IAAA,EAAK,CAAE,CAAA;AAO7T,CAAC","file":"Log.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\n\n export class Log{\n  public log = []\n  public maxLog = 80\n\n  add(e, toConsole?){\n    const ob = this.paramAudit(e,toConsole)\n    this.log.unshift( ob );\n    if(this.maxLog){\n      while(this.log.length>this.maxLog){\n        this.log.pop()//remove last\n      }\n    }\n    return e\n  }\n\n  paramAudit(e, toConsole?){\n    switch(e.constructor){\n      case String:\n      case Boolean:\n      case Number:{\n        e = {message:e}\n      }\n    }\n\n    if(toConsole==null || toConsole)console.log(e)\n\n    e['datetime'] = e['datetime']||getDateTimeString()\n\n    return e\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction getDateTimeString(){\n  return (function(d){return (('0'+(d.getMonth()+1)).slice(-2)+'/'+('0'+d.getDate()).slice(-2)+'/'+d.getFullYear())})(new Date())+' '+(function(d){var h=d.getHours(),t='AM',m=d.getMinutes();var mn = m<10?'0'+m:m;h = h>=12?(t='PM',h-12||12):h==0?12:h;return ('0'+h).slice(-2)+':'+('0'+mn).slice(-2)+' '+t})(new Date())\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}