{"ast":null,"code":"import { addClass, removeClass } from \"./FxOn.directive\";\nimport { EventEmitter, ElementRef } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport let ShakeOn = /*#__PURE__*/(() => {\n  class ShakeOn {\n    constructor(element) {\n      this.element = element;\n      this.shakeConstant = false;\n      this.shakeThen = new EventEmitter();\n      this.shakeTypes = ['shake-slow', 'shake-hard', 'shake-little', 'shake-horizontal', 'shake-vertical', 'shake-rotate', 'shake-opacity', 'shake-crazy', 'shake-chunk'];\n    }\n\n    ngOnInit() {\n      Promise.resolve().then(() => this.update());\n    }\n\n    update() {\n      this.shakeForMs = this.shakeForMs || 2000;\n      this.shakeType = this.shakeType || 'shake-slow';\n    }\n\n    ngOnChanges(changes) {\n      if (changes.shakeOn && changes.shakeOn.currentValue != null && changes.shakeOn.currentValue != changes.shakeOn.previousValue) {\n        if (changes.shakeOn.currentValue) {\n          this.onTrue();\n        } else {\n          this.onFalse();\n        }\n      }\n\n      if (changes.shakeType && changes.shakeType.currentValue != changes.shakeType.previousValue) {\n        if (this.shakeOn) {\n          const pv = changes.shakeType.previousValue;\n\n          if (pv) {\n            removeClass(this.element.nativeElement, pv);\n          }\n\n          this.applyType();\n        } else {\n          this.removeType();\n        }\n      }\n    }\n\n    onFalse() {\n      removeClass(this.element.nativeElement, 'shake-constant');\n      this.removeType();\n\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        delete this.timeout;\n      }\n    }\n\n    removeType() {\n      removeClass(this.element.nativeElement, this.shakeType || 'shake-slow');\n    }\n\n    applyType() {\n      addClass(this.element.nativeElement, this.shakeType || 'shake-slow');\n    }\n\n    onTrue() {\n      addClass(this.element.nativeElement, 'shake-constant');\n      this.applyType();\n\n      if (!this.shakeConstant) {\n        this.timeout = setTimeout(() => {\n          this.onFalse();\n          this.shakeThen.emit(this);\n        }, this.shakeForMs);\n      }\n    }\n\n  }\n\n  ShakeOn.ɵfac = function ShakeOn_Factory(t) {\n    return new (t || ShakeOn)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ShakeOn.ɵdir = i0.ɵɵdefineDirective({\n    type: ShakeOn,\n    selectors: [[\"\", \"shakeOn\", \"\"]],\n    inputs: {\n      shakeConstant: \"shakeConstant\",\n      shakeOn: \"shakeOn\",\n      shakeForMs: \"shakeForMs\",\n      shakeType: \"shakeType\"\n    },\n    outputs: {\n      shakeThen: \"shakeThen\"\n    },\n    exportAs: [\"ShakeOn\"],\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ShakeOn;\n})();","map":null,"metadata":{},"sourceType":"module"}