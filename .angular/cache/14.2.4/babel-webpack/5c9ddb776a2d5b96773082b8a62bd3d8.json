{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nexport let ReplaceModel = /*#__PURE__*/(() => {\n  class ReplaceModel {\n    constructor() {\n      this.replaceModelChange = new EventEmitter();\n    }\n\n    ngOnChanges(changes) {\n      const isString = changes.replaceModel && this.replaceModel && this.replaceModel.constructor === String;\n\n      if (isString) {\n        Promise.resolve().then(() => this.run());\n      }\n    }\n\n    run() {\n      const rx = new RegExp(this.replaceExpression, 'gi');\n      const oldModel = this.replaceModel;\n      const newModel = this.replaceModel.replace(rx, '');\n\n      if (oldModel === newModel) {\n        return;\n      }\n\n      this.replaceModel = newModel;\n      this.replaceModelChange.emit(this.replaceModel);\n    }\n\n  }\n\n  ReplaceModel.ɵfac = function ReplaceModel_Factory(t) {\n    return new (t || ReplaceModel)();\n  };\n\n  ReplaceModel.ɵdir = i0.ɵɵdefineDirective({\n    type: ReplaceModel,\n    selectors: [[\"\", \"replaceModel\", \"\"]],\n    inputs: {\n      replaceModel: \"replaceModel\",\n      replaceExpression: \"replaceExpression\"\n    },\n    outputs: {\n      replaceModelChange: \"replaceModelChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ReplaceModel;\n})();","map":null,"metadata":{},"sourceType":"module"}