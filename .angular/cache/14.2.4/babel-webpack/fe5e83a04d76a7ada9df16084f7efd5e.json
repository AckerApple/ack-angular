{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ContentModel = /*#__PURE__*/(() => {\n  class ContentModel {\n    constructor(elm) {\n      this.elm = elm;\n      this.changeDone = new EventEmitter();\n      this.inputChange = new EventEmitter();\n      this.contentModelChange = new EventEmitter();\n      this.enter = new EventEmitter();\n      this.hasFocusChange = new EventEmitter();\n      this.recentInputs = 0;\n      this.elm.nativeElement.setAttribute('contenteditable', true);\n    }\n\n    ngOnDestroy() {\n      this.elm.nativeElement.removeAttribute('contenteditable');\n    }\n\n    ngOnChanges() {\n      const nElm = this.elm.nativeElement;\n\n      if (this.recentInputs) {\n        --this.recentInputs;\n        return;\n      }\n\n      const usePlaceholder = this.evalPlaceholder();\n\n      if (!usePlaceholder) {\n        nElm.textContent = this.contentModel;\n      }\n    }\n\n    evalPlaceholder(placeholder) {\n      const nElm = this.elm.nativeElement;\n      const usePlaceholder = this.contentModel == null || this.contentModel === '';\n\n      if (usePlaceholder) {\n        nElm.textContent = placeholder == null ? this.placeholder : placeholder;\n        return true;\n      }\n\n      return false;\n    }\n\n    shouldCancelEvent(event) {\n      const key = event.which || event.keyCode;\n      return this.enterEnds && key === 13;\n    }\n\n    onKeyDown(event) {\n      this.checkPlaceholder();\n      const cancel = this.shouldCancelEvent(event);\n\n      if (cancel) {\n        this.onBlur();\n        cancelEvent(event);\n        this.enter.emit(this.contentModel);\n        return;\n      }\n\n      if (this.maxLength) {\n        const newValue = this.elm.nativeElement.textContent;\n        const maxLength = Number(this.maxLength);\n        const maxed = this.maxLength && newValue.length > maxLength;\n        const key = event.which || event.keyCode;\n\n        if (maxed) {\n          const isDelete = [8, 46].indexOf(key) >= 0;\n\n          if (!isDelete) {\n            cancelEvent(event);\n            return;\n          }\n        }\n      }\n    }\n\n    onInput() {\n      const newValue = this.elm.nativeElement.textContent;\n      const maxLength = Number(this.maxLength);\n\n      if (this.maxLength && newValue.length > maxLength) {\n        return;\n      }\n\n      ++this.recentInputs;\n      this.updateValue();\n      this.inputChange.emit(this.contentModel);\n    }\n\n    updateValue() {\n      this.contentModel = this.elm.nativeElement.textContent;\n      this.contentModelChange.emit(this.contentModel);\n    }\n\n    onFocus() {\n      this.hasFocusChange.emit(this.hasFocus = true);\n      this.lastValue = this.contentModel;\n      this.evalPlaceholder('');\n    }\n\n    checkPlaceholder() {\n      if (this.placeholder && this.elm.nativeElement.textContent === this.placeholder) {\n        this.elm.nativeElement.textContent = '';\n      }\n    }\n\n    onBlur() {\n      if (this.lastValue !== this.elm.nativeElement.textContent) {\n        this.lastValue = this.elm.nativeElement.textContent;\n        this.updateValue();\n        this.changeDone.emit(this.contentModel);\n      }\n\n      this.evalPlaceholder();\n      this.hasFocusChange.emit(this.hasFocus = false);\n    }\n\n  }\n\n  ContentModel.ɵfac = function ContentModel_Factory(t) {\n    return new (t || ContentModel)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ContentModel.ɵdir = i0.ɵɵdefineDirective({\n    type: ContentModel,\n    selectors: [[\"\", \"contentModel\", \"\"]],\n    hostBindings: function ContentModel_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function ContentModel_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        })(\"input\", function ContentModel_input_HostBindingHandler() {\n          return ctx.onInput();\n        })(\"focus\", function ContentModel_focus_HostBindingHandler() {\n          return ctx.onFocus();\n        })(\"blur\", function ContentModel_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        });\n      }\n    },\n    inputs: {\n      contentModel: \"contentModel\",\n      placeholder: \"placeholder\",\n      maxLength: \"maxLength\",\n      enterEnds: \"enterEnds\",\n      hasFocus: \"hasFocus\"\n    },\n    outputs: {\n      changeDone: \"changeDone\",\n      inputChange: \"inputChange\",\n      contentModelChange: \"contentModelChange\",\n      enter: \"enter\",\n      hasFocusChange: \"hasFocusChange\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return ContentModel;\n})();\n\nfunction cancelEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":null,"metadata":{},"sourceType":"module"}