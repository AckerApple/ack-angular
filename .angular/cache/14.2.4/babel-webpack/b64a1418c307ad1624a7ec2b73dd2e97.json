{"ast":null,"code":"import { EventEmitter, ElementRef } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"*\"];\nexport let EnterKey = /*#__PURE__*/(() => {\n  class EnterKey {\n    constructor(element) {\n      this.element = element;\n      this.enterKey = new EventEmitter();\n      element.nativeElement.addEventListener('keydown', event => {\n        var yesNo = [13, 10].indexOf(event.which || event.keyCode) >= 0;\n\n        if (yesNo) {\n          this.enterKey.emit(event);\n        }\n      });\n    }\n\n  }\n\n  EnterKey.ɵfac = function EnterKey_Factory(t) {\n    return new (t || EnterKey)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  EnterKey.ɵdir = i0.ɵɵdefineDirective({\n    type: EnterKey,\n    selectors: [[\"\", \"enterKey\", \"\"]],\n    outputs: {\n      enterKey: \"enterKey\"\n    }\n  });\n  return EnterKey;\n})();\nexport let EscapeKey = /*#__PURE__*/(() => {\n  class EscapeKey {\n    constructor(element) {\n      this.element = element;\n      this.escapeKey = new EventEmitter();\n      element.nativeElement.addEventListener('keydown', event => {\n        const code = event.which || event.keyCode;\n\n        if (code == 27) {\n          this.escapeKey.emit(event);\n        }\n      });\n    }\n\n  }\n\n  EscapeKey.ɵfac = function EscapeKey_Factory(t) {\n    return new (t || EscapeKey)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  EscapeKey.ɵdir = i0.ɵɵdefineDirective({\n    type: EscapeKey,\n    selectors: [[\"\", \"escapeKey\", \"\"]],\n    outputs: {\n      escapeKey: \"escapeKey\"\n    }\n  });\n  return EscapeKey;\n})();\nexport let PreventBackKey = /*#__PURE__*/(() => {\n  class PreventBackKey {\n    constructor(element) {\n      this.element = element;\n      this.preventBackKey = new EventEmitter();\n      element.nativeElement.addEventListener('keydown', event => {\n        var yesNo = [8].indexOf(event.which || event.keyCode) < 0;\n\n        if (!yesNo) {\n          this.preventBackKey.emit(event);\n\n          if (event.preventDefault) {\n            event.preventDefault();\n          }\n        }\n\n        return yesNo;\n      });\n    }\n\n  }\n\n  PreventBackKey.ɵfac = function PreventBackKey_Factory(t) {\n    return new (t || PreventBackKey)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  PreventBackKey.ɵdir = i0.ɵɵdefineDirective({\n    type: PreventBackKey,\n    selectors: [[\"\", \"preventBackKey\", \"\"]],\n    outputs: {\n      preventBackKey: \"preventBackKey\"\n    }\n  });\n  return PreventBackKey;\n})();\nexport let PreventEnterKey = /*#__PURE__*/(() => {\n  class PreventEnterKey {\n    constructor(element) {\n      this.element = element;\n      this.preventEnterKey = new EventEmitter();\n      element.nativeElement.addEventListener('keydown', event => {\n        var yesNo = [13, 10].indexOf(event.which || event.keyCode) < 0;\n\n        if (!yesNo) {\n          this.preventEnterKey.emit(event);\n\n          if (event.preventDefault) {\n            event.preventDefault();\n          }\n        }\n\n        return yesNo;\n      });\n    }\n\n  }\n\n  PreventEnterKey.ɵfac = function PreventEnterKey_Factory(t) {\n    return new (t || PreventEnterKey)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  PreventEnterKey.ɵdir = i0.ɵɵdefineDirective({\n    type: PreventEnterKey,\n    selectors: [[\"\", \"preventEnterKey\", \"\"]],\n    outputs: {\n      preventEnterKey: \"preventEnterKey\"\n    }\n  });\n  return PreventEnterKey;\n})();\nexport let InputHint = /*#__PURE__*/(() => {\n  class InputHint {\n    constructor() {\n      this.hintStyle = {\n        'font-size': '75%',\n        'color': '#BBB'\n      };\n    }\n\n  }\n\n  InputHint.ɵfac = function InputHint_Factory(t) {\n    return new (t || InputHint)();\n  };\n\n  InputHint.ɵcmp = i0.ɵɵdefineComponent({\n    type: InputHint,\n    selectors: [[\"input-hint\"]],\n    inputs: {\n      hintStyle: \"hintStyle\"\n    },\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 1,\n    consts: [[2, \"position\", \"relative\", 3, \"ngStyle\"], [2, \"position\", \"absolute\", \"top\", \"0\", \"width\", \"100%\"]],\n    template: function InputHint_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵprojection(2);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", ctx.hintStyle);\n      }\n    },\n    dependencies: [i1.NgStyle],\n    encapsulation: 2\n  });\n  return InputHint;\n})();\nexport let FormChanged = /*#__PURE__*/(() => {\n  class FormChanged {\n    constructor(element) {\n      this.element = element;\n      this.formChanged = new EventEmitter();\n\n      this.onChange = event => {\n        this.formChanged.emit(event);\n      };\n\n      element.nativeElement.addEventListener('change', this.onChange);\n    }\n\n    ngOnDestroy() {\n      this.element.nativeElement.removeEventListener('change', this.onChange);\n    }\n\n  }\n\n  FormChanged.ɵfac = function FormChanged_Factory(t) {\n    return new (t || FormChanged)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  FormChanged.ɵdir = i0.ɵɵdefineDirective({\n    type: FormChanged,\n    selectors: [[\"\", \"formChanged\", \"\"]],\n    outputs: {\n      formChanged: \"formChanged\"\n    }\n  });\n  return FormChanged;\n})();\nexport let FormAlter = /*#__PURE__*/(() => {\n  class FormAlter {\n    constructor(element) {\n      this.element = element;\n      this.formAlter = new EventEmitter();\n\n      this.onChange = event => {\n        this.formAlter.emit(event);\n      };\n\n      element.nativeElement.addEventListener('input', this.onChange);\n      element.nativeElement.addEventListener('change', this.onChange);\n    }\n\n    ngOnDestroy() {\n      this.element.nativeElement.removeEventListener('change', this.onChange);\n      this.element.nativeElement.removeEventListener('input', this.onChange);\n    }\n\n  }\n\n  FormAlter.ɵfac = function FormAlter_Factory(t) {\n    return new (t || FormAlter)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  FormAlter.ɵdir = i0.ɵɵdefineDirective({\n    type: FormAlter,\n    selectors: [[\"\", \"formAlter\", \"\"]],\n    outputs: {\n      formAlter: \"formAlter\"\n    }\n  });\n  return FormAlter;\n})();","map":null,"metadata":{},"sourceType":"module"}