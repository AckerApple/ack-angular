{"ast":null,"code":"import { EventEmitter } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { RouteWatchReporter, getCurrentByActive, getRouteByActive } from \"./RouteWatchReporter\";\nimport { NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./RouteWatchReporter\";\nexport let RouteReporter = /*#__PURE__*/(() => {\n  class RouteReporter {\n    constructor(Router, RouteWatchReporter, ActivatedRoute) {\n      this.Router = Router;\n      this.RouteWatchReporter = RouteWatchReporter;\n      this.ActivatedRoute = ActivatedRoute;\n      this.stateChanger = new EventEmitter();\n      this.beforeChanger = new EventEmitter();\n      this.activatedChange = new EventEmitter();\n      this.paramsChange = new EventEmitter();\n      this.dataChange = new EventEmitter();\n      this.queryChange = new EventEmitter();\n      this.routeChange = new EventEmitter();\n      this.parentRouteChange = new EventEmitter();\n      this.parentChange = new EventEmitter();\n      this.parentDataChange = new EventEmitter();\n      this.stateChange = new EventEmitter();\n      this.crumbArray = [];\n      this.$document = document;\n      this.apply();\n    }\n\n    ngOnInit() {\n      this.docCallbacks = this.RouteWatchReporter.getDocumentCallbacks();\n      this.RouteWatchReporter.router.events.subscribe(event => {\n        if (event.constructor === NavigationEnd) {\n          this.beforeChanger.emit(this.RouteWatchReporter);\n          this.apply();\n          Promise.resolve().then(() => this.emit());\n        }\n      });\n\n      if (this.ActivatedRoute) {\n        this.ActivatedRoute.data.subscribe(data => this.dataChange.emit(this.data = data));\n      }\n\n      this.RouteWatchReporter.watchDocByCallbacks(this.$document, this.docCallbacks);\n      this.apply();\n      Promise.resolve().then(() => {\n        this.emit();\n        this.querySub = this.RouteWatchReporter.activatedRoute.queryParams.subscribe(query => this.queryChange.emit(query));\n      });\n\n      if (this.onLoad) {\n        this.onLoad({\n          state: this.RouteWatchReporter.current,\n          params: this.RouteWatchReporter.current.params,\n          current: this.RouteWatchReporter.current\n        });\n      }\n    }\n\n    ngOnDestroy() {\n      this.RouteWatchReporter.unwatchDocByCallbacks(this.$document, this.docCallbacks);\n\n      if (this.querySub) {\n        this.querySub.unsubscribe();\n      }\n    }\n\n    apply() {\n      const current = getCurrentByActive(this.ActivatedRoute);\n      this.route = current.config;\n      this.current = current;\n      this.state = current;\n      this.activated = current.ActivatedRoute;\n      this.params = current.params || {};\n      this.data = current.config.data || {};\n      this.attemptSetParentByCurrent(current);\n      this.updateCrumbArray();\n    }\n\n    updateCrumbArray() {\n      this.crumbArray = [];\n      this.populateCrumbArray(this.crumbArray, getRouteByActive(this.ActivatedRoute));\n      console.log('crumbArray', this.crumbArray);\n    }\n\n    populateCrumbArray(array, current) {\n      var _a;\n\n      const parent = current.parent;\n\n      if (parent === null || parent === void 0 ? void 0 : parent.routeConfig) {\n        array.unshift({\n          config: parent.routeConfig,\n          ActivatedRoute: parent\n        });\n\n        if ((_a = parent.parent) === null || _a === void 0 ? void 0 : _a.routeConfig) {\n          return this.populateCrumbArray(array, parent.parent);\n        }\n      }\n\n      if (current.routeConfig) {\n        this.populateCrumbArrayLikes(array, current.routeConfig);\n      }\n    }\n\n    populateCrumbArrayLikes(array, current) {\n      var _a;\n\n      const parent = this.getLikeParent(current);\n      console.log('populateCrumbArrayLikes', current, parent);\n\n      if (parent) {\n        array.unshift({\n          config: parent\n        });\n\n        if ((_a = parent.path) === null || _a === void 0 ? void 0 : _a.length) {\n          this.populateCrumbArrayLikes(array, parent);\n        }\n      }\n    }\n\n    attemptSetParentByCurrent(current) {\n      const parent = this.getCrumbParentFor(current);\n\n      if (parent) {\n        this.parentRoute = parent.config;\n        this.parent = parent.ActivatedRoute;\n        this.parentData = parent.config.data;\n        return;\n      }\n\n      delete this.parentRoute;\n      delete this.parent;\n      delete this.parentData;\n    }\n\n    emit() {\n      this.stateChanger.emit(this.RouteWatchReporter);\n      const current = this.RouteWatchReporter.getCurrent();\n      this.routeChange.emit(current.config);\n      this.stateChange.emit(current);\n      this.activatedChange.emit(current.ActivatedRoute);\n      this.paramsChange.emit(current.params);\n      this.dataChange.emit(current.config.data);\n      const parent = current.parent;\n\n      if (parent) {\n        const config = parent.config;\n        const ar = parent.ActivatedRoute;\n        this.parentRouteChange.emit(config);\n        this.parentChange.emit(ar);\n        this.parentDataChange.emit(config.data);\n      }\n    }\n\n    goBackTo(name, params) {\n      this.RouteWatchReporter.goBackTo(name, params);\n    }\n\n    tryBack(name, params) {\n      this.RouteWatchReporter.tryBack(name, params);\n    }\n\n    getCrumbParentFor(current) {\n      const parent = current.parent;\n\n      if (parent && parent.ActivatedRoute.routeConfig) {\n        return {\n          ActivatedRoute: parent.ActivatedRoute,\n          config: parent.config\n        };\n      }\n\n      const likeParent = this.getLikeParent(current.config);\n\n      if (likeParent) {\n        return {\n          config: likeParent\n        };\n      }\n    }\n\n    getLikeParent(route) {\n      var _a;\n\n      const currentPathing = ((_a = route.path) === null || _a === void 0 ? void 0 : _a.split('/')) || [];\n      let likeParent;\n      currentPathing.pop();\n\n      while (currentPathing.length) {\n        const targetPath = currentPathing.join('/');\n        likeParent = this.Router.config.find(route => route.path === targetPath);\n\n        if (likeParent) {\n          return likeParent;\n        }\n\n        currentPathing.pop();\n      }\n\n      const redirectRoot = this.Router.config.find(x => x.path === '' && x.redirectTo && x.redirectTo !== route.path);\n\n      if (redirectRoot) {\n        return this.Router.config.find(route => route.path === redirectRoot.redirectTo);\n      }\n    }\n\n  }\n\n  RouteReporter.ɵfac = function RouteReporter_Factory(t) {\n    return new (t || RouteReporter)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.RouteWatchReporter), i0.ɵɵdirectiveInject(i1.ActivatedRoute));\n  };\n\n  RouteReporter.ɵdir = i0.ɵɵdefineDirective({\n    type: RouteReporter,\n    selectors: [[\"route-reporter\"]],\n    inputs: {\n      onLoad: \"onLoad\",\n      activated: \"activated\",\n      params: \"params\",\n      data: \"data\",\n      query: \"query\",\n      route: \"route\",\n      parentRoute: \"parentRoute\",\n      parent: \"parent\",\n      parentData: \"parentData\",\n      current: \"current\",\n      state: \"state\"\n    },\n    outputs: {\n      stateChanger: \"onChange\",\n      beforeChanger: \"beforeChange\",\n      activatedChange: \"activatedChange\",\n      paramsChange: \"paramsChange\",\n      dataChange: \"dataChange\",\n      queryChange: \"queryChange\",\n      routeChange: \"routeChange\",\n      parentRouteChange: \"parentRouteChange\",\n      parentChange: \"parentChange\",\n      parentDataChange: \"parentDataChange\",\n      stateChange: \"stateChange\"\n    },\n    exportAs: [\"RouteReporter\"]\n  });\n  return RouteReporter;\n})();","map":null,"metadata":{},"sourceType":"module"}