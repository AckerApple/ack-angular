{"ast":null,"code":"import { ack as ackX } from \"ack-x/es/index-browser\";\nexport function between(input, a, b) {\n  if (a == null || b == null) return false;\n  return input >= a && input <= b || input <= a && input >= b ? true : false;\n}\nexport function replaceMaxLength(input, max, replacement = '...') {\n  if ((input === null || input === void 0 ? void 0 : input.length) > max) {\n    return input.slice(0, max) + replacement;\n  }\n\n  return input;\n}\nexport function numberToPhone(val) {\n  if (val == null || !val) {\n    return val;\n  }\n\n  val = String(val).replace(/[^0-9]/g, '');\n  if (val.length == 0) return val;\n  return '(' + val.substring(0, 3) + ') ' + val.substring(3, 6) + '-' + val.substring(6, 10);\n}\nexport function toNumber(val) {\n  return Number(numbers(val, \".\"));\n}\nexport function numberSuffix(val, rtnVal = false) {\n  var rtn = rtnVal ? val : '';\n  val = Number(val);\n  if (!val || isNaN(val)) return '';\n  var j = val % 10,\n      k = val % 100;\n\n  if (j == 1 && k != 11) {\n    return rtn + \"st\";\n  }\n\n  if (j == 2 && k != 12) {\n    return rtn + \"nd\";\n  }\n\n  if (j == 3 && k != 13) {\n    return rtn + \"rd\";\n  }\n\n  return rtn + \"th\";\n}\nexport function array(input, repeat, repeatValue) {\n  const isArray = input != null && input.constructor == Array;\n  let rtn = isArray ? input : [];\n\n  if (!repeat && !isArray && input != null) {\n    rtn.push(input);\n  }\n\n  if (repeat && !isNaN(Number(repeat))) {\n    const val = typeof repeatValue === 'undefined' ? input : repeatValue;\n\n    while (rtn.length < repeat) {\n      rtn.push(val);\n    }\n  }\n\n  return rtn;\n}\nexport function arrayOfObjects(input, repeat, repeatValue) {\n  return array(input, repeat, repeatValue).map((v, i) => ({\n    value: v,\n    index: i\n  }));\n}\nexport function markdownAnchor(input) {\n  input = input.toString().replace(/&/gi, 'amp');\n  input = input.toString().replace(/ /gi, '-');\n  input = input.replace(/[^a-z0-9_-]/gi, '');\n  return input.toLowerCase();\n}\nexport function textDownload(input) {\n  if (input == null) return input;\n  return 'data:text/plain;charset=utf-8,' + encodeURIComponent(input);\n}\nexport function yesno(input) {\n  if (input == null) return input;\n  return input ? 'yes' : 'no';\n}\nexport function yesNo(input) {\n  if (input == null) return input;\n  return input ? 'Yes' : 'No';\n}\nexport function boolean(input) {\n  if (input == null) return false;\n  const num = Number(input);\n\n  if (!isNaN(num)) {\n    return Boolean(num) ? true : false;\n  }\n\n  if (input.toLowerCase) {\n    if (input.toLowerCase() == 'true') return true;\n    if (input.toLowerCase() == 'false') return false;\n  }\n\n  return Boolean(input) ? true : false;\n}\nexport function bit(input) {\n  return boolean(input) ? 1 : 0;\n}\nexport function numbers(input, safeChars) {\n  let xString = '[^0-9';\n\n  if (safeChars) {\n    if (safeChars.length > 4) {\n      safeChars = safeChars.substring(0, 4);\n    }\n\n    xString += safeChars;\n  }\n\n  xString += ']';\n  const regX = new RegExp(xString, 'g');\n  return input ? String(input).replace(regX, '') : input;\n}\nexport function capitalizeWords(input) {\n  var reg = /[^\\W_]+[^\\s-]* */g;\n  return !!input ? input.replace(reg, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  }) : '';\n}\nexport function capitalize(input) {\n  input = pipes.capitalizeOne(input);\n  var reg = /[.?!][\\s\\r\\t]+\\w/g;\n  return !!input ? input.replace(reg, pipes.capitalizeAfterSentence) : '';\n}\nexport function capitalizeAfterSentence(input) {\n  var reg = /[\\s\\r\\t]\\w/g;\n  return !!input ? input.replace(reg, function (txt) {\n    return txt.charAt(0) + txt.charAt(1).toUpperCase() + txt.substr(2).toLowerCase();\n  }) : '';\n}\nexport function capitalizeOne(input) {\n  var reg = /[^\\W_]+[^\\s-]*/;\n  return !!input ? input.replace(reg, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  }) : '';\n}\n\nfunction a(name) {\n  const av = new ackX();\n  return invokeRotator(av[name]);\n}\n\nimport { invokeRotator } from \"./invokeRotator\";\nexport const aDate = a('date');\nexport const aTime = a('time');\nexport const aMath = invokeRotator(Math);\nexport const aString = invokeRotator(String);\nexport const ack = invokeRotator(ackX);\nexport const pipes = {\n  ack,\n  aDate,\n  aMath,\n  array,\n  aString,\n  aTime,\n  between,\n  capitalize,\n  capitalizeAfterSentence,\n  capitalizeOne,\n  capitalizeWords,\n  numbers,\n  numberSuffix,\n  numberToPhone,\n  markdownAnchor,\n  replaceMaxLength,\n  textDownload,\n  toNumber,\n  yesno,\n  yesNo\n};","map":null,"metadata":{},"sourceType":"module"}