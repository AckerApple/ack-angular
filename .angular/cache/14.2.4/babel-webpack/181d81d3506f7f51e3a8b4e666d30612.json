{"ast":null,"code":"import { array } from \"../pipes.class\";\nimport { ElementRef, TemplateRef, EventEmitter } from \"@angular/core\";\nimport { TemplateReader } from \"../TemplateReader.class\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../pipes\";\n\nfunction AckOptions_div_1_1_ng_template_0_Template(rf, ctx) {}\n\nconst _c0 = function (a0) {\n  return {\n    item: a0\n  };\n};\n\nfunction AckOptions_div_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AckOptions_div_1_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.TemplateReader.templates.selected)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c0, item_r1));\n  }\n}\n\nfunction AckOptions_div_1_2_ng_template_0_Template(rf, ctx) {}\n\nconst _c1 = function (a0, a1) {\n  return {\n    item: a0,\n    selected: a1\n  };\n};\n\nfunction AckOptions_div_1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AckOptions_div_1_2_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.TemplateReader.templates.templateRef)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c1, item_r1, ctx_r3.isItemSelected(item_r1)));\n  }\n}\n\nfunction AckOptions_div_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r1);\n  }\n}\n\nfunction AckOptions_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"click\", function AckOptions_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const item_r1 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.selectItem(item_r1));\n    });\n    i0.ɵɵtemplate(1, AckOptions_div_1_1_Template, 1, 4, null, 3);\n    i0.ɵɵtemplate(2, AckOptions_div_1_2_Template, 1, 5, null, 3);\n    i0.ɵɵtemplate(3, AckOptions_div_1_span_3_Template, 2, 1, \"span\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getItemClass(item_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.TemplateReader.templates.selected && ctx_r0.isItemSelected(item_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.TemplateReader.templates.templateRef && (!ctx_r0.TemplateReader.templates.selected || !ctx_r0.isItemSelected(item_r1)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.TemplateReader.templates.templateRef);\n  }\n}\n\nconst _c2 = function (a0) {\n  return {\n    \"border-grey-6x border-top\": a0\n  };\n};\n\nexport let AckOptions = /*#__PURE__*/(() => {\n  class AckOptions {\n    constructor(ElementRef) {\n      this.ElementRef = ElementRef;\n      this.array = [];\n      this.stylize = true;\n      this.TemplateReader = new TemplateReader({\n        lastTemplateName: \"templateRef\",\n        types: {\n          option: \"templateRef\",\n          selected: \"selected\"\n        }\n      });\n      this.modelChange = new EventEmitter();\n    }\n\n    ngAfterViewInit() {\n      Promise.resolve().then(() => {\n        if (this.inputTemplateRefs) {\n          this.TemplateReader.readTemplates(this.inputTemplateRefs);\n        }\n\n        if (this.templateRefs) {\n          this.TemplateReader.readTemplates(this.templateRefs);\n        }\n      });\n    }\n\n    selectItem(item) {\n      const value = this.getArrayItemValue(item);\n      const isArrayMode = this.multiple || this.modelAsArray;\n\n      if (isArrayMode) {\n        const modelIndex = this.modelIndex(item);\n\n        if (modelIndex >= 0) {\n          this.model.splice(modelIndex, 1);\n        } else {\n          this.model.push(this.getArrayItemModel(item));\n        }\n\n        if (this.max) {\n          while (this.model.length > this.max) {\n            this.model.shift();\n          }\n        }\n      } else {\n        if (this.toggleable && this.model == value) {\n          delete this.model;\n        } else {\n          this.model = this.getArrayItemModel(item);\n        }\n      }\n\n      this.emitChange();\n    }\n\n    emitChange() {\n      this.modelChange.emit(this.model);\n      const form = getParentByTagName(this.ElementRef.nativeElement, 'form');\n      if (form) this.fireFormEvents(form);\n    }\n\n    fireFormEvents(form) {\n      let event = document.createEvent(\"HTMLEvents\");\n      event.initEvent(\"input\", true, true);\n      form.dispatchEvent(event);\n      event = document.createEvent(\"HTMLEvents\");\n      event.initEvent(\"change\", true, true);\n      form.dispatchEvent(event);\n    }\n\n    getArrayItemModel(item) {\n      if (this.arrayToModelKey != null) {\n        if (this.arrayToModelKey == '') {\n          return item;\n        }\n\n        const split = this.arrayToModelKey.split('.');\n        var scope = item;\n\n        while (split.length) {\n          if (scope == null) return null;\n          let key = split.shift();\n          scope = scope[key];\n        }\n\n        return scope;\n      }\n\n      return this.getArrayItemValue(item);\n    }\n\n    getArrayItemValue(item) {\n      if (!this.arrayKey) return item;\n      let items = this.arrayKey.split('.');\n      var scope = item;\n\n      while (items.length) {\n        if (scope == null) return null;\n        let firstItem = items.shift();\n        scope = scope[firstItem];\n      }\n\n      return scope;\n    }\n\n    getModelValueToArrayItem(modelValue) {\n      if (!this.modelKey) return modelValue;\n      let items = this.modelKey.split('.');\n      var scope = modelValue;\n\n      while (items.length) {\n        if (scope == null) return null;\n        let firstItem = items.shift();\n        scope = scope[firstItem];\n      }\n\n      return scope;\n    }\n\n    modelIndex(item) {\n      this.model = array(this.model);\n\n      for (let i = this.model.length - 1; i >= 0; --i) {\n        let value = this.getArrayItemValue(item);\n        let modelValue = this.getModelValueToArrayItem(this.model[i]);\n        if (value == modelValue) return i;\n      }\n\n      return -1;\n    }\n\n    isItemSelected(item) {\n      return this.modelIndex(item) >= 0;\n    }\n\n    getItemClass(item) {\n      const selected = this.isItemSelected(item);\n      let string = '';\n\n      if (this.stylize) {\n        string += 'cursor-pointer pad-h pad-v-sm border-grey-6x border-bottom ';\n      }\n\n      if (this.stylize && selected) {\n        string += 'bg-warning ';\n      }\n\n      if (this.stylize && !selected) {\n        string += 'hover-bg-grey-5x ';\n      }\n\n      return string;\n    }\n\n  }\n\n  AckOptions.ɵfac = function AckOptions_Factory(t) {\n    return new (t || AckOptions)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  AckOptions.ɵcmp = i0.ɵɵdefineComponent({\n    type: AckOptions,\n    selectors: [[\"ack-options\"]],\n    contentQueries: function AckOptions_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRefs = _t);\n      }\n    },\n    inputs: {\n      array: \"array\",\n      stylize: \"stylize\",\n      multiple: \"multiple\",\n      modelAsArray: \"modelAsArray\",\n      max: \"max\",\n      toggleable: \"toggleable\",\n      inputTemplateRefs: \"inputTemplateRefs\",\n      model: \"model\",\n      arrayKey: \"arrayKey\",\n      modelKey: \"modelKey\",\n      arrayToModelKey: \"arrayToModelKey\"\n    },\n    outputs: {\n      modelChange: \"modelChange\"\n    },\n    decls: 3,\n    vars: 6,\n    consts: [[3, \"ngClass\"], [3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\", \"click\"], [4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function AckOptions_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵtemplate(1, AckOptions_div_1_Template, 4, 4, \"div\", 1);\n        i0.ɵɵpipe(2, \"array\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(4, _c2, ctx.stylize));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(2, 2, ctx.array));\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet, i2.ForceArray],\n    encapsulation: 2\n  });\n  return AckOptions;\n})();\nexport function getParentByTagName(node, tagname) {\n  let parent;\n  if (node === null || tagname === '') return;\n  parent = node.parentNode;\n  tagname = tagname.toUpperCase();\n\n  while (parent && parent.tagName !== \"HTML\") {\n    if (parent.tagName === tagname) {\n      return parent;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return;\n}","map":null,"metadata":{},"sourceType":"module"}