{"ast":null,"code":"import { DomSanitizer } from '@angular/platform-browser';\nimport { KeysPipe } from './pipes/keys.pipe';\nimport * as pipesUtils from \"./pipes.class\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/platform-browser\";\nexport { KeysPipe } from './pipes/keys.pipe';\nexport let IndexTrack = /*#__PURE__*/(() => {\n  class IndexTrack {\n    transform(_x) {\n      return function (index) {\n        return index;\n      };\n    }\n\n  }\n\n  IndexTrack.ɵfac = function IndexTrack_Factory(t) {\n    return new (t || IndexTrack)();\n  };\n\n  IndexTrack.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"indexTrack\",\n    type: IndexTrack,\n    pure: true\n  });\n  return IndexTrack;\n})();\nexport let Stringify = /*#__PURE__*/(() => {\n  class Stringify {\n    transform(input, spaces = 0) {\n      return JSON.stringify(input, null, spaces);\n    }\n\n  }\n\n  Stringify.ɵfac = function Stringify_Factory(t) {\n    return new (t || Stringify)();\n  };\n\n  Stringify.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"stringify\",\n    type: Stringify,\n    pure: true\n  });\n  return Stringify;\n})();\nexport let ForceArray = /*#__PURE__*/(() => {\n  class ForceArray {\n    transform(input, repeat, repeatValue) {\n      return pipesUtils.array(input, repeat, repeatValue);\n    }\n\n  }\n\n  ForceArray.ɵfac = function ForceArray_Factory(t) {\n    return new (t || ForceArray)();\n  };\n\n  ForceArray.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"array\",\n    type: ForceArray,\n    pure: true\n  });\n  return ForceArray;\n})();\nexport let ArrayOfObjects = /*#__PURE__*/(() => {\n  class ArrayOfObjects {\n    transform(input, repeat, repeatValue) {\n      return pipesUtils.arrayOfObjects(input, repeat, repeatValue);\n    }\n\n  }\n\n  ArrayOfObjects.ɵfac = function ArrayOfObjects_Factory(t) {\n    return new (t || ArrayOfObjects)();\n  };\n\n  ArrayOfObjects.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"arrayOfObjects\",\n    type: ArrayOfObjects,\n    pure: true\n  });\n  return ArrayOfObjects;\n})();\nexport let SafeUrl = /*#__PURE__*/(() => {\n  class SafeUrl {\n    constructor(domSanitizer) {\n      this.domSanitizer = domSanitizer;\n    }\n\n    transform(input) {\n      return this.domSanitizer.bypassSecurityTrustResourceUrl(input);\n    }\n\n  }\n\n  SafeUrl.ɵfac = function SafeUrl_Factory(t) {\n    return new (t || SafeUrl)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n\n  SafeUrl.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"safeUrl\",\n    type: SafeUrl,\n    pure: true\n  });\n  return SafeUrl;\n})();\nexport let NumberWord = /*#__PURE__*/(() => {\n  class NumberWord {\n    constructor() {}\n\n    transform(input, number) {\n      return input + (number && number == 1 ? '' : 's');\n    }\n\n  }\n\n  NumberWord.ɵfac = function NumberWord_Factory(t) {\n    return new (t || NumberWord)();\n  };\n\n  NumberWord.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"numberWord\",\n    type: NumberWord,\n    pure: true\n  });\n  return NumberWord;\n})();\nexport let EndNumberWord = /*#__PURE__*/(() => {\n  class EndNumberWord {\n    constructor() {}\n\n    transform(input) {\n      return input && input == 1 ? '' : 's';\n    }\n\n  }\n\n  EndNumberWord.ɵfac = function EndNumberWord_Factory(t) {\n    return new (t || EndNumberWord)();\n  };\n\n  EndNumberWord.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"endNumberWord\",\n    type: EndNumberWord,\n    pure: true\n  });\n  return EndNumberWord;\n})();\nexport let SafeHtml = /*#__PURE__*/(() => {\n  class SafeHtml {\n    constructor(domSanitizer) {\n      this.domSanitizer = domSanitizer;\n    }\n\n    transform(input) {\n      return this.domSanitizer.bypassSecurityTrustHtml(input);\n    }\n\n  }\n\n  SafeHtml.ɵfac = function SafeHtml_Factory(t) {\n    return new (t || SafeHtml)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n\n  SafeHtml.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"safeHtml\",\n    type: SafeHtml,\n    pure: true\n  });\n  return SafeHtml;\n})();\nexport let SafeStyle = /*#__PURE__*/(() => {\n  class SafeStyle {\n    constructor(domSanitizer) {\n      this.domSanitizer = domSanitizer;\n    }\n\n    transform(input) {\n      return this.domSanitizer.bypassSecurityTrustStyle(input);\n    }\n\n  }\n\n  SafeStyle.ɵfac = function SafeStyle_Factory(t) {\n    return new (t || SafeStyle)(i0.ɵɵdirectiveInject(i1.DomSanitizer, 16));\n  };\n\n  SafeStyle.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"safeStyle\",\n    type: SafeStyle,\n    pure: true\n  });\n  return SafeStyle;\n})();\nexport let Between = /*#__PURE__*/(() => {\n  class Between {\n    transform(input, a, b) {\n      return pipesUtils.between(input, a, b);\n    }\n\n  }\n\n  Between.ɵfac = function Between_Factory(t) {\n    return new (t || Between)();\n  };\n\n  Between.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"between\",\n    type: Between,\n    pure: true\n  });\n  return Between;\n})();\nexport let ReplaceMaxLength = /*#__PURE__*/(() => {\n  class ReplaceMaxLength {\n    transform(input, max, replacement) {\n      return pipesUtils.replaceMaxLength(input, max, replacement);\n    }\n\n  }\n\n  ReplaceMaxLength.ɵfac = function ReplaceMaxLength_Factory(t) {\n    return new (t || ReplaceMaxLength)();\n  };\n\n  ReplaceMaxLength.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"replaceMaxLength\",\n    type: ReplaceMaxLength,\n    pure: true\n  });\n  return ReplaceMaxLength;\n})();\nexport let TextDownload = /*#__PURE__*/(() => {\n  class TextDownload {\n    transform(input) {\n      return pipesUtils.textDownload(input);\n    }\n\n  }\n\n  TextDownload.ɵfac = function TextDownload_Factory(t) {\n    return new (t || TextDownload)();\n  };\n\n  TextDownload.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"textDownload\",\n    type: TextDownload,\n    pure: true\n  });\n  return TextDownload;\n})();\nexport let NumberToPhone = /*#__PURE__*/(() => {\n  class NumberToPhone {\n    transform(input) {\n      return pipesUtils.numberToPhone(input);\n    }\n\n  }\n\n  NumberToPhone.ɵfac = function NumberToPhone_Factory(t) {\n    return new (t || NumberToPhone)();\n  };\n\n  NumberToPhone.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"numberToPhone\",\n    type: NumberToPhone,\n    pure: true\n  });\n  return NumberToPhone;\n})();\nexport let toNumber = /*#__PURE__*/(() => {\n  class toNumber {\n    transform(input) {\n      return pipesUtils.toNumber(input);\n    }\n\n  }\n\n  toNumber.ɵfac = function toNumber_Factory(t) {\n    return new (t || toNumber)();\n  };\n\n  toNumber.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"toNumber\",\n    type: toNumber,\n    pure: true\n  });\n  return toNumber;\n})();\nexport let NumberSuffix = /*#__PURE__*/(() => {\n  class NumberSuffix {\n    transform(input, rtnInput) {\n      return pipesUtils.numberSuffix(input, rtnInput);\n    }\n\n  }\n\n  NumberSuffix.ɵfac = function NumberSuffix_Factory(t) {\n    return new (t || NumberSuffix)();\n  };\n\n  NumberSuffix.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"numberSuffix\",\n    type: NumberSuffix,\n    pure: true\n  });\n  return NumberSuffix;\n})();\nexport let MarkdownAnchor = /*#__PURE__*/(() => {\n  class MarkdownAnchor {\n    transform(input) {\n      return pipesUtils.markdownAnchor(input);\n    }\n\n  }\n\n  MarkdownAnchor.ɵfac = function MarkdownAnchor_Factory(t) {\n    return new (t || MarkdownAnchor)();\n  };\n\n  MarkdownAnchor.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"markdownAnchor\",\n    type: MarkdownAnchor,\n    pure: true\n  });\n  return MarkdownAnchor;\n})();\nexport let Capitalize = /*#__PURE__*/(() => {\n  class Capitalize {\n    transform(input) {\n      return pipesUtils.capitalize(input);\n    }\n\n  }\n\n  Capitalize.ɵfac = function Capitalize_Factory(t) {\n    return new (t || Capitalize)();\n  };\n\n  Capitalize.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"capitalize\",\n    type: Capitalize,\n    pure: true\n  });\n  return Capitalize;\n})();\nexport let CapitalizeWords = /*#__PURE__*/(() => {\n  class CapitalizeWords {\n    transform(input) {\n      return pipesUtils.capitalizeWords(input);\n    }\n\n  }\n\n  CapitalizeWords.ɵfac = function CapitalizeWords_Factory(t) {\n    return new (t || CapitalizeWords)();\n  };\n\n  CapitalizeWords.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"capitalizeWords\",\n    type: CapitalizeWords,\n    pure: true\n  });\n  return CapitalizeWords;\n})();\nexport let Yesno = /*#__PURE__*/(() => {\n  class Yesno {\n    transform(input) {\n      return pipesUtils.yesno(input);\n    }\n\n  }\n\n  Yesno.ɵfac = function Yesno_Factory(t) {\n    return new (t || Yesno)();\n  };\n\n  Yesno.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"yesno\",\n    type: Yesno,\n    pure: true\n  });\n  return Yesno;\n})();\nexport let YesNo = /*#__PURE__*/(() => {\n  class YesNo {\n    transform(input) {\n      return pipesUtils.yesNo(input);\n    }\n\n  }\n\n  YesNo.ɵfac = function YesNo_Factory(t) {\n    return new (t || YesNo)();\n  };\n\n  YesNo.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"YesNo\",\n    type: YesNo,\n    pure: true\n  });\n  return YesNo;\n})();\nexport let BooleanPipe = /*#__PURE__*/(() => {\n  class BooleanPipe {\n    transform(input) {\n      return pipesUtils.boolean(input);\n    }\n\n  }\n\n  BooleanPipe.ɵfac = function BooleanPipe_Factory(t) {\n    return new (t || BooleanPipe)();\n  };\n\n  BooleanPipe.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"boolean\",\n    type: BooleanPipe,\n    pure: true\n  });\n  return BooleanPipe;\n})();\nexport let Bit = /*#__PURE__*/(() => {\n  class Bit {\n    transform(input) {\n      return pipesUtils.bit(input);\n    }\n\n  }\n\n  Bit.ɵfac = function Bit_Factory(t) {\n    return new (t || Bit)();\n  };\n\n  Bit.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"bit\",\n    type: Bit,\n    pure: true\n  });\n  return Bit;\n})();\nexport let Numbers = /*#__PURE__*/(() => {\n  class Numbers {\n    transform(input) {\n      return pipesUtils.numbers(input);\n    }\n\n  }\n\n  Numbers.ɵfac = function Numbers_Factory(t) {\n    return new (t || Numbers)();\n  };\n\n  Numbers.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"numbers\",\n    type: Numbers,\n    pure: true\n  });\n  return Numbers;\n})();\nexport let ADate = /*#__PURE__*/(() => {\n  class ADate {\n    transform(...args) {\n      return pipesUtils.aDate.apply(pipesUtils.aDate, args);\n    }\n\n  }\n\n  ADate.ɵfac = function ADate_Factory(t) {\n    return new (t || ADate)();\n  };\n\n  ADate.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"aDate\",\n    type: ADate,\n    pure: true\n  });\n  return ADate;\n})();\nexport let AMath = /*#__PURE__*/(() => {\n  class AMath {\n    transform(...args) {\n      return pipesUtils.aMath.apply(pipesUtils.aMath, args);\n    }\n\n  }\n\n  AMath.ɵfac = function AMath_Factory(t) {\n    return new (t || AMath)();\n  };\n\n  AMath.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"aMath\",\n    type: AMath,\n    pure: true\n  });\n  return AMath;\n})();\nexport let AString = /*#__PURE__*/(() => {\n  class AString {\n    transform(...args) {\n      return pipesUtils.aString.apply(pipesUtils.aString, args);\n    }\n\n  }\n\n  AString.ɵfac = function AString_Factory(t) {\n    return new (t || AString)();\n  };\n\n  AString.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"aString\",\n    type: AString,\n    pure: true\n  });\n  return AString;\n})();\nexport let ATime = /*#__PURE__*/(() => {\n  class ATime {\n    transform(...args) {\n      return pipesUtils.aTime.apply(pipesUtils.aTime, args);\n    }\n\n  }\n\n  ATime.ɵfac = function ATime_Factory(t) {\n    return new (t || ATime)();\n  };\n\n  ATime.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"aTime\",\n    type: ATime,\n    pure: true\n  });\n  return ATime;\n})();\nexport let Ack = /*#__PURE__*/(() => {\n  class Ack {\n    transform(...args) {\n      return pipesUtils.ack.apply(pipesUtils.ack, args);\n    }\n\n  }\n\n  Ack.ɵfac = function Ack_Factory(t) {\n    return new (t || Ack)();\n  };\n\n  Ack.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"ack\",\n    type: Ack,\n    pure: true\n  });\n  return Ack;\n})();\nexport let TypeofPipe = /*#__PURE__*/(() => {\n  class TypeofPipe {\n    transform(input) {\n      return typeof input;\n    }\n\n  }\n\n  TypeofPipe.ɵfac = function TypeofPipe_Factory(t) {\n    return new (t || TypeofPipe)();\n  };\n\n  TypeofPipe.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"typeof\",\n    type: TypeofPipe,\n    pure: true\n  });\n  return TypeofPipe;\n})();\nexport let ConsolePipe = /*#__PURE__*/(() => {\n  class ConsolePipe {\n    transform() {\n      return console.log.apply(console, arguments);\n    }\n\n  }\n\n  ConsolePipe.ɵfac = function ConsolePipe_Factory(t) {\n    return new (t || ConsolePipe)();\n  };\n\n  ConsolePipe.ɵpipe = i0.ɵɵdefinePipe({\n    name: \"console\",\n    type: ConsolePipe,\n    pure: true\n  });\n  return ConsolePipe;\n})();\nexport const pipes = [IndexTrack, Stringify, ForceArray, ArrayOfObjects, SafeHtml, SafeUrl, SafeStyle, TextDownload, MarkdownAnchor, Capitalize, CapitalizeWords, Yesno, YesNo, KeysPipe, TypeofPipe, ConsolePipe, ADate, AMath, AString, ATime, Ack, Numbers, toNumber, NumberToPhone, NumberSuffix, Bit, NumberWord, EndNumberWord, BooleanPipe, Between, ReplaceMaxLength];","map":null,"metadata":{},"sourceType":"module"}