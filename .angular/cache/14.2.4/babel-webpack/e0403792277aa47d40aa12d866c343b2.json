{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ErrorLog = /*#__PURE__*/(() => {\n  class ErrorLog {\n    constructor() {\n      this.log = [];\n      this.maxLog = 30;\n    }\n\n    monitorWindow(win) {\n      win = win || window;\n\n      const callback = evt => this.add(evt, false);\n\n      win.addEventListener('error', callback);\n    }\n\n    reject(err) {\n      const e = this.add(err);\n      return Promise.reject(e);\n    }\n\n    rejector() {\n      return err => this.reject(err);\n    }\n\n    add(e, toConsole) {\n      const ob = this.paramAudit(e, toConsole);\n      this.log.unshift(ob);\n\n      if (this.maxLog) {\n        while (this.log.length > this.maxLog) {\n          this.log.pop();\n        }\n      }\n\n      return logObToErrorObject(ob);\n    }\n\n    paramAudit(e, toConsole) {\n      if (e.constructor === String) {\n        e = new Error(e);\n      }\n\n      if (toConsole == null || toConsole) console.error(e);\n      const err = this.objectifyError(e);\n      err['datetime'] = err['datetime'] || getDateTimeString();\n\n      if (!e.message && e.status == -1) {\n        e.message = \"Cannot connect to server\";\n        e.details = e.details || \"Connection to internet maybe down. Also possible CORS needs be to enabled at remote server.\";\n      }\n\n      return err;\n    }\n\n    objectifyError(err) {\n      const keys = Object.getOwnPropertyNames(err);\n      keys.push.apply(keys, Object.keys(err));\n      const recErr = {};\n      keys.forEach(v => recErr[v] = err[v]);\n      const knownKeys = [\"stack\", \"message\", \"name\", \"arguments\", \"type\"];\n      knownKeys.forEach(key => {\n        if (typeof err[key] != 'undefined') {\n          recErr[key] = err[key];\n        }\n      });\n      const body = err.body || err._body;\n\n      if (body && !err.data && err.headers) {\n        const contentType = err.headers.get('content-type');\n\n        if (contentType && contentType.toLowerCase() == 'application/json') {\n          try {\n            recErr.data = JSON.parse(body);\n          } catch (e) {}\n        }\n      }\n\n      return recErr;\n    }\n\n    rethrow(err) {\n      const e = this.add(err);\n      throw e;\n    }\n\n  }\n\n  ErrorLog.ɵfac = function ErrorLog_Factory(t) {\n    return new (t || ErrorLog)();\n  };\n\n  ErrorLog.ɵprov = i0.ɵɵdefineInjectable({\n    token: ErrorLog,\n    factory: ErrorLog.ɵfac\n  });\n  return ErrorLog;\n})();\n\nfunction getErrorMessage(err) {\n  return err.message || err.statusText || err.name || 'Unexpected Error Occured';\n}\n\nfunction getResponseMessage(res) {\n  if (res.data && res.data.error && res.data.error.message) {\n    return res.data.error.message;\n  }\n\n  return getErrorMessage(res);\n}\n\nfunction logObToErrorObject(log) {\n  const e = new Error(getResponseMessage(log));\n  Object.keys(log).forEach(v => e[v] = log[v]);\n  return e;\n}\n\nfunction getDateTimeString() {\n  return function (d) {\n    return ('0' + (d.getMonth() + 1)).slice(-2) + '/' + ('0' + d.getDate()).slice(-2) + '/' + d.getFullYear();\n  }(new Date()) + ' ' + function (d) {\n    var h = d.getHours(),\n        t = 'AM',\n        m = d.getMinutes();\n    var mn = m < 10 ? '0' + m : m;\n    h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h;\n    return ('0' + h).slice(-2) + ':' + ('0' + mn).slice(-2) + ' ' + t;\n  }(new Date());\n}","map":null,"metadata":{},"sourceType":"module"}