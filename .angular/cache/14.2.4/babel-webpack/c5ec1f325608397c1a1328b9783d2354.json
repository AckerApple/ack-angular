{"ast":null,"code":"import { ElementRef } from \"@angular/core\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"../directives/ElementSizeModel.directive\";\n\nfunction AbsoluteOverflowX_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtext(1, \"\\u00A0\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r0.elementHeightModel, \"px\");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    overflow: a0,\n    position: \"absolute\",\n    width: \"100%\"\n  };\n};\n\nconst _c1 = function () {\n  return {};\n};\n\nconst _c2 = [\"*\"];\nexport let AbsoluteOverflowX = /*#__PURE__*/(() => {\n  class AbsoluteOverflowX {\n    constructor(ElementRef) {\n      this.ElementRef = ElementRef;\n      this.active = true;\n      this.overflow = 'auto';\n    }\n\n    ngOnInit() {\n      this.checkDisplay();\n    }\n\n    ngOnChanges(changes) {\n      if (changes.active) {\n        this.checkDisplay();\n      }\n    }\n\n    ngAfterViewInit() {\n      this.ElementRef.nativeElement.style.display = 'block';\n    }\n\n    checkDisplay() {\n      this.ElementRef.nativeElement.style.position = this.active ? 'relative' : 'static';\n    }\n\n  }\n\n  AbsoluteOverflowX.ɵfac = function AbsoluteOverflowX_Factory(t) {\n    return new (t || AbsoluteOverflowX)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  AbsoluteOverflowX.ɵcmp = i0.ɵɵdefineComponent({\n    type: AbsoluteOverflowX,\n    selectors: [[\"absolute-overflow-x\"]],\n    inputs: {\n      scrollBars: \"scrollBars\",\n      wrapClass: \"wrapClass\",\n      active: \"active\",\n      overflow: \"overflow\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 9,\n    consts: [[3, \"elementHeightModel\", \"ngClass\", \"ngStyle\", \"elementHeightModelChange\"], [\"style\", \"visibility:hidden;overflow:hidden;width:100%\", 3, \"height\", 4, \"ngIf\"], [2, \"visibility\", \"hidden\", \"overflow\", \"hidden\", \"width\", \"100%\"]],\n    template: function AbsoluteOverflowX_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"elementHeightModelChange\", function AbsoluteOverflowX_Template_div_elementHeightModelChange_0_listener($event) {\n          return ctx.elementHeightModel = $event;\n        });\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, AbsoluteOverflowX_div_2_Template, 2, 2, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"no-scroll-bars\", ctx.active && !ctx.scrollBars && ctx.scrollBars != null);\n        i0.ɵɵproperty(\"elementHeightModel\", ctx.elementHeightModel)(\"ngClass\", ctx.wrapClass)(\"ngStyle\", ctx.active ? i0.ɵɵpureFunction1(6, _c0, ctx.overflow) : i0.ɵɵpureFunction0(8, _c1));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.elementHeightModel && ctx.active);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgIf, i1.NgStyle, i2.ElementHeightModel],\n    encapsulation: 2\n  });\n  return AbsoluteOverflowX;\n})();","map":null,"metadata":{},"sourceType":"module"}