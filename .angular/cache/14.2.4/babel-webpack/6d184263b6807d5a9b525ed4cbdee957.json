{"ast":null,"code":"import { Router, NavigationEnd } from \"@angular/router\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let RouteHistory = /*#__PURE__*/(() => {\n  class RouteHistory {\n    constructor(Router) {\n      this.Router = Router;\n      this.routeHistory = [];\n      this.maxHistory = 10;\n      this.historyIndex = 0;\n      this.subs = [];\n      this.monitor();\n    }\n\n    monitor() {\n      this.subs.push(this.Router.events.subscribe(event => {\n        if (event.constructor === NavigationEnd) {\n          this.addRouteToHistory();\n        }\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n    addRouteToHistory() {\n      const priorPage = this.historyIndex + 1;\n      const nextPage = this.historyIndex - 1;\n      const matchesBack = this.routeHistory.length >= priorPage && this.Router.url === this.routeHistory[priorPage];\n      const matchesNext = this.routeHistory.length >= nextPage && this.Router.url === this.routeHistory[nextPage];\n      const matchesCurrent = this.Router.url === this.routeHistory[this.historyIndex];\n\n      if (matchesNext) {\n        --this.historyIndex;\n      }\n\n      if (matchesBack) {\n        ++this.historyIndex;\n      }\n\n      if (matchesNext || matchesCurrent || matchesBack) {\n        this.applyNav();\n        return;\n      }\n\n      while (this.routeHistory.length > this.maxHistory) {\n        this.routeHistory.pop();\n      }\n\n      this.routeHistory.splice(this.historyIndex, 0, this.Router.url);\n      this.applyNav();\n    }\n\n    applyNav() {\n      const posAvail = this.historyIndex < this.routeHistory.length - 1;\n\n      if (posAvail) {\n        this.back = this.routeHistory[this.historyIndex + 1];\n      } else if (this.routeHistory.length) {\n        const newBack = this.routeHistory[this.routeHistory.length - 1].split(\"/\");\n        newBack.pop();\n        this.back = newBack.join(\"/\");\n        ++this.historyIndex;\n      } else {\n        delete this.back;\n      }\n\n      if (this.historyIndex > 0) {\n        this.forward = this.routeHistory[this.historyIndex - 1];\n      } else {\n        delete this.forward;\n      }\n    }\n\n    goBack() {\n      if (this.historyIndex === this.routeHistory.length - 1) return;\n      const rh = this.routeHistory[this.historyIndex + 1];\n      this.Router.navigate([rh]);\n    }\n\n    goForward() {\n      if (this.historyIndex === 0) return;\n      const rh = this.routeHistory[this.historyIndex - 1];\n      this.Router.navigate([rh]);\n    }\n\n  }\n\n  RouteHistory.ɵfac = function RouteHistory_Factory(t) {\n    return new (t || RouteHistory)(i0.ɵɵinject(i1.Router));\n  };\n\n  RouteHistory.ɵprov = i0.ɵɵdefineInjectable({\n    token: RouteHistory,\n    factory: RouteHistory.ɵfac\n  });\n  return RouteHistory;\n})();","map":null,"metadata":{},"sourceType":"module"}