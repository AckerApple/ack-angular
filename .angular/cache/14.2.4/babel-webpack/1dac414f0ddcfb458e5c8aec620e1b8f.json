{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, NgModule } from '@angular/core';\n/**\n * Represents a scrolling action\n */\n\nclass PageScrollInstance {\n  /**\n   * Private constructor, requires the properties assumed to be the bare minimum.\n   * Use the factory methods to create instances:\n   *      {@link PageScrollService#create}\n   */\n  constructor(pageScrollOptions) {\n    /**\n     * These properties will be set/manipulated if the scroll animation starts\n     */\n\n    /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n    this.startScrollPosition = 0;\n    /* Whether an interrupt listener is attached to the body or not */\n\n    this.interruptListenersAttached = false;\n    /* References to the timer instance that is used to perform the scroll animation to be\n     able to clear it on animation end*/\n\n    this.timer = null;\n\n    if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {\n      pageScrollOptions.scrollViews = [pageScrollOptions.document.documentElement, pageScrollOptions.document.body, pageScrollOptions.document.body.parentNode];\n      this.isInlineScrolling = false;\n    } else {\n      this.isInlineScrolling = true;\n    }\n\n    this.pageScrollOptions = pageScrollOptions;\n  }\n\n  static getScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const body = pageScrollOptions.document.body;\n    const docEl = pageScrollOptions.document.documentElement;\n    const windowPageYOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageYOffset || undefined;\n    const windowPageXOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageXOffset || undefined;\n    const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n    const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n    const clientTop = docEl.clientTop || body.clientTop || 0;\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n\n    if (scrollTargetElement === undefined || scrollTargetElement === null) {\n      // No element found, so return the current position to not cause any change in scroll position\n      return {\n        top: scrollTop,\n        left: scrollLeft\n      };\n    }\n\n    const box = scrollTargetElement.getBoundingClientRect();\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n    return {\n      top: Math.round(top),\n      left: Math.round(left)\n    };\n  }\n\n  static getInlineScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const position = {\n      top: scrollTargetElement.offsetTop,\n      left: scrollTargetElement.offsetLeft\n    };\n\n    if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {\n      const accumulatedParentsPos = {\n        top: 0,\n        left: 0\n      }; // not named window to make sure we're not getting the global window variable by accident\n\n      const theWindow = scrollTargetElement.ownerDocument.defaultView;\n      let parentFound = false; // Start parent is the immediate parent\n\n      let parent = scrollTargetElement.parentElement; // Iterate upwards all parents\n\n      while (!parentFound && parent !== undefined && parent !== null) {\n        if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {\n          accumulatedParentsPos.top += parent.offsetTop;\n          accumulatedParentsPos.left += parent.offsetLeft;\n        } // Next iteration\n\n\n        parent = parent.parentElement;\n        parentFound = parent === pageScrollOptions.scrollViews[0];\n      }\n\n      if (parentFound) {\n        // Only use the results if we found the parent, otherwise we accumulated too much anyway\n        position.top += accumulatedParentsPos.top;\n        position.left += accumulatedParentsPos.left;\n      } else {\n        /* TODO Uncomment\n        if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {\n          console.warn('Unable to find nested scrolling targets parent!');\n        }*/\n      }\n    }\n\n    return position;\n  }\n\n  getScrollPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.scrollLeft;\n    }\n\n    return scrollingView.scrollTop;\n  }\n\n  getScrollClientPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.clientWidth;\n    }\n\n    return scrollingView.clientHeight;\n  }\n  /**\n   * Extract the exact location of the scrollTarget element.\n   *\n   * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n   * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n   *\n   */\n\n\n  extractScrollTargetPosition() {\n    const scrollTargetElement = this.getScrollTargetElement();\n\n    if (scrollTargetElement === null || scrollTargetElement === undefined) {\n      // Scroll target not found\n      return {\n        top: NaN,\n        left: NaN\n      };\n    }\n\n    if (this.isInlineScrolling) {\n      return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n    }\n\n    return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n  }\n  /**\n   * Get the top offset of the scroll animation.\n   * This automatically takes the offset location of the scrolling container/scrolling view\n   * into account (for nested/inline scrolling).\n   */\n\n\n  getCurrentOffset() {\n    return this.pageScrollOptions.scrollOffset;\n  }\n  /**\n   * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollViews to the provided value\n   * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n   *          false if it failed for all ScrollViews, meaning that we should stop the animation\n   *          (probably because we're at the end of the scrolling region)\n   */\n\n\n  setScrollPosition(position) {\n    // Set the new scrollTop/scrollLeft to all scrollViews elements\n    return this.pageScrollOptions.scrollViews.reduce((oneAlreadyWorked, scrollingView) => {\n      const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);\n\n      if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {\n        const scrollDistance = Math.abs(startScrollPropertyValue - position); // The movement we need to perform is less than 2px\n        // This we consider a small movement which some browser may not perform when\n        // changing the scrollTop/scrollLeft property\n        // Thus in this cases we do not stop the scroll animation, although setting the\n        // scrollTop/scrollLeft value \"fails\"\n\n        const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;\n\n        if (!this.pageScrollOptions.verticalScrolling) {\n          scrollingView.scrollLeft = position;\n        } else {\n          scrollingView.scrollTop = position;\n        } // Return true if setting the new scrollTop/scrollLeft value worked\n        // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n        // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n        // set due to dpi or rounding irregularities)\n\n\n        if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {\n          return true;\n        }\n      }\n\n      return oneAlreadyWorked;\n    }, false);\n  }\n  /**\n   * Trigger firing a animation finish event\n   * @param value Whether the animation finished at the target (true) or got interrupted (false)\n   */\n\n\n  fireEvent(value) {\n    if (this.pageScrollOptions.scrollFinishListener) {\n      this.pageScrollOptions.scrollFinishListener.emit(value);\n    }\n  }\n  /**\n   * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n   * will be called if any of the attached events is fired.\n   *\n   * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n   */\n\n\n  attachInterruptListeners(interruptReporter) {\n    if (this.interruptListenersAttached) {\n      // Detach possibly existing listeners first\n      this.detachInterruptListeners();\n    }\n\n    this.interruptListener = event => {\n      interruptReporter.report(event, this);\n    };\n\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = true;\n  }\n  /**\n   * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n   * interrupt\" events.\n   */\n\n\n  detachInterruptListeners() {\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = false;\n  }\n\n  getScrollTargetElement() {\n    if (typeof this.pageScrollOptions.scrollTarget === 'string') {\n      const targetSelector = this.pageScrollOptions.scrollTarget;\n\n      if (targetSelector.match(/^#[^\\s]+$/g) !== null) {\n        // It's an id selector and a valid id, as it does not contain any white space characters\n        return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));\n      }\n\n      return this.pageScrollOptions.document.querySelector(targetSelector);\n    }\n\n    return this.pageScrollOptions.scrollTarget;\n  }\n\n}\n\nconst NGXPS_CONFIG = new InjectionToken('ngxps_config');\nconst defaultPageScrollConfig = {\n  _interval: 10,\n  _minScrollDistance: 2,\n  _logLevel: 1,\n  namespace: 'default',\n  verticalScrolling: true,\n  duration: 1250,\n  scrollOffset: 0,\n  advancedInlineOffsetCalculation: false,\n  interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],\n  interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],\n  interruptible: true,\n  scrollInView: true,\n  easingLogic: (t, b, c, d) => {\n    // Linear easing\n    return c * t / d + b;\n  }\n};\nlet PageScrollService = /*#__PURE__*/(() => {\n  class PageScrollService {\n    constructor(customConfig) {\n      this.runningInstances = [];\n      this.onInterrupted = {\n        report: (event, pageScrollInstance) => {\n          if (!pageScrollInstance.pageScrollOptions.interruptible) {\n            // Non-interruptible anyway, so do not stop anything\n            return;\n          }\n\n          let shouldStop = true;\n\n          if (event.type === 'keyup') {\n            // Only stop if specific keys have been pressed, for all others don't stop anything\n            if (this.config.interruptKeys.indexOf(event.key) === -1) {\n              // The pressed key is not in the list of interrupting keys\n              shouldStop = false;\n            }\n          } else if (event.type === 'mousedown') {\n            // For mousedown events we only stop the scroll animation of the mouse has\n            // been clicked inside the scrolling container\n            if (!pageScrollInstance.pageScrollOptions.scrollViews.some(scrollingView => scrollingView.contains(event.target))) {\n              // Mouse clicked an element which is not inside any of the the scrolling containers\n              shouldStop = false;\n            }\n          }\n\n          if (shouldStop) {\n            this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n          }\n        }\n      };\n      this.config = Object.assign(Object.assign({}, defaultPageScrollConfig), customConfig);\n    }\n\n    stopInternal(interrupted, pageScrollInstance) {\n      const index = this.runningInstances.indexOf(pageScrollInstance);\n\n      if (index >= 0) {\n        this.runningInstances.splice(index, 1);\n      }\n\n      if (pageScrollInstance.interruptListenersAttached) {\n        pageScrollInstance.detachInterruptListeners();\n      }\n\n      if (pageScrollInstance.timer) {\n        // Clear/Stop the timer\n        clearInterval(pageScrollInstance.timer); // Clear the reference to this timer\n\n        pageScrollInstance.timer = undefined;\n        pageScrollInstance.fireEvent(!interrupted);\n        return true;\n      }\n\n      return false;\n    }\n\n    create(options) {\n      return new PageScrollInstance(Object.assign(Object.assign({}, this.config), options));\n    }\n    /**\n     * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n     *\n     * This is the core functionality of the whole library.\n     */\n    // tslint:disable-next-line:cyclomatic-complexity\n\n\n    start(pageScrollInstance) {\n      // Merge the default options in the pageScrollInstance options\n      pageScrollInstance.pageScrollOptions = Object.assign(Object.assign({}, this.config), pageScrollInstance.pageScrollOptions); // Stop all possibly running scroll animations in the same namespace\n\n      this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n\n      if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {\n        // No scrollViews specified, thus we can't animate anything\n        if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n          console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');\n        }\n\n        return;\n      }\n\n      let startScrollPositionFound = false;\n      let scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]); // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next\n\n      pageScrollInstance.startScrollPosition = 0; // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)\n\n      pageScrollInstance.pageScrollOptions.scrollViews.forEach(scrollingView => {\n        if (scrollingView === undefined || scrollingView === null) {\n          return;\n        } // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n        // or \"scrollLeft\" property that is not undefined and unequal to 0\n\n\n        const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n\n        if (!startScrollPositionFound && scrollPosition) {\n          // We found a scrollingView that does not have scrollTop or scrollLeft 0\n          // Return the scroll position value, as this will be our startScrollPosition\n          pageScrollInstance.startScrollPosition = scrollPosition;\n          startScrollPositionFound = true; // Remember te scrollRange of this scrollingView\n\n          scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);\n        }\n      });\n      const pageScrollOffset = pageScrollInstance.getCurrentOffset(); // Calculate the target position that the scroll animation should go to\n\n      const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n      pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset); // Calculate the distance we need to go in total\n\n      pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n\n      if (isNaN(pageScrollInstance.distanceToScroll)) {\n        // We weren't able to find the target position, maybe the element does not exist?\n        if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n          console.log('Scrolling not possible, as we can\\'t find the specified target');\n        }\n\n        pageScrollInstance.fireEvent(false);\n        return;\n      } // We're at the final destination already\n      // OR we need to scroll down but are already at the end\n      // OR we need to scroll up but are at the top already\n\n\n      const allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance; // Check how long we need to scroll if a speed option is given\n      // Default executionDuration is the specified duration\n\n\n      pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration; // Maybe we need to pay attention to the speed option?\n\n      if (pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null && (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {\n        // Speed option is set and no duration => calculate duration based on speed and scroll distance\n        pageScrollInstance.executionDuration = Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;\n      } // We should go there directly, as our \"animation\" would have one big step\n      // only anyway and this way we save the interval stuff\n\n\n      const tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;\n\n      if (allReadyAtDestination || tooShortInterval) {\n        if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n          if (allReadyAtDestination) {\n            console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n          } else {\n            console.log('Scroll duration shorter that interval length, jumping to target');\n          }\n        }\n\n        pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n        pageScrollInstance.fireEvent(true);\n        return;\n      }\n\n      if (!pageScrollInstance.pageScrollOptions.scrollInView) {\n        const alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition && pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;\n\n        if (alreadyInView) {\n          if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n            console.log('Not scrolling, as target already in view');\n          }\n\n          pageScrollInstance.fireEvent(true);\n          return;\n        }\n      } // Register the interrupt listeners if we want an interruptible scroll animation\n\n\n      if (pageScrollInstance.pageScrollOptions.interruptible) {\n        pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n      } // Let's get started, get the start time...\n\n\n      pageScrollInstance.startTime = new Date().getTime(); // .. and calculate the end time (when we need to finish at last)\n\n      pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n      pageScrollInstance.timer = setInterval(instance => {\n        // Take the current time\n        const currentTime = new Date().getTime(); // Determine the new scroll position\n\n        let newScrollPosition;\n        let stopNow = false;\n\n        if (instance.endTime <= currentTime) {\n          // We're over the time already, so go the targetScrollPosition (aka destination)\n          newScrollPosition = instance.targetScrollPosition;\n          stopNow = true;\n        } else {\n          // Calculate the scroll position based on the current time using the easing function\n          newScrollPosition = Math.round(instance.pageScrollOptions.easingLogic(currentTime - instance.startTime, instance.startScrollPosition, instance.distanceToScroll, instance.executionDuration));\n        }\n\n        if (this.config._logLevel >= 5 && isDevMode()) {\n          console.warn('Scroll Position: ' + newScrollPosition);\n        } // Set the new scrollPosition to all scrollViews elements\n\n\n        if (!instance.setScrollPosition(newScrollPosition)) {\n          // Setting the new scrollTop/scrollLeft value failed for all ScrollViews\n          // early stop the scroll animation to save resources\n          stopNow = true;\n        } // At the end do the internal stop maintenance and fire the pageScrollFinish event\n        // (otherwise the event might arrive at \"too early\")\n\n\n        if (stopNow) {\n          this.stopInternal(false, instance);\n        }\n      }, this.config._interval, pageScrollInstance); // Register the instance as running one\n\n      this.runningInstances.push(pageScrollInstance);\n    }\n\n    scroll(options) {\n      this.start(this.create(options));\n    }\n    /**\n     * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n     */\n\n\n    stopAll(namespace) {\n      if (this.runningInstances.length > 0) {\n        let stoppedSome = false;\n\n        for (let i = 0; i < this.runningInstances.length; ++i) {\n          const pageScrollInstance = this.runningInstances[i];\n\n          if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {\n            stoppedSome = true;\n            this.stopInternal(true, pageScrollInstance); // Decrease the counter, as we removed an item from the array we iterate over\n\n            i--;\n          }\n        }\n\n        return stoppedSome;\n      }\n\n      return false;\n    }\n\n    stop(pageScrollInstance) {\n      return this.stopInternal(true, pageScrollInstance);\n    }\n\n  }\n\n  PageScrollService.ɵfac = function PageScrollService_Factory(t) {\n    return new (t || PageScrollService)(i0.ɵɵinject(NGXPS_CONFIG));\n  };\n\n  PageScrollService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PageScrollService,\n    factory: PageScrollService.ɵfac,\n    providedIn: 'root'\n  });\n  return PageScrollService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxPageScrollCoreModule = /*#__PURE__*/(() => {\n  class NgxPageScrollCoreModule {\n    static forRoot(config) {\n      return {\n        ngModule: NgxPageScrollCoreModule,\n        providers: [PageScrollService, {\n          provide: NGXPS_CONFIG,\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  NgxPageScrollCoreModule.ɵfac = function NgxPageScrollCoreModule_Factory(t) {\n    return new (t || NgxPageScrollCoreModule)();\n  };\n\n  NgxPageScrollCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxPageScrollCoreModule\n  });\n  NgxPageScrollCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [PageScrollService, {\n      provide: NGXPS_CONFIG,\n      useValue: {}\n    }]\n  });\n  return NgxPageScrollCoreModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-page-scroll-core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NGXPS_CONFIG, NgxPageScrollCoreModule, PageScrollInstance, PageScrollService, defaultPageScrollConfig }; //# sourceMappingURL=ngx-page-scroll-core.mjs.map","map":null,"metadata":{},"sourceType":"module"}