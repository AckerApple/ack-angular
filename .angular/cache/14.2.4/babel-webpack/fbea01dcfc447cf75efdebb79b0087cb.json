{"ast":null,"code":"import { AckOffline } from './AckOffline';\nimport * as i0 from \"@angular/core\";\nexport let AckQue = /*#__PURE__*/(() => {\n  class AckQue extends AckOffline {\n    constructor() {\n      super(...arguments);\n      this.prefix = \"offline-que\";\n      this.handlers = [];\n    }\n\n    get(name) {\n      return super.get(name).then(data => data && data['que'] ? data['que'] : []);\n    }\n\n    getQue(name) {\n      return this.get(name);\n    }\n\n    setQue(name, que) {\n      return this.set(name, que);\n    }\n\n    que(name, queData) {\n      return super.get(name).then(data => {\n        data = data || {};\n        data['que'] = data['que'] || [];\n\n        if (queData.forEach) {\n          queData.forEach(x => {\n            data['que'].push(x);\n          });\n        } else {\n          data['que'].push(queData);\n        }\n\n        return super.set(name, data);\n      });\n    }\n\n    set(name, queData) {\n      return this.que(name, queData);\n    }\n\n    dequeByIndex(name, index) {\n      return this.getQue(name).then(array => {\n        array.splice(index, 1);\n        return array;\n      }).then(array => this.setQue(name, array));\n    }\n\n    processQuedByIndex(name, index) {\n      const handler = this.getQueHandlerByName(name);\n      const mem = {\n        item: null,\n        array: null,\n        result: null\n      };\n      return this.getQue(name).then(array => {\n        mem.item = array.splice(index, 1);\n        mem.array = array;\n      }).then(() => this.handleQued(mem.item, handler)).then(result => mem.result = result).then(() => this.setQue(name, mem.array)).then(() => mem.result);\n    }\n\n    registerHandler(name, handler) {\n      this.handlers.push({\n        name,\n        handler\n      });\n      return this;\n    }\n\n    registerQueHandler(name, handler) {\n      return this.registerHandler(name, handler);\n    }\n\n    paramHandler(name, handler) {\n      for (let x = this.handlers.length - 1; x >= 0; --x) {\n        const handler = this.handlers[x];\n\n        if (handler.name == name) {\n          return this;\n        }\n      }\n\n      this.handlers.push({\n        name,\n        handler\n      });\n      return this;\n    }\n\n    getQueHandDefByName(name) {\n      for (let i = this.handlers.length - 1; i >= 0; --i) {\n        if (this.handlers[i].name == name) return this.handlers[i];\n      }\n    }\n\n    getQueHandlerByName(name) {\n      const hand = this.getQueHandDefByName(name);\n      if (hand) return hand.handler;\n    }\n\n    handleQued(qued, handler) {\n      return Promise.resolve(handler(qued));\n    }\n\n    processQuedHandler(hand) {\n      const results = [];\n      const mem = {\n        que: []\n      };\n      const eachHandle = this.eachHandler(hand.handler);\n      return this.get(hand.name).then(que => mem.que = que).then(() => this.clear(hand.name)).then(() => {\n        var promise = Promise.resolve();\n        mem.que.forEach(v => {\n          promise = promise.then(() => eachHandle(v)).catch(e => e).then(r => results.push(r));\n        });\n        return promise;\n      }).then(() => results);\n    }\n\n    eachHandler(handler) {\n      return data => this.handleQued(data, handler);\n    }\n\n    processQue(name) {\n      const handler = this.getQueHandDefByName(name);\n      return handler ? this.processQuedHandler(handler) : Promise.resolve();\n    }\n\n    processAllQues() {\n      const promises = [];\n      this.handlers.forEach(hand => promises.push(this.processQuedHandler(hand)));\n      return Promise.all(promises).then(proms => {\n        const results = [];\n        proms.forEach(subArray => results.push.apply(results, subArray));\n        return Promise.all(results);\n      });\n    }\n\n  }\n\n  AckQue.ɵfac = function () {\n    let ɵAckQue_BaseFactory;\n    return function AckQue_Factory(t) {\n      return (ɵAckQue_BaseFactory || (ɵAckQue_BaseFactory = i0.ɵɵgetInheritedFactory(AckQue)))(t || AckQue);\n    };\n  }();\n\n  AckQue.ɵprov = i0.ɵɵdefineInjectable({\n    token: AckQue,\n    factory: AckQue.ɵfac\n  });\n  return AckQue;\n})();","map":null,"metadata":{},"sourceType":"module"}