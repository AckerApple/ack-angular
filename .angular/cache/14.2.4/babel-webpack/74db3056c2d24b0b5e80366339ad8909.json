{"ast":null,"code":"export function invokeRotator(invoke) {\n  return getInvokerBy(invoke);\n}\nexport function objectInvoker(object, plan) {\n  var rtn = object;\n  var subargs;\n  var item;\n  let newkey;\n  let key;\n  let typo;\n\n  for (let x = 0; x < plan.length; ++x) {\n    key = plan[x];\n    subargs = [];\n\n    if (rtn == null) {\n      typo = typeof rtn;\n      const msg = \"TypeError: Cannot read property '\" + key + \"' of \" + typo + \". Invoke instructions: \" + JSON.stringify(plan);\n      throw new Error(msg);\n    }\n\n    let asFunc = key.constructor == Array;\n\n    if (asFunc) {\n      key = [];\n      key.push.apply(key, plan[x]);\n      newkey = key.shift();\n      subargs = key;\n      key = newkey;\n    }\n\n    item = rtn[key];\n    let isFunc = item && item.constructor == Function;\n\n    if (asFunc && !isFunc) {\n      if (item == null || item.constructor !== Function) {\n        typo = typeof item;\n        const msg = \"TypeError: '\" + key + \"' of \" + typo + \" is not a function. Invoke instructions: \" + JSON.stringify(plan);\n        throw new Error(msg);\n      }\n    }\n\n    if (isFunc) {\n      rtn = item.apply(rtn, subargs);\n    } else {\n      rtn = item;\n    }\n  }\n\n  return rtn;\n}\nexport function getInvokerBy(invoke) {\n  const isF = typeof invoke == 'function';\n\n  if (isF) {\n    return function (...args) {\n      var x = invoke(args[0]);\n      args.shift();\n      return objectInvoker(x, args);\n    };\n  }\n\n  return function (...plan) {\n    const a = plan[0];\n    plan[0] = plan[1];\n    plan[1] = a;\n    return objectInvoker(invoke, [plan]);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}