{"ast":null,"code":"import { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\nimport { Type } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport let RouteWatchReporter = /*#__PURE__*/(() => {\n  class RouteWatchReporter {\n    constructor(router, activatedRoute) {\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.current = {};\n      this.$history = [];\n      this.historyPos = 0;\n      this.isBackMode = false;\n      this.isOsAction = false;\n      this.isNextBackMode = false;\n      this.isNextBackHistory = false;\n      this.activatedRoute = activatedRoute;\n      router.events.subscribe(event => {\n        if (event.constructor == NavigationEnd) {\n          const current = this.getCurrent();\n          this.recordStateChange(current.config, current.params);\n        }\n      });\n      this.current = this.getCurrent();\n    }\n\n    $window() {\n      return window;\n    }\n\n    getCurrent() {\n      return getCurrentByActive(this.activatedRoute);\n    }\n\n    getCurrentConfig() {\n      let target = this.activatedRoute;\n\n      while (target.firstChild) target = target.firstChild;\n\n      return target.routeConfig || target[\"config\"] || target;\n    }\n\n    getCurrentParams() {\n      let target = this.activatedRoute;\n\n      while (target.firstChild) target = target.firstChild;\n\n      return target.snapshot.params;\n    }\n\n    isTrapHistory(toState, toParams) {\n      return this.isBackHistory(toState, toParams) && this.isForwardHistory(toState, toParams);\n    }\n\n    isBackHistory(toState, toParams) {\n      const $history = this.$history;\n      const isEven = $history.length > this.historyPos + 1;\n      const isNameMatch = isEven && toState && toState.name == $history[this.historyPos + 1].name;\n      return isNameMatch && this.isParamsMatch(toParams, $history[this.historyPos + 1].params);\n    }\n\n    isForwardHistory(toState, toParams) {\n      const $history = this.$history;\n      const isEven = !this.isNextBackMode && this.historyPos && $history.length > this.historyPos;\n      const isNameMatch = isEven && toState && toState.name == $history[this.historyPos - 1].name;\n      return isNameMatch && this.isParamsMatch(toParams, $history[this.historyPos - 1].params);\n    }\n\n    isParamsMatch(toParams, otherParams) {\n      if (!toParams || !otherParams) {\n        return false;\n      }\n\n      for (let x in toParams) {\n        if (toParams[x] != otherParams[x]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    recordStateChange(toState, toParams) {\n      this.current = {\n        params: toParams,\n        config: toState\n      };\n      let isForward = this.isForwardHistory(toState, toParams);\n      let isBackHistory = this.isNextBackHistory || this.isBackHistory(toState, toParams);\n\n      if (this.isOsAction && this.isTrapHistory(toState, toParams)) {\n        if (this.isBackMode) {\n          isForward = false;\n        } else {\n          isBackHistory = false;\n        }\n      } else {\n        this.isBackMode = this.isNextBackMode || this.isOsAction && isBackHistory;\n      }\n\n      const $history = this.$history;\n      if (!toState) return;\n\n      if (isForward) {\n        --this.historyPos;\n      } else if (this.isBackMode) {\n        ++this.historyPos;\n      } else {\n        this.historyPos = 0;\n        const hist = {\n          name: toState.name,\n          title: toState.title,\n          data: toState.data,\n          params: toParams\n        };\n\n        if (!Object.keys(toParams).length) {\n          delete hist.params;\n        }\n\n        console.log('history added', hist);\n        $history.unshift(hist);\n      }\n\n      this.isNextBackHistory = false;\n    }\n\n    goBackTo(name, params) {\n      this.isNextBackMode = true;\n      this.isNextBackHistory = true;\n      this.$state().go(name, params);\n    }\n\n    tryBack(name, params) {\n      if (this.$history.length) {\n        this.isNextBackMode = true;\n        this.isNextBackHistory = true;\n        this.$window().history.back();\n      } else {\n        this.goBackTo(name, params);\n      }\n    }\n\n    watchDocument($document) {\n      this.watchDocByCallbacks($document, this.getDocumentCallbacks());\n    }\n\n    getDocumentCallbacks() {\n      const isBackButton = () => {\n        this.isOsAction = true;\n      };\n\n      const isNotBackButton = () => {\n        this.isOsAction = false;\n      };\n\n      return {\n        isBackButton: isBackButton,\n        isNotBackButton: isNotBackButton\n      };\n    }\n\n    watchDocByCallbacks($document, callbacks) {\n      $document.addEventListener('mouseout', callbacks.isBackButton);\n      $document.addEventListener('mousedown', callbacks.isNotBackButton);\n    }\n\n    unwatchDocByCallbacks($document, callbacks) {\n      $document.removeEventListener('mouseout', callbacks.isBackButton);\n      $document.removeEventListener('mouseover', callbacks.isNotBackButton);\n      $document.removeEventListener('mousedown', callbacks.isNotBackButton);\n    }\n\n  }\n\n  RouteWatchReporter.ɵfac = function RouteWatchReporter_Factory(t) {\n    return new (t || RouteWatchReporter)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute));\n  };\n\n  RouteWatchReporter.ɵprov = i0.ɵɵdefineInjectable({\n    token: RouteWatchReporter,\n    factory: RouteWatchReporter.ɵfac\n  });\n  return RouteWatchReporter;\n})();\nexport function getCurrentByActive(ActivatedRoute) {\n  let parent = ActivatedRoute;\n  let target = ActivatedRoute;\n\n  while (target.firstChild) {\n    parent = target;\n    target = target.firstChild;\n  }\n\n  return Object.assign(Object.assign({}, breakdownActivated(target)), {\n    parent: breakdownActivated(parent)\n  });\n}\n\nfunction breakdownActivated(target) {\n  const snapshot = target.snapshot || {};\n  return {\n    ActivatedRoute: target,\n    config: target.routeConfig || target[\"config\"] || target,\n    params: snapshot.params\n  };\n}","map":null,"metadata":{},"sourceType":"module"}