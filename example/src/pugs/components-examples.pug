h2.margin-top-0 Components

.margin-xxs
  p.margin-bottom-0 Import Example
  .text-warning.text-xs
    |The following import code, is NOT needed if you used the AckModule import #[a.text-calm(href="#/overview" "(click)"="scrollToModuleImport()") seen here]
  pre.code-sample(ngNonBindable).
    import &#123; declarations as ackDecs &#125; from "ack-angular/components"
    import &#123; NgModule &#125; from '@angular/core';

    @NgModule(&#123;
      declarations:ackDecs
    &#125;)

br

h4.margin-bottom-0 Table of Contents
ul
  li
    a(href="#Tags" pageScroll).
      Tags
  li
    a(href="#ExpressionBinds" pageScroll).
      Expression Binds
  li
    a(href="#OneWayBinds" pageScroll).
      One Way Binds
  li
    a(href="#TwoWayBinds" pageScroll).
      Two Way Binds
  li
    a(href="#LayoutComponents" pageScroll).
      Layout Components
  li
    a(href="#ComplexComponents" pageScroll).
      Complex Components

br

h3.margin-bottom-0(id="Tags") Tags
.flex-wrap.child-margin-xxs

  //-ack-fixed-element-stage
  .flex-1([class.width-full]="views.ackFixedElmStage")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ack-fixed-element-stage
        .text-grey-2x.max-width-400
          |Required to use such components as &lt;ack-model&gt;, &lt;ack-options-modal&gt;, and the Confirm provider
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.ackFixedElmStage=!views.ackFixedElmStage"
        "[ngClass]"="views.ackFixedElmStage?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackFixedElmStage"
      "[@fadeInUp]"=1
    )
      .pad
        |Use ONLY ONE time. This is a display control component for other components. It has no natural display until position fixed elements, such as modals, need to be rendered to screen.
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;!DOCTYPE html&gt;
          &lt;html lang="en"&gt;
            &lt;head&gt;&lt;/head&gt;
            &lt;body&gt;
              &lt;ack-fixed-element-stage&gt;&lt;/ack-fixed-element-stage&gt;
            &lt;/body&gt;
          &lt;/html&gt;

  //-ack-close-icon
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ack-close-icon
        .text-grey-2x.max-width-400
          |A super convenient html based close icon. No img refs. No style sheet refs
          ack-close-icon
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.ackCloseIcon=!views.ackCloseIcon"
        "[ngClass]"="views.ackCloseIcon?'border-energized bg-energized':'border-info bg-info'"
      )
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackCloseIcon"
      "[@fadeInUp]"=1
    )
      .pad
        ack-close-icon("(click)"="views.ackCloseIcon=false")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-close-icon (click)="views.ackCloseIcon=false"&gt;&lt;/ack-close-icon&gt;

  //-ack-array
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      div("(screenScroll)"="screenScrollCount=screenScrollCount+1")
      .pad-h
        h3 ack-array
        .text-grey-2x
          |Common array functionality available at a template level
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.ackArray=!views.ackArray"
        "[ngClass]"="views.ackArray?'border-energized bg-energized':'border-info bg-info'"
      )
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf         = "views.ackArray"
      "[@fadeInUp]" = 1
    )
      ack-array(
        "[(ref)]"    = "Array"
        "[(array)]"  = "selectedArray"
        idKey        = "letter"
        "[(pageAt)]" = "pageAt"
        "[(pages)]"  = "arrayPages"
        "[(keyMap)]" = "arrayMap"
      )
        ack-aggregate(type="sum" "[keys]"="['number']" "[(output)]"="sumNumber")

      h4.pad-sm.margin-0 Bind Documentation
      ul
        li [(array)] - main array to stem functionality from
        li [idKey] - pointer to each array node id field
        li ([ref]) - pointer to AckArray class
        li [pageAt] - what number to break array into page buckets
        li ([pages]) - buckets of arrays based on pageAt

      h4.pad-sm.margin-0 API Documentation
      ul
        li toggle(item) - adds or removes item based on existence
        li push(item) - param and append item to array
        li unshift(item) - param and prepend item to array
        li splice(item) - remove item by index from array
        li param() - ensure array exists
        li only(item) - reduce array down to only item argument

      .pad-sm
        h4.margin-0 Usage Example: Toggle Items
        .text-grey-2x Take an arbitrary array (arrayOfObjects in demo) and allow a system of toggling selections
      
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-array [(ref)]="Array" [(array)]="selectedArray" idKey="letter"&gt;&lt;/ack-array&gt;
          &lt;ng-container *ngIf="Array&gt;
            &lt;div *ngFor="let item of arrayOfObjects"&gt;
              &lt;input type="checkbox" [checked]="Array.selected(item)" (click)="Array.toggle(item)" /&gt;
              &nbsp;&nbsp;{{ item | json }}
            &lt;/div&gt;
          &lt;/ng-container&gt;

      h5.pad-sm.margin-0 Example Array Adjusters
      .pad-left.text-grey-2x
        |Use the checkboxes below to alter the original array
      .flex-wrap.child-margin-xs
        div(*ngFor="let item of arrayOfObjects;let i=index")
          input(
            type        = "checkbox"
            "[checked]" = "Array?.selected(item)"
            "(click)"   = "Array.toggle(item)"
            name        = "ackArray"
            id          = "ackArray{{i}}"
          )
          |&nbsp;{{ item | json }}

      .pad
        a("(click)"="Array.toggleSort('letter')") toggle sort

      //-just show the array we are working with
      h5.pad-sm.margin-0 Example Selected Array
      absolute-overflow-x
        pre.code-sample.margin-0.
          {{ selectedArray | json }}

      .pad-sm
        h4.margin-0 Usage Example: Map Items
        .text-grey-2x Take an arbitrary array and create an object map
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-array
            [(array)]  = "selectedArray"
            idKey      = "letter"
            [(keyMap)] = "objectOfArrays"&gt;
          &lt;/ack-array&gt;
          &lt;pre&gt;
            {{ objectOfArrays | json}}
          &lt;/pre&gt;
    
      //-prove array to map works
      h5.pad-sm.margin-0 Example Selected Map
      absolute-overflow-x
        pre.code-sample.margin-0.
          {{ arrayMap | json }}

      .pad-sm
        h4.margin-0 Usage Example: Pages of Array
        .text-grey-2x Break array into buckets of results
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-array [(array)]="largeArray" [(pages)]="pages" pageAt="20"&gt;&lt;/ack-array&gt;
          Total Pages : {{ pages?.length }}
          &lt;div *ngFor="let page of pages;let page=index"&gt;
            Page {{ page }} = {{ item | json }}
          &lt;/div&gt;

      .text-center.bg-grey-4x.pad-xxs.margin-xxs
        strong pageAt:
        select("[(ngModel)]"="pageAt")
          option(*ngFor="let page of [0,1,2,4,6,8]" "[value]"="page") {{page}}

      //- proces paging works
      .flex-wrap.child-margin-xxs
        absolute-overflow-x.flex-1(
          *ngFor="let page of arrayPages;let x=index"
        )
          h5.margin-0 Example pages[{{ x+1 }}]
          pre.code-sample.margin-0.
            {{ page | json }}

      .pad-sm
        h4.margin-0 Usage Example: Aggregates
        .text-grey-2x Sum an array
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-array [(array)]="[&#123;parentOb:&#123;childOb:&#123;value:33&#125;&#125;&#125;]"&gt;
            &lt;ack-aggregate type="sum" [(output)]="sumAmount" keys="['parentOb','childOb','value']"&gt;&lt;/ack-aggregate&gt;
          &lt;/ack-array&gt;
          
          Your sum of &#123;&#123; sumAmount &#125;&#125; should be equal to 33
      .pad-xxs.
        Your sum is {{ sumNumber }}

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ack-options
        .text-grey-2x.max-width-400
          |Array of choosable options tied to a model
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"   = "views.ackOptions=!views.ackOptions"
        "[ngClass]" = "views.ackOptions?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf    = "views.ackOptions"
      "[@fadeInUp]" = 1
    )
      .pad-sm
        h4.margin-0 Demo
        p.text-grey-3x.text-sm
          |Each item in list the below is selectable
        div(*ngIf="ackOptionString" "[@fadeInUp]"=1)
          strong Selected Option:
          |&nbsp;{{ ackOptionString }}
        ack-options(
          "[array]"   = "['x','y','z']"
          "[(model)]" = "ackOptionString"
          toggleable  = 1
        )
        hr
        strong Multiple Example
        div(*ngIf="ackOptionArray?.length" "[@fadeInUp]"=1)
          div
            strong Selected Options:
          absolute-overflow-x
            pre.code-sample {{ ackOptionArray | json }}
        ack-options(
          "[array]"   = "[{name:'x'},{name:'y'},{name:'z'}]"
          "[(model)]" = "ackOptionArray"
          multiple    = 1
        )
          ng-template(#option="" let-item="item")
            div &bull; name:{{ item.name }}
          ng-template(#selected="" let-item="item")
            .bold &bull; name:{{ item.name }}

      h4.pad-sm.margin-0 Properties
      ul
        li [array]
        li [stylize]:boolean = true
        li [multiple]:boolean
        li [modelAsArray]:boolean
        li [max]:number
        li [toggleable]:boolean

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div *ngIf="ackOptionString"&gt;
            &lt;strong&gt; Selected Option: &lt;/strong&gt;
            &#123;&#123; ackOptionString &#125;&#125;
          &lt;/div&gt;
          &lt;ack-options [array]="['x','y','z']" [(model)]="ackOptionString" toggleable&gt;&lt;/ack-options&gt;
          
          &lt;hr /&gt;
          
          &lt;div *ngIf="ackOptionArray?.length"&gt;
            &lt;strong&gt; Selected Options: &lt;/strong&gt;
            &lt;pre&gt; &#123;&#123; ackOptionArray | json &#125;&#125; &lt;/pre&gt;
          &lt;/div&gt;
          &lt;ack-options [array]="[&#123;name:'x'&#125;,&#123;name:'y'&#125;,&#123;name:'z'&#125;]" [(model)]="ackOptionArray" multiple&gt;
            &lt;ng-template #option let-item="item"&gt;
              &lt;div&gt; &amp;bull; name:&#123;&#123; item.name &#125;&#125; &lt;/div&gt;
            &lt;/ng-template&gt;
            &lt;ng-template #selected let-item="item"&gt;
              &lt;div style="font-weight:bold"&gt; &amp;bull; name:&#123;&#123; item.name &#125;&#125; &lt;/div&gt;
            &lt;/ng-template&gt;
          &lt;/ack-options&gt;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ack-modal
        .text-grey-2x.max-width-400
          |Open simple dialog modal
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"   = "views.ackModal=!views.ackModal"
        "[ngClass]" = "views.ackModal?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackModal"
      "[@fadeInUp]"=1
    )
      .bg-info.pad.text-info
        |This component requires the element &lt;ack-fixed-element-stage&gt; to be present somewhere in your app

      ack-modal(
        *ngIf                 = "showAckModal"
        "(close)"             = "showAckModal=false"
        "[(backgroundColor)]" = "modalBackgroundColor"
        "[(wrapStyle)]"       = "modalWrapStyle"
      )
        .bg-white.border.border-grey-4x.pad-4x.radius-5
          |Sample Modal Dialog Window
          .text-xs.text-grey-2x.pad-h
            |*ngIf driven modal with animation provided by ack-angular-fx [@fadeInUp]="1"
      ack-modal(
        "[(showModel)]"       = "showAckModalModel"
        "[(backgroundColor)]" = "modalBackgroundColor"
        "[(wrapStyle)]"       = "modalWrapStyle"
      )
        .bg-white.border.border-grey-4x.pad-4x.radius-5
          |Sample Modal Dialog Window
          .text-xs.text-grey-2x.pad-h
            |model driven modal with animation provided by ack-angular-fx [@fadeInUp]="1"

      .pad.text-center.flex-wrap.child-margin-xxs
        button.text-lg((click)="showAckModal=1") *ngIf show modal
        button.text-lg((click)="showAckModalModel=1") modal by [(showModel)]
        .flex-1.flex-valign-center
          .height-30.pad-h-sm.bg-grey-5x.border.border-grey-4x.border-right-0
            |bg
          input.height-30.flex-1("[(ngModel)]"="modalBackgroundColor")
        .flex-1.flex-valign-center
          .height-30.pad-h-sm.bg-grey-5x.border.border-grey-4x.border-right-0
            |width
          input.height-30.flex-1("(change)"="setModalWrapStyle($event.target.value)" placeholder="default width is content")

      .pad-sm
        h4 Properties
        ul
          li (close)
          li [wrapStyle]
          li [wrapCellStyle]
          li [allowClose]:boolean = true
          li [backgroundColor]
          li [(showModel)]:boolean

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-modal *ngIf="showAckModal" (close)="showAckModal=false" backgroundColor="rgba(255,255,255,0.95)"&gt;
            &lt;div style="background-color:white;padding:1em;"&gt;
              Sample Modal Dialog Window
            &lt;/div&gt;
          &lt;/ack-model&gt;
          &lt;button (click)="showAckModal=1"&gt; show modal &lt;/button&gt;

      h4.pad-sm.margin-0 Model Usage Example
      .text-grey-3x.text-smx Control modal display by a variable model
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;ack-modal [(showModel)]="showAckModal" backgroundColor="rgba(255,255,255,0.95)"&gt;
            &lt;div style="background-color:white;padding:1em;"&gt;
              Sample Modal Dialog Window
            &lt;/div&gt;
          &lt;/ack-model&gt;
          &lt;button (click)="showAckModal=1"&gt; show modal &lt;/button&gt;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ack-options-modal
        .text-grey-2x.max-width-400
          |Array of choosable options, in a modal, tied to a model
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"   = "views.ackOptionsModal=!views.ackOptionsModal"
        "[ngClass]" = "views.ackOptionsModal?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf    = "views.ackOptionsModal"
      "[@fadeInUp]" = 1
    )
      .bg-info.pad.text-info
        |This component requires the element &lt;ack-fixed-element-stage&gt; to be present somewhere in your app
      .pad
        |The ack-options-modal component extends ack-options and implements ack-modal. All options in ack-modal are available in ack-options-modal.
      .pad-sm
        h4.margin-0 Demo
        p.text-grey-3x.text-sm
          |Each item in list the below is selectable
        div(*ngIf="ackOptionStringModal" "[@fadeInUp]"=1)
          strong Selected Option:
          |&nbsp;{{ ackOptionStringModal }}
        
        //-SELECT ONE
        ack-options-modal(
          "[(showModel)]"= "showAckOptionsStringModal"
          "[allowClose]" = 0
          "[array]"      = "['option 0','option 1','option 2']"
          "[(model)]"    = "ackOptionStringModal"
          "(modelChange)"= "showAckOptionsStringModal=0"
          toggleable     = 1
        )
          .pad-right-3x Select Something Below
        button("(click)"="showAckOptionsStringModal=!showAckOptionsStringModal") select option
        
        hr

        //-SELECT MULTIPLE
        strong Multiple Example
        div(*ngIf="ackOptionArrayModal?.length" "[@fadeInUp]"=1)
          div
            strong Selected Options:
          absolute-overflow-x
            pre.code-sample {{ ackOptionArrayModal | json }}
        ack-options-modal(
          "[(showModel)]" = "showAckOptionsObjectModal"
          "[array]"       = "[{name:'red',key:'r'},{name:'blue',key:'b'},{name:'green',key:'g'}]"
          "[(model)]"     = "ackOptionArrayModal"
          multiple        = "1"
          arrayKey        = "key"
          arrayToModelKey = ""
          modelKey        = "key"
        )
          .pad-right-3x.text-grey
            |Select Multiple Things Below

          ng-template(#selected="" let-item="item")
            .bold &bull; name:{{ item.name }}
          ng-template(#option="" let-item="item")
            div &bull; name:{{ item.name }}

        button("(click)"="showAckOptionsObjectModal=!showAckOptionsObjectModal") select options

      h4.pad-sm.margin-0 Properties
      ul
        li [array]
        li [stylize]:boolean = true
        li [multiple]:boolean
        li [modelAsArray]:boolean
        li [max]:number
        li [toggleable]:boolean
        li (close)
        li [wrapStyle]
        li [wrapCellStyle]
        li [allowClose]:boolean = true
        li [backgroundColor]
        li [(showModel)]:boolean

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div *ngIf="ackOptionStringModal"&gt;
            &lt;strong&gt; Selected Option: &lt;/strong&gt;
            &#123;&#123; ackOptionStringModal &#125;&#125;
          &lt;/div&gt;

          &lt;ack-options-modal
            [(showModel)]= "showAckOptionsStringModal"
            [allowClose] = "0"
            [array]      = "['x','y','z']"
            [(model)]    = "ackOptionStringModal"
            (modelChange)= "showAckOptionsStringModal=0"
            toggleable
          &gt;
            &lt;div style="padding-right:30px;"&gt;Select Something Below&lt;/div&gt;
          &lt;/ack-options-modal&gt;
          &lt;button (click)="showAckOptionsStringModal=!showAckOptionsStringModal")&gt;
            select option
          &lt;/button&gt;
          
          &lt;hr /&gt;
          
          &lt;div *ngIf="ackOptionArrayModal?.length"&gt;
            &lt;strong&gt; Selected Options: &lt;/strong&gt;
            &lt;pre&gt; &#123;&#123; ackOptionArrayModal | json &#125;&#125; &lt;/pre&gt;
          &lt;/div&gt;
          
          &lt;ack-options-modal
            [(showModel)]   = "showAckOptionsObjectModal"
            [array]         = "[&#123;name:'red'&#125;,&#123;name:'blue'&#125;,&#123;name:'green'&#125;]"
            [(model)]       = "ackOptionArrayModal"
            arrayKey        = "name"
            arrayToModelKey = "key"
            multiple
          &gt;
            &lt;div style="padding-right:30px;"&gt;
              Select Multiple Things Below
            &lt;/div&gt;
            &lt;ng-template let-item="item"&gt;
              &lt;div&gt; &amp;bull; name:&#123;&#123; item.name &#125;&#125; &lt;/div&gt;
            &lt;/ng-template&gt;
            &lt;ng-template #selected let-item="item"&gt;
              &lt;div style="font-weight:bold"&gt; &amp;bull; name:&#123;&#123; item.name &#125;&#125; &lt;/div&gt;
            &lt;/ng-template&gt;
          &lt;/ack-options-modal&gt;
          &lt;button (click)="showAckOptionsObjectModal=!showAckOptionsObjectModal")&gt;
            select options
          &lt;/button&gt;

br

h3.margin-bottom-0(id="ExpressionBinds") Expression Binds
.flex-wrap.child-margin-xxs

  .flex-1([class.width-full]="views.init")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (init)
        .text-grey-2x.max-width-400
          |execute expression at render
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.init=!views.init" "[ngClass]"="views.init?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.init"
      "[@fadeInUp]"=1
    )
      div(*ngFor="let item of initArray;let i=index" "(init)"="item.name=item.name || 'no-name-'+(item.value+1)")
        |init val {{i}} {{ item.name }}

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          @Component(&#123;
            selector: 'example'
            ,template: `
              &lt;div
                *ngFor="let item of initArray;let i=index"
                (init)="item.name=item.name || 'no-name-'+(item.value+1)"
              &gt;
                init val &#123;&#123;i&#125;&#125; &#123;&#123; item.name &#125;&#125;
              &lt;/div&gt;
            `
          &#125;) export class Example &#123;
            initArray = [&#123;value:0&#125;,&#123;value:1&#125;,&#123;value:2&#125;]
          &#125;



  .flex-1([class.width-full]="views.screenScroll")
    .border.border-grey-4x.border.border-bottom-0
      div("(screenScroll)"="screenScrollCount=screenScrollCount+1")
      .pad-h
        h3 (screenScroll)
        .text-grey-2x
          |Run expression on screen scroll. Scroll Event Count :
          .inline-block.width-50 &nbsp;{{ screenScrollCount }}
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.screenScroll=!views.screenScroll" "[ngClass]"="views.screenScroll?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.screenScroll"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div (screenScroll)="screenScrollCount=screenScrollCount?1:++screenScrollCount" &gt;
          &nbsp;&nbsp;screenScroll count : {{ screenScrollCount }}
          &lt;/div&gt;

  .flex-1([class.width-full]="views.formChanged")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (formChanged)
        .text-grey-2x.max-width-400
          |Capture a form tag onchange event
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.formChanged=!views.formChanged" "[ngClass]"="views.formChanged?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.formChanged"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Example
      form.pad("(formChanged)"="formChanges=formChanges==null?1:formChanges+1")
        span Change Count : {{formChanges || 0}} :
        |&nbsp;
        input(type="radio" name="fcTest")
        |&nbsp;
        input(type="radio" name="fcTest")
        |&nbsp;
        input(type="radio" name="fcTest")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;form (formChanged)="formChanges=formChanges==null?1:formChanges+1" &gt;
            &lt;span&gt; Change Count : {{formChanges || 0}} &lt;/span&gt;
            &lt;input type="radio" name="fcTest" /&gt;
            &lt;input type="radio" name="fcTest" /&gt;
            &lt;input type="radio" name="fcTest" /&gt;
          &lt;/form&gt;

  .flex-1([class.width-full]="views.formAlter")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (formAlter)
        .text-grey-2x.max-width-400
          |Capture a form tag oninput event
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.formAlter=!views.formAlter" "[ngClass]"="views.formAlter?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.formAlter"
      "[@fadeInUp]"=1
    )
      .pad.text-info Fires for every form input alteration and NOT just after a change occurred
      h4.pad-sm.margin-0 Example
      form.pad("(formAlter)"="formAlters=formAlters==null?1:formAlters+1")
        span Alter Count : {{formAlters || 0}} :
        input(type="text")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;form (formAlter)="formAlters=formAlters==null?1:formAlters+1" &gt;
            &lt;span&gt; Alter Count : {{formAlters || 0}} &lt;/span&gt;
            &lt;input type="text" /&gt;
          &lt;/form&gt;

  .flex-1([class.width-full]="views.enterKey")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (enterKey)
        .text-grey-2x.max-width-400
          |Capture keyUp events when enter key used
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.enterKey=!views.enterKey" "[ngClass]"="views.enterKey?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.enterKey"
      "[@fadeInUp]"=1
    )
      .pad.text-info Fires for every onKeyUp event where enter key was pressed
      h4.pad-sm.margin-0 Example
      .flex.child-margin-xs.pad-xs
        span Enter Count : {{enterCountKey || 0}}
        input.flex-1(type="text" "(enterKey)"="enterCountKey=enterCountKey==null?1:enterCountKey+1" placeholder="type here and use enter key")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;span&gt; Enter Count : {{enterCountKey || 0}} &lt;/span&gt;
          &lt;input type="text" (enterKey)="enterCountKey=enterCountKey==null?1:enterCountKey+1" placeholder="type here and use enter key" /&gt;

  .flex-1([class.width-full]="views.escapeKey")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (escapeKey)
        .text-grey-2x.max-width-400
          |Capture keyUp events when escape key used
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.escapeKey=!views.escapeKey" "[ngClass]"="views.escapeKey?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.escapeKey"
      "[@fadeInUp]"=1
    )
      .pad.text-info Fires for every onKeyUp event where enter key was pressed
      h4.pad-sm.margin-0 Example
      .flex.child-margin-xs.pad-xs
        span Escape Count : {{escapeCountKey || 0}}
        input.flex-1(type="text" "(escapeKey)"="escapeCountKey=escapeCountKey==null?1:escapeCountKey+1" placeholder="type here and use escape key")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;span&gt; Escape Count : {{escapeCountKey || 0}} &lt;/span&gt;
          &lt;input type="text" (escapeKey)="escapeCountKey=escapeCountKey==null?1:escapeCountKey+1" placeholder="type here and use escape key" /&gt;

  .flex-1([class.width-full]="views.preventBackKey")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (preventBackKey)
        .text-grey-2x.max-width-400
          |Prevent the use of the backspace key
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.preventBackKey=!views.preventBackKey" "[ngClass]"="views.preventBackKey?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.preventBackKey"
      "[@fadeInUp]"=1
    )
      .pad.text-info Prevents and fires every onKeyUp event where backspace key was pressed
      h4.pad-sm.margin-0 Example
      .flex.child-margin-xs.pad-xs
        span Backspace Count : {{backspaceCount || 0}}
        input.flex-1(type="text" "(preventBackKey)"="backspaceCount=backspaceCount==null?1:backspaceCount+1" placeholder="type here and use enter key")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;span&gt; Backspace Count : {{backspaceCount || 0}} &lt;/span&gt;
          &lt;input type="text" (preventBackKey)="backspaceCount=backspaceCount==null?1:backspaceCount+1" placeholder="type here and then use backspace key" /&gt;

  .flex-1([class.width-full]="views.preventEnterKey")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 (preventEnterKey)
        .text-grey-2x.max-width-400
          |Prevent the use of the enter keys
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.preventEnterKey=!views.preventEnterKey" "[ngClass]"="views.preventEnterKey?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.preventEnterKey"
      "[@fadeInUp]"=1
    )
      .pad.text-info Prevents and fires every onKeyUp event where enter key was pressed
      h4.pad-sm.margin-0 Example
      .flex.child-margin-xs.pad-xs
        span Enter Count : {{preventEnterCount || 0}}
        input.flex-1(type="text" "(preventEnterKey)"="preventEnterCount=preventEnterCount==null?1:preventEnterCount+1" placeholder="type here and use enter key")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;span&gt; Enter Count : {{preventEnterCount || 0}} &lt;/span&gt;
          &lt;input type="text" (preventEnterKey)="preventEnterCount=preventEnterCount==null?1:preventEnterCount+1" placeholder="type here and use enter key" /&gt;

br

h3.margin-bottom-0(id="OneWayBinds") One Way Binds
.flex-wrap.child-margin-xxs
  
  .flex-1([class.width-full]="views.Var")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [var]
        .text-grey-2x.max-width-400
          |Create local template variables
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.Var=!views.Var" "[ngClass]"="views.Var?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.Var"
      "[@fadeInUp]"=1
    )
      .pad-sm
        h4.margin-0 Demo
        p.text-grey-3x.text-sm
          |Each item in list below, has a localized variable
        .flex-wrap.child-margin-xxs(#myVar="var" "[var]"="0")
          button("(click)"="myVar.var=myVar.var+1") outsize memory {{ myVar.var }}
          button(*ngFor="let i of [0,1,2,3]" "#myVar"="var" "[var]"="i" "(click)"="myVar.var=myVar.var+1")
            |click count + index {{ myVar.var }}

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div #myVar="var" [var]="0"&gt;
            &lt;button (click)="myVar.var=myVar.var+1"&gt;
              outsize memory &#123;&#123;&#123; myVar.var &#125;&#125;
            &lt;/button&gt;
            &lt;button *ngFor="let i of [0,1,2,3]" #myVar="var" [var]="i" (click)="myVar.var=myVar.var+1"&gt;
              click count + index &#123;&#123; myVar.var &#125;&#125;
            &lt;/button&gt;
          &lt;/div&gt;

  .flex-1([class.width-full]="views.focusOn")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [focusOn]
        .text-grey-2x.max-width-400
          |element focus on demand
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.focusOn=!views.focusOn" "[ngClass]"="views.focusOn?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.focusOn"
      "[@fadeInUp]"=1
    )
      .pad.text-center.flex-wrap.child-margin-xxs
        div
          button.text-lg((click)="focusOn=1") focus input
        .flex-1
          input.width-full.text-lg("[focusOn]"="focusOn" "(focusThen)"="focusOn=0" "[focusOnDelay]"="focusOnDelay" placeholder="focus target")
        div
          input.text-lg.width-100(type="number" "[(ngModel)]"="focusOnDelay" placeholder="delay")
          |ms

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;button (click)="focusOn=1"&gt; focus input &lt;/button&gt;
          &lt;input [focusOn]="focusOn" (focusThen)="focusOn=0" [focusOnDelay]="focusOnDelay" placeholder="focus target" /&gt;
          &lt;input type="number" [(ngModel)]="focusOnDelay" placeholder="delay" /&gt;

  .flex-1([class.width-full]="views.selectOn")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [selectOn]
        .text-grey-2x.max-width-400
          |element select on demand
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.selectOn=!views.selectOn" "[ngClass]"="views.selectOn?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.selectOn"
      "[@fadeInUp]"=1
    )
      .pad.text-center.flex-wrap.child-margin-xxs
        div
          button.text-lg((click)="selectOn=1") select input
        .flex-1
          input.width-full.text-lg("[selectOn]"="selectOn" "(selectThen)"="selectOn=0" "[selectOnDelay]"="selectOnDelay" placeholder="select target" value="test to select")
        div
          input.text-lg.width-100(type="number" "[(ngModel)]"="selectOnDelay" placeholder="delay")
          |ms

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;button (click)="selectOn=1"&gt; select input &lt;/button&gt;
          &lt;input [selectOn]="selectOn" (selectThen)="selectOn=0" [selectOnDelay]="selectOnDelay" placeholder="select target" value="test to select" /&gt;
          &lt;input type="number" [(ngModel)]="selectOnDelay" placeholder="delay" /&gt;

  //-fxOn
  .flex-1(
    "[class.width-full]"="views.fxOn"
  )
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [fxOn]
        .text-grey-2x.max-width-400
          |Control css classes for periods of time
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.fxOn=!views.fxOn"
        "[ngClass]"="views.fxOn ? 'border-energized bg-energized' : 'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf = "views.fxOn"
      "[@fadeInUp]" = 1
    )
      .pad
        .pad-xs.bg-warning.border-warning.text-warning.border
          |You will need to &lt;link&gt; one of two style sheets:
          ul
            li ack-angular/ack-angular.css
            li - or -
            li
              a(href="https://github.com/daneden/animate.css") animate.css
      h4.pad-h-sm.margin-0 Example
      .flex-wrap.child-pad-h-xs.pad-h
        div
          label.block &nbsp;
          label(
            #fxRef      = "FxOn"
            "[fxOn]"    = "fxOn"
            "(fxThen)"  = "fxOn=false"
            "[fxForMs]" = "fxForMs"
            "[fxClass]" = "'animated ' + fxClass"
          ) animate this text
        .width-100
          label &nbsp;
          button.width-full(
            "(click)"="fxOn=!fxOn"
          ) fx:{{ fxOn || false }}
        div
          label &nbsp;
          a.pad-h.border.border-positive.text-positive.block.text-center.hover-bg-positive.hover-text-white(
            "(mouseover)" = "fxOn=true"
            "(mouseout)"  = "fxOn=false"
          ) hover me
        div
          label fxType
          select.width-full(
            "[(ngModel)]" ="fxClass"
            "(change)" = "fxOn=true"
          )
            option(
              *ngFor = "let item of (fxRef?fxRef.fxTypes:[])"
              value = "{{item}}"
            ) {{item}}
        div
          label &nbsp;
          div
            input(
              type="checkbox"
              id="fxConstant"
              "[(ngModel)]"="fxConstant"
              "(change)"="fxOn=$event.target.checked"
            )
            |&nbsp;
            label(for="fxConstant") fxConstant
        div
          label fxForMs
          div
            input.width-100(
              "[(ngModel)]" = "fxForMs"
              "(change)" = "fxOn=true"
            )

      strong fxClass = "animated {{fxClass}}"

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;label [fxOn]="fxOn" (fxThen)="fxOn=false" #fxRef="FxOn" [(fxForMs)]="fxForMs" [(fxType)]="fxClass"&gt;
            animate this text :: {{ fxOn || false }}
          &lt;/label&gt;
          &lt;button (click)="fxOn=true"&gt; fx:{{fxOn||false}} &lt;/button&gt;
          &lt;a (mouseover)="fxOn=true" (mouseout)="fxOn=false"&gt;
            hover me
          &lt;/a&gt;
          &lt;select [(ngModel)]="fxClass" (change)="fxOn=true"&gt;
            &lt;option *ngFor="let item of (fxRef?fxRef.fxTypes:[])" value="{{item}}"&gt;{{item}}&lt;/option&gt;
          &lt;/select&gt;
          &lt;input type="checkbox" id="fxConstant" [(ngModel)]="fxConstant" (change)="fxOn=$event.target.checked" /&gt;
          &lt;input [(ngModel)]="fxForMs" (change)="fxOn=true" /&gt;

  //-shakeOn
  .flex-1(
    [class.width-full]="views.shakeOn"
  )
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [shakeOn]
        .text-grey-2x.max-width-400
          |Control an animated shaking effect on demand
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.shakeOn=!views.shakeOn"
        "[ngClass]"="views.shakeOn?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf = "views.shakeOn"
      "[@fadeInUp]" = 1
    )
      .pad
        .pad-xs.bg-warning.border-warning.text-warning.border
          |You will need to &lt;link&gt; one of two style sheets:
          ul
            li ack-angular/ack-angular.css
            li - or -
            li ack-angular/csshake.css
      h4.pad-h-sm.margin-0 Example
      .flex-wrap.child-pad-h-xs.pad-h
        div
          label.block &nbsp;
          label(
            #shakeRef         = "ShakeOn"
            "[shakeOn]"       = "shakeOn"
            "(shakeThen)"     = "shakeOn=false"
            "[shakeForMs]"    = "shakeForMs"
            "[shakeType]"     = "shakeOnType"
            "[shakeConstant]" = "shakeConstant"
          ) shake this text
        .width-100
          label &nbsp;
          button.width-full(
            "(click)"="shakeOn=!shakeOn"
          ) shake:{{shakeOn||false}}
        div
          label &nbsp;
          a.pad-h.border.border-positive.text-positive.block.text-center.hover-bg-positive.hover-text-white(
            "(mouseover)" = "shakeOn=true"
            "(mouseout)"  = "shakeOn=false"
          ) hover me
        div
          label shakeType
          select.width-full(
            "[(ngModel)]"="shakeOnType"
            "(change)"="shakeOn=true"
          )
            option(
              *ngFor = "let item of (shakeRef?shakeRef.shakeTypes:[])"
              value = "{{item}}"
            ) {{item}}
        div
          label &nbsp;
          div
            input(
              type="checkbox"
              id="shakeConstant"
              "[(ngModel)]"="shakeConstant"
              "(change)"="shakeOn=$event.target.checked"
            )
            |&nbsp;
            label(for="shakeConstant") shakeConstant
        div
          label shakeForMs
          div
            input.width-100(
              "[(ngModel)]" = "shakeForMs"
              "(change)" = "shakeOn=true"
            )

      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;label [shakeOn]="shakeOn" (shakeThen)="shakeOn=false" #shakeRef="ShakeOn" [(shakeForMs)]="shakeForMs" [(shakeType)]="shakeOnType"&gt;
            shake this text :: {{ shakeOn||false }}
          &lt;/label&gt;
          &lt;button (click)="shakeOn=true"&gt; shake:{{shakeOn||false}} &lt;/button&gt;
          &lt;a (mouseover)="shakeOn=true" (mouseout)="shakeOn=false"&gt;
            hover me
          &lt;/a&gt;
          &lt;select [(ngModel)]="shakeOnType" (change)="shakeOn=true"&gt;
            &lt;option *ngFor="let item of (shakeRef?shakeRef.shakeTypes:[])" value="{{item}}"&gt;{{item}}&lt;/option&gt;
          &lt;/select&gt;
          &lt;input type="checkbox" id="shakeConstant" [(ngModel)]="shakeConstant" (change)="shakeOn=$event.target.checked" /&gt;
          &lt;input [(ngModel)]="shakeForMs" (change)="shakeOn=true" /&gt;

br

h3.margin-bottom-0(id="TwoWayBinds") Two Way Binds

.flex-wrap.child-margin-xxs 
  .flex-1([class.width-full]="views.statusOnlineModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(statusOnlineModel)]"="statusOnlineModel")
      .pad-h
        h3 [(statusOnlineModel)]
        .text-grey-2x.max-width-400
          |Get browser internet status. #[strong IS ONLINE] :
          .inline-block.width-50 &nbsp;{{ statusOnlineModel }}
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.statusOnlineModel=!views.statusOnlineModel" "[ngClass]"="views.statusOnlineModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.statusOnlineModel"
      "[@fadeInUp]"=1
    )
      .pad
        .pad.bg-warning.border-warning.border.text-warning
          |Completely turn off your internet and the online status will change.
          br
          |A delay is expected during transition from offline to online
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div("[(statusOnlineModel)]"="statusOnlineModel")&gt;
            |statusOnlineModel : {{ statusOnlineModel ? 'online' : 'offline'}}
          &lt;/div&gt;

  .flex-1([class.width-full]="views.statusOfflineModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(statusOfflineModel)]"="statusOfflineModel")
      .pad-h
        h3 [(statusOfflineModel)]
        .text-grey-2x.max-width-400
          |Get browser internet status. #[strong IS OFFLINE] :
          .inline-block.width-50 &nbsp;{{ statusOfflineModel }}
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.statusOfflineModel=!views.statusOfflineModel" "[ngClass]"="views.statusOfflineModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.statusOfflineModel"
      "[@fadeInUp]"=1
    )
      .pad
        .pad.bg-warning.border-warning.border.text-warning
        |Completely turn off your internet and the offline status will change
        br
        |A delay is expected during transition from offline to online
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div("[(statusOfflineModel)]"="statusOfflineModel")&gt;
            |statusOfflineModel : {{ statusOfflineModel ? 'offline' : 'online'}}
          &lt;/div&gt;

  .flex-1([class.width-full]="views.screenScrollHeightDiff")
    .border.border-grey-4x.border.border-bottom-0
      div("[(screenScrollHeightDiff)]"="screenScrollHeightDiff")
      .pad-h
        h3 [(screenScrollHeightDiff)]
        .text-grey-2x
          |Model of how many pixels overflow past the screen height (screenHeight - scrollHeight).
          div
            |Currently :
            .inline-block.width-50 &nbsp;{{ screenScrollHeightDiff }}
          .pad.text-grey-3x.text-smx resize window height to see change
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.screenScrollHeightDiff=!views.screenScrollHeightDiff" "[ngClass]"="views.screenScrollHeightDiff?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.screenScrollHeightDiff"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(screenScrollHeightDiff)]="screenScrollHeightDiff" &gt;
          &nbsp;&nbsp;screenScrollHeightDiff : {{ screenScrollHeightDiff }}
          &lt;/div&gt;

  .flex-1([class.width-full]="views.screenScrollModelY")
    .border.border-grey-4x.border.border-bottom-0
      div("[(screenScrollModelY)]"="screenScrollModelY")
      .pad-h
        h3 [(screenScrollModelY)]
        .text-grey-2x.max-width-400
          |Get browser height scrolled. Currently :
          .inline-block.width-50 &nbsp;{{screenScrollModelY}}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning(
        "(click)"="views.screenScrollModelY=!views.screenScrollModelY"
        "[ngClass]"="views.screenScrollModelY?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.screenScrollModelY"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(screenScrollModelY)]="screenScrollModelY" &gt;
          &nbsp;&nbsp;screenScrollModelY : {{ screenScrollModelY }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.htmlWidthModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(htmlWidthModel)]"="htmlWidthModel")
      .pad-h
        h3 [(htmlWidthModel)]
        .text-grey-2x
          |Get the browser document inner width. Currently : {{htmlWidthModel}}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.htmlWidthModel=!views.htmlWidthModel" "[ngClass]"="views.htmlWidthModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.htmlWidthModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(htmlWidthModel)]="htmlWidthModel"&gt;
          &nbsp;&nbsp;htmlWidthModel : {{ htmlWidthModel }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.htmlHeightModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(htmlHeightModel)]"="htmlHeightModel")
      .pad-h
        h3 [(htmlHeightModel)]
        .text-grey-2x
          |Get the browser document inner height. Currently : {{ htmlHeightModel }}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.htmlHeightModel=!views.htmlHeightModel" "[ngClass]"="views.htmlHeightModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.htmlHeightModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(htmlHeightModel)]="htmlHeightModel"&gt;
          &nbsp;&nbsp;htmlHeightModel : {{ htmlHeightModel }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.screenWidthModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(screenWidthModel)]"="screenWidthModel")
      .pad-h
        h3 [(screenWidthModel)]
        .text-grey-2x.max-width-400
          |Get the browser window inner width. Currently : {{ screenWidthModel }}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="viewScreenWidthModel=!viewScreenWidthModel" "[ngClass]"="viewScreenWidthModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="viewScreenWidthModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(screenWidthModel)]="screenWidthModel"&gt;
          &nbsp;&nbsp;screenWidthModel : {{ screenWidthModel }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.screenHeightModel")
    .border.border-grey-4x.border.border-bottom-0
      div("[(screenHeightModel)]"="screenHeightModel")
      .pad-h
        h3 [(screenHeightModel)]
        .text-grey-2x.max-width-400
          |Get the browser window inner height. Currently : {{screenHeightModel}}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="viewScreenHeightModel=!viewScreenHeightModel" "[ngClass]"="viewScreenHeightModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="viewScreenHeightModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(screenHeightModel)]="screenHeightModel"&gt;
          &nbsp;&nbsp;screenHeightModel : {{ screenHeightModel }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.innerHtmlModel")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [(innerHtmlModel)]
        .text-grey-2x.max-width-400
          |Capture an elements innerHTML into a model
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.innerHtmlModel=!views.innerHtmlModel" "[ngClass]"="views.innerHtmlModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.innerHtmlModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Example
      div("[(innerHtmlModel)]"="innerHtmlModel")
        button("(click)"="contentArray.push('')") add content
        span(*ngFor="let item of contentArray")
          |&#10;
          button("(click)"="contentArray.push('')") add content
      absolute-overflow-x
        pre.code-sample.margin-0 {{ innerHtmlModel }}
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;span&gt; Enter Count : {{preventEnterCount || 0}} &lt;/span&gt;
          &lt;input type="text" (enterKey)="preventEnterCount=preventEnterCount==null?1:preventEnterCount+1" placeholder="type here and use enter key" /&gt;
  
  .flex-1([class.width-full]="views.absoluteOverflowX")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 absolute-overflow-x
        .text-grey-2x.max-width-400
          |Control pre and nowrap elements x-axis overflow
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.absoluteOverflowX=!views.absoluteOverflowX" "[ngClass]"="views.absoluteOverflowX?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.absoluteOverflowX"
      "[@fadeInUp]"=1
    )
      .pad
        .pad.bg-info.text-info.text-info
          |Often, pre elements and nowrap styles, make it hard to contronl x-axis overflow.
          p The following component, uses a relative and a absolute position elements along with height monitoring to manage x-axis overflow.
          p A no-sroll-bar option is defaulted to remove overflow scroll bars.
      
      h4.pad-sm.margin-0 Bindings
      li [scrollBars]
      li [wrapClass]
      li [active] = true
      li [overflow]:'auto'|'none'|'hidden'|'scroll' = 'auto'

      h4.pad-sm.margin-0 Example
      .pad
        absolute-overflow-x([active]="absoluteOverflowXActive")
          //-.pad-xs
            input(type="checkbox" "[(ngModel)]"="scrollBars" name="scrollBars")
            |&nbsp;scrollBars
          .nowrap &nbsp;&nbsp;This content all runs on one line flat out for as long as I can stand to stand typing at a Veridesk in Delray Beach, FL. Not that long it turns out...
          //-pre
            |&lt;pre&gt;
            |&nbsp;&nbsp;This PRE ELEMENT content all runs on one line flat out for as long as I can stand to stand typing at a Veridesk in Delray Beach, FL. Not that long it turns out...
            |&lt;/pre&gt;
        label(for="absoluteOverflowXActive")
          input(
            type="checkbox"
            "[(ngModel)]"="absoluteOverflowXActive"
            id="absoluteOverflowXActive"
          )
          |&nbsp;&nbsp;Overflow On/Off "active" Toggle
        h4.pad-sm.margin-0 Usage Example
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            &lt;absolute-overflow-x&gt;
            &nbsp;&nbsp;&lt;div style="white-space:nowrap;"&gt;
            &nbsp;&nbsp;&nbsp;&nbsp;This content all runs on one line flat out for as long as I can stand to stand typing at a Veridesk in Delray Beach, FL. Not that long it turns out...
            &nbsp;&nbsp;&lt;/div&gt;
            &lt;/absolute-overflow-x&gt;

  .flex-1([class.width-full]="views.elementSizeModel" "[(elementSizeModel)]"="elementSizeModel")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [(elementSizeModel)]
        .text-grey-2x.max-width-400
          |Get an elements size. Currently : {{ elementSizeModel?.width }}x{{elementSizeModel?.height }}
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.elementSizeModel=!views.elementSizeModel" "[ngClass]"="views.elementSizeModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.elementSizeModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(elementSizeModel)]="elementSizeModel"&gt;
          &nbsp;&nbsp;elementSizeModel : {{ elementSizeModel?.width }}x{{ elementSizeModel?.height }}
          &lt;/div&gt;

  .flex-1([class.width-full]="views.elementHeightModel" "[(elementHeightModel)]"="elementHeightModel")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [(elementHeightModel)]
        .text-grey-2x.max-width-400
          |Get an elements height. Currently : {{elementHeightModel}}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.elementHeightModel=!views.elementHeightModel" "[ngClass]"="views.elementHeightModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.elementHeightModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(elementHeightModel)]="elementHeightModel"&gt;
          &nbsp;&nbsp;elementHeightModel : {{ elementHeightModel }}px
          &lt;/div&gt;

  .flex-1([class.width-full]="views.elementWidthModel" "[(elementWidthModel)]"="elementWidthModel")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 [(elementWidthModel)]
        .text-grey-2x.max-width-400
          |Get an elements width. Currently : {{elementWidthModel}}px
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.elementWidthModel=!views.elementWidthModel" "[ngClass]"="views.elementWidthModel?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.elementWidthModel"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div [(elementWidthModel)]="elementWidthModel"&gt;
          &nbsp;&nbsp;elementWidthModel : {{ elementWidthModel }}px
          &lt;/div&gt;

br

h3.margin-bottom-0(id="LayoutComponents") Layout Components
.pad
  .pad.bg-warning.border-warning.text-warning.border
    |You will need to &lt;link&gt; one of two style sheets:
    ul
      li ack-angular/ack-angular.css
      li - or -
      li ack-angular/ack-css-boot.css

.flex-wrap.child-margin-xxs
  
  .flex-1([class.width-full]="views.errorWell")
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 error-well
        .text-grey-2x.max-width-400
          |a smart and simple place to display errors
        br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.errorWell=!views.errorWell" "[ngClass]"="views.errorWell?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.errorWell"
      "[@fadeInUp]"=1
    )
      h4.pad-sm.margin-0 Example
      .pad
        select(name="cssClasses" "[(ngModel)]"="cssClasses")
          option(value="bg-info border-info text-info") bg-info border-info text-info
          option(value="bg-warning border-warning text-warning") bg-warning border-warning text-warning
          option(value="bg-danger border-danger text-danger") bg-danger border-danger text-danger
          option(value="bg-energized border-energized text-energized") bg-energized border-energized text-energized
          option(value="bg-calm border-calm text-calm") bg-calm border-calm text-calm
          option(value="bg-assertive border-assertive text-assertive") bg-assertive border-assertive text-assertive
          option(value="bg-success border-success text-success") bg-success border-success text-success
          option(value="bg-positive border-positive text-positive") bg-positive border-positive text-positive
          option(value="bg-balanced border-balanced text-balanced") bg-balanced border-balanced text-balanced
          option(value="bg-stable border-stable text-stable") bg-stable border-stable text-stable
          option(value="bg-dark border-dark text-dark") bg-dark border-dark text-dark
          option(value="bg-royal border-royal text-royal") bg-royal border-royal text-royal
        error-well.margin("[error]"="error" "[cssClasses]"="cssClasses")
        button("(click)"="causeError()") cause error
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;error-well [error]="error"&gt;&lt;/error-well&gt;
      h4.pad-sm.margin-0 Advanced Example
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;error-well [error]="error" [closable]="1" [allowDetails]="1"&gt;&lt;/error-well&gt;

br
h3(id="ComplexComponents") Complex Components
.pad-h
  p.margin-bottom-0 Components that have additional dependencies or restrictions
.flex-wrap.child-margin-xxs
  
  .flex-1.border.border-grey-4x.border([class.width-full]="views.routeReporter")
    .pad-h
      h3 route-reporter
      .text-grey-2x.max-width-400
        |Get in tune with router states when using @angular/router
      br
    .text-center
      a.block.border.pad-xxs.hover-bg-warning("(click)"="views.routeReporter=!views.routeReporter" "[ngClass]"="views.routeReporter?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.routeReporter"
      "[@fadeInUp]"=1
    )
      .pad Bindings
        table(cellPadding="2" cellSpacing="0" border="0")
          tr
            td [(ref)]
            td Creates a reference to the RouteReporter component
          tr
            td [(state)]
            td Creates a reference to the current route
          tr
            td [(params)]
            td Creates a reference to the current route's params
          tr
            td [(query)]
            td Creates a reference to the current route's query params
          tr
            td (beforeChange)
            td Expression bind called before route changes
          tr
            td (onChange)
            td Expression bind called when route changes
      route-reporter("[(ref)]"="routeState" "[(query)]"="query")
      h4.pad-sm.margin-0 Usage Example
      absolute-overflow-x
        pre.code-sample.margin-0
          div(ngNonBindable).
            &lt;route-reporter
              [(ref)]       = "routeState"
              [(query)]     = "query"
            &gt;&lt;/route-reporter&gt;

          div
            span(ngNonBindable) {{ routeState?.current.config.name }}
            span &nbsp;==&nbsp;
            span {{ routeState?.current.config.name }}
          
          div
            span(ngNonBindable) {{ query | json }}
            span &nbsp;==&nbsp;
            span {{ query | json }}
