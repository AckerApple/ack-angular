p.text-sm.text-grey-2x Decorate and filter output via Pipes

p.margin-bottom-0 Import Example
.pad-h.text-warning.text-xs
  |The following import code, is NOT needed if you used the AckModule import #[a.text-calm(href="#/overview" "(click)"="scrollToModuleImport()") seen here]
pre.code-sample.
  import &#123; NgModule &#125; from '@angular/core'
  import &#123; AppComponent &#125; from './SomeRandomComponent'
  
  import * as ackPipes from 'ack-angular/pipes'

  @NgModule(&#123;
    declarations : [ AppComponent, ...ackPipes.declarations ]
  &#125;) export class AppModule &#123;&#125;
  
br

h3(id="Documentation") Documentation

.flex-wrap.child-margin-xxs.no-scroll-bars-ever
  .flex3.border-grey-6x.border.width-full
    .pad-h
      h3 textDownload &amp; safeUrl
      p.text-sm.text-grey-2x Cast string to a data:text/plain uri
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewSafeUrl=!viewSafeUrl" "[ngClass]"="viewSafeUrl?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewSafeUrl" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable).
            &lt;a [href]="'Usage Examples' | textDownload | safeUrl" download="download.txt"&gt;
              download
            &lt;/a&gt;
          span.pad-h == #[a([href]="'Usage Examples' | textDownload | safeUrl" download="download.txt") download]

  .flex2.border-grey-6x.border.width-full
    .pad-h
      h3 safeStyle
      p.text-sm.text-grey-2x Cast string to safe style
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewSafeStyle=!viewSafeStyle" "[ngClass]"="viewSafeStyle?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewSafeStyle" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable).
            &lt;span [ngStyle]="&#123;'...':('...'|safeStyle)&#125;"&gt;
              trusted style
            &lt;/span&gt;
          span.pad-h == #[span("[ngStyle]"="{'...':('...'|safeStyle)}") safe styled]

  .flex3.border-grey-6x.border.width-full
    .pad-h
      h3 safeHtml
      p.text-sm.text-grey-2x Cast string to safe html
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewSafeHtml=!viewSafeHtml" "[ngClass]"="viewSafeHtml?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewSafeHtml" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable).
            &lt;span class="safeHtml" [innerHtml]="'&lt;style&gt;.safeHtml&#123;border:1px solid purple&#125;.safeHtml::before&#123;content:\\"trusted html\\"&#125;&lt;/style&gt;'|safeHtml"&gt;
              untrusted html
            &lt;/span&gt;
          span.pad-h ==&nbsp;
          span(class="safeHtml" "[innerHtml]"="'<style>.safeHtml{border:1px solid purple}.safeHtml::before{content:\\\"trusted html\\\"}</style>'|safeHtml")
            |untrusted html

  .flex2.border-grey-6x.border
    .pad-h
      h3 markdownAnchor
      p.text-sm.text-grey-2x Cast string to a github markdown #anchor
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewMarkdownAnchor=!viewMarkdownAnchor" "[ngClass]"="viewMarkdownAnchor?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewMarkdownAnchor" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 'Usage Examples' | markdownAnchor }}
          span.pad-h == {{ 'Usage Examples' | markdownAnchor }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 typeof
      p.text-sm.text-grey-2x Result of native javascript typeof
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewTypeof=!viewTypeof" "[ngClass]"="viewTypeof?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewTypeof" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 0 | typeof }}
          span.pad-h == {{ 0 | typeof }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 between
      p.text-sm.text-grey-2x (input &gt;= a &amp;&amp; input &lt;= b) || (input &lt;= a &amp;&amp; input &gt;= b)
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewBetween=!viewBetween" "[ngClass]"="viewBetween?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewBetween" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 10 | between : 5 : 15 }}
          span.pad-h == {{ 10 | between : 5 : 15 }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 numberSuffix
      p.text-sm.text-grey-2x suffix for a given number {{ 1|numberSuffix:1 }} {{ 2|numberSuffix:1 }} {{ 3|numberSuffix:1 }}
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewNumberSuffix=!viewNumberSuffix" "[ngClass]"="viewNumberSuffix?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewNumberSuffix" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          div
            span(ngNonBindable) 1{{ 1 | numberSuffix }}
            span.pad-h == 1{{ 1 | numberSuffix }}
          div
            span(ngNonBindable) {{ 2 | numberSuffix : true }}
            span.pad-h == {{ 2 | numberSuffix : true }}
          div
            span(ngNonBindable) 0{{ '0' | numberSuffix }}
            span.pad-h == 0{{ '0' | numberSuffix }}
          div
            span(ngNonBindable) {{ null | numberSuffix }}
            span.pad-h == {{ null | numberSuffix }}
          div
            span(ngNonBindable) 13{{ '13' | numberSuffix }}
            span.pad-h == 13{{ '13' | numberSuffix }}
          div
            span(ngNonBindable) {{ '33' | numberSuffix : 1 }}
            span.pad-h == {{ '33' | numberSuffix : 1 }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 numberToPhone
      p.text-sm.text-grey-2x Converts numbers in input into basic phone format
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewNumberToPhone=!viewNumberToPhone" "[ngClass]"="viewNumberToPhone?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewNumberToPhone" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          div
            span(ngNonBindable) {{ 8779276969 | numberToPhone }}
            span.pad-h == {{ 8779276969 | numberToPhone }}
          div
            span(ngNonBindable) {{ 'L8O7V7E9D2O7C6T9O6R9S' | numberToPhone }}
            span.pad-h == {{ 'L8O7V7E9D2O7C6T9O6R9S' | numberToPhone }}
          div
            span(ngNonBindable) {{ 'L8O7V7E9D2O' | numberToPhone }}
            span.pad-h == {{ 'L8O7V7E9D2O7C6T9O6' | numberToPhone }}
          div
            span(ngNonBindable) {{ 'L8O7V7E9D2O7C6T9O6' | numberToPhone }}
            span.pad-h == {{ 'L8O7V7E9D2O' | numberToPhone }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 indexTrack
      p.text-sm.text-grey-2x Force ngFor into trackBy index
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewIndexOf=!viewIndexOf" "[ngClass]"="viewIndexOf?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewIndexOf" "[@500]"="'fadeInUp'")
      .pad-xs.text-info.text-sm
        |Simple arrays like ["a","b","c"] are hard to work with ngFor + ngModel

      strong With indexTrack
      div(*ngFor="let item of simpleArray; let i=index; trackBy:0|indexTrack")
        input.width-full("[(ngModel)]"="simpleArray[i]")

      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div *ngFor="let item of simpleArray; let i=index; trackBy:0|indexTrack"&gt;
            &lt;input [(ngModel)]="simpleArray[i]" /&gt;
          &lt;/div&gt;
      br
      strong.text-warning Without indexTrack
      .text-xs.text-grey-2x.pad-left-xs
        |Inputs blur as you type in them
      div(*ngFor="let item of simpleArray; let i=index; trackBy:index")
        input.width-full("[(ngModel)]"="simpleArray[i]")


  .flex2.border-grey-6x.border
    .pad-h
      h3 arrayOfObjects
      p.text-sm.text-grey-2x(ngNonBindable).
        Param and cast an array into an array of &#123;value, index&#125; objects
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewArrayOfObjects=!viewArrayOfObjects" "[ngClass]"="viewArrayOfObjects?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewArrayOfObjects" "[@500]"="'fadeInUp'")
      .pad-xs.text-warning.
        Having troubles with *ngFor [(ngModel)] for simple array of strings? Try indexTrack, it's within ack-angular, first because it works far better
      
      .pad-xs.text-info.text-sm
        |Simple arrays like ["a","b","c"] are hard to work with ngFor + ngModel. This pipe can help with that (not as well as indexTrack pipe)

      strong With arrayOfObjects
      div(*ngFor="let item of simpleArray|arrayOfObjects")
        input.width-full("[(ngModel)]"="simpleArray[ item.index ]")

      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          &lt;div *ngFor="let item of simpleArray|arrayOfObjects"&gt;
            &lt;input [(ngModel)]="simpleArray[ item.index ]" /&gt;
          &lt;/div&gt;
      br
      strong.text-warning Without arrayOfObjects
      .text-xs.text-grey-2x.pad-left-xs
        |Inputs blur as you type in them
      div(*ngFor="let item of simpleArray; let i=index; trackBy:index")
        input.width-full("[(ngModel)]"="simpleArray[i]")

  .flex2.border-grey-6x.border
    .pad-h
      h3 array : repeat : repeatValue
      p.text-sm.text-grey-2x Force any variable to array
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewArray=!viewArray" "[ngClass]"="viewArray?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewArray" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 'a' | array }}
          span.pad-h == {{ 'a' | array | stringify }}
          br
          span(ngNonBindable) {{ 'a' | array:3 }}
          span.pad-h == {{ 'a' | array:3 | stringify }}
          br
          span(ngNonBindable) {{ ['a'] | array:3:1 }}
          span.pad-h == {{ ['a'] | array:3:1 | stringify }}
          br
          span(ngNonBindable) {{ 'a' | array:3:1 }}
          span.pad-h == {{ 'a' | array:3:1 | stringify }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 console
      p.text-sm.text-grey-2x console log result of native console.log() function
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewConsole=!viewConsole" "[ngClass]"="viewConsole?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewConsole" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 'message1' | console : 'message2' }}

  .flex3.border-grey-6x.border
    .pad-h
      h3 capitalize
      p.text-sm.text-grey-2x Each sentence leading word is capitalized
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewCapitalize=!viewCapitalize" "[ngClass]"="viewCapitalize?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewCapitalize" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 'how do you do?' | capitalize }} == How do you do?

  .flex2.border-grey-6x.border
    .pad-h
      h3 capitalizeWords
      p.text-sm.text-grey-2x Every word is capitalized
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewCapitalizeWords=!viewCapitalizeWords" "[ngClass]"="viewCapitalizeWords?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewCapitalizeWords" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 'how do you do?' | capitalizeWords }} == How Do You Do?

  .flex2.border-grey-6x.border
    .pad-h
      h3 bit
      p.text-sm.text-grey-2x Truthy value converts to: 1. Otherwise: 0
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewBit=!viewBit" "[ngClass]"="viewBit?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewBit" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          div
            span(ngNonBindable) {{ 'true' | bit }}
            span &nbsp;==&nbsp;
            span {{ 'true' | bit }}
          div
            span(ngNonBindable) {{ '0' | bit }}
            span &nbsp;==&nbsp;
            span {{ '0' | bit }}
          div
            span(ngNonBindable) {{ 'false' | bit }}
            span &nbsp;==&nbsp;
            span {{ 'false' | bit }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 boolean
      p.text-sm.text-grey-2x Truthy value converts to: true. Otherwise: false
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewBoolean=!viewBoolean" "[ngClass]"="viewBoolean?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewBoolean" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          div
            span(ngNonBindable) {{ 1 | boolean }}
            span &nbsp;==&nbsp;
            span {{ 1 | boolean }}
          div
            span(ngNonBindable) {{ '0' | boolean }}
            span &nbsp;==&nbsp;
            span {{ '0' | boolean }}
          div
            span(ngNonBindable) {{ 'false' | boolean }}
            span &nbsp;==&nbsp;
            span {{ 'false' | boolean }}

  .flex2.border-grey-6x.border
    .pad-h
      h3 yesno
      p.text-sm.text-grey-2x Truthy value converts to: yes. Otherwise: no
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewYesno=!viewYesno" "[ngClass]"="viewYesno?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewYesno" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 'true' | yesno }} == yes

  .flex2.border-grey-6x.border
    .pad-h
      h3 YesNo
      p.text-sm.text-grey-2x Truthy value converts to: Yes. Otherwise: No
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewYesNo=!viewYesNo" "[ngClass]"="viewYesNo?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewYesNo" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 1 | YesNo }} == Yes

  .flex2.border-grey-6x.border
    .pad-h
      h3 numbers
      p.text-sm.text-grey-2x Removes anything not a number from a string
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewNumbers=!viewNumbers" "[ngClass]"="viewNumbers?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewNumbers" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0(ngNonBindable).
          {{ 'sam123acb456xyz' | numbers }} == 123456

  .flex2.border-grey-6x.border
    .pad-h
      h3 keys
      p.text-sm.text-grey-2x List of keys for an Object
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewKeys=!viewKeys" "[ngClass]"="viewKeys?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewKeys" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ {x:1,y:2,z:3} | keys }}
          span.pad-h-sm ==
          span {{ {x:1,y:2,z:3} | keys | ack:['stringify',0] }}
  
  .flex2.border-grey-6x.border
    .pad-h
      h3 aDate
      p.text-sm.text-grey-2x A different approach @ date decorating
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewADate=!viewADate" "[ngClass]"="viewADate?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewADate" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 0 | aDate:'now':'date' }}
          span.pad-h-sm ==
          span {{ 0 | aDate:'now':'date':'getTime' }}
  
  .flex2.border-grey-6x.border
    .pad-h
      h3 aTime
      p.text-sm.text-grey-2x A different approach @ time decorating
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewATime=!viewATime" "[ngClass]"="viewATime?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewATime" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 0 | aTime:'now':'date' }}
          span.pad-h-sm ==
          span {{ 0 | aDate:'now':'date':'getTime' }}
  
  .flex2.border-grey-6x.border
    .pad-h
      h3 aMath
      p.text-sm.text-grey-2x A connection to Javascript Math functions
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewAMath=!viewAMath" "[ngClass]"="viewAMath?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewAMath" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 2.2 | aMath:'ceil' }}
          span.pad-h-sm ==
          span {{ 2.2 | aMath:'ceil' }}
  
  .flex2.border-grey-6x.border
    .pad-h
      h3 ack
      p.text-sm.text-grey-2x A connection to objectifying functions
    a.text-center.block.border.pad-xxs.hover-bg-warning("(click)"="viewAck=!viewAck" "[ngClass]"="viewAck?'border-energized bg-energized':'border-info bg-info'")
      |view details
    div(*ngIf="viewAck" "[@500]"="'fadeInUp'")
      absolute-overflow-x
        pre.code-sample.margin-0
          span(ngNonBindable) {{ 2.2 | ack:'Math':'ceil' }}
          span.pad-h-sm ==
          span {{ 2.2 | ack:'Math':'ceil' }}


h3.margin-bottom-0 More Pipe Examples
.flex-wrap.child-margin-xs.child-pad-xs.text-center
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | aDate : 'now' : 'hmmtt' }}
    span.text-grey-2x &nbsp;== {{ 0 | aDate : 'now' : 'hmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | aDate : 'now' : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ 0 | aDate : 'now' : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ null | aDate : 'now' : 'hmmtt' }}
    span.text-grey-2x &nbsp;== {{ null | aDate : 'now' : 'hmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ null | aDate : 'now' : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ null | aDate : 'now' : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | aDate : 'now' : ['addSeconds',60] : 'dateSecondDiff' }}
    span.text-grey-2x &nbsp;== {{ 0 | aDate : 'now' : ['addSeconds',60] : 'dateSecondDiff' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '13:30' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '13:30' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '1:30 pm' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '1:30 pm' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '12:00 am' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '12:00 am' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '12:00 pm' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '12:00 pm' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '01/01/2014 2:00 am' | aDate : ['dateMinuteDiff','01/02/2014 2:00 am'] }}
    span.text-grey-2x &nbsp;== {{ '01/01/2014 2:00 am' | aDate : ['dateMinuteDiff','01/02/2014 2:00 am'] }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | ack : 'date' : 'now' : 'hmmtt' }}
    span.text-grey-2x &nbsp;== {{ 0 | ack : 'date' : 'now' : 'hmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | ack : 'date' : 'now' : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ 0 | ack : 'date' : 'now' : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ null | ack : 'date' : 'now' : 'hmmtt' }}
    span.text-grey-2x &nbsp;== {{ null | ack : 'date' : 'now' : 'hmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ null | ack : 'date' : 'now' : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ null | ack : 'date' : 'now' : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ 0 | ack : 'date' : 'now' : ['addSeconds',60] : 'dateSecondDiff' }}
    span.text-grey-2x &nbsp;== {{ 0 | ack : 'date' : 'now' : ['addSeconds',60] : 'dateSecondDiff' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '13:30' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '13:30' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '1:30 pm' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '1:30 pm' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '12:00 am' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '12:00 am' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '12:00 pm' | aTime : 'hhmmtt' }}
    span.text-grey-2x &nbsp;== {{ '12:00 pm' | aTime : 'hhmmtt' }}
  .flex-1.border.border-grey-3x
    span(ngNonBindable) {{ '01/01/2014 2:00 am' | ack : 'date' : ['dateMinuteDiff','01/02/2014 2:00 am'] }}
    span.text-grey-2x &nbsp;== {{ '01/01/2014 2:00 am' | ack : 'date' : ['dateMinuteDiff','01/02/2014 2:00 am'] }}
