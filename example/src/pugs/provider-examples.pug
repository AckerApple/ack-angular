h2.margin-top-0 Providers

ng-container("[(statusOnlineModel)]"="statusOnlineModel")

p.margin-bottom-0 Import Example
.text-warning.text-xs
  |The following import code, is NOT needed if you used the AckModule import #[a.text-calm(href="#/overview" "(click)"="scrollToModuleImport()") seen here]
pre.code-sample.
  import &#123; providers as ackProviders &#125; from "ack-angular/providers"
  import &#123; NgModule &#125; from '@angular/core';

  @NgModule(&#123;
    providers:[ ...ackProviders ]
  &#125;)

error-well([error]="error")

br

.flex-wrap.child-margin-xxs
  //-Prompts
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 Prompts
        .text-grey-2x Modal driven prompts to require user confirmation
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning(
        "(click)"="views.confirm=!views.confirm"
        "[ngClass]"="views.confirm?'border-energized bg-energized':'border-info bg-info'"
      ) view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.confirm"
      "[@fadeInUp]"=1
    )
      .bg-info.pad.text-info
        |This component requires the element &lt;ack-fixed-element-stage&gt; to be present somewhere in your app

      .pad.flex-wrap.child-margin-xxs.child-border.child-radius-3.child-pad-h
        a.bg-warning("(click)"="runAlert()") alert
        a.bg-info("(click)"="runConfirm()") confirm

      h4.pad-h-sm.margin-h-0.margin-bottom-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; Prompts &#125; from "./ack-angular"

            class MyClass&#123;
              constructor(public prompts:Prompts)&#123;&#125;
            
              runConfirm():EventEmitter&lt;boolean&gt;&#123;
                return this.prompts.confirm('This is a confirm example')
                .subscribe(result=&gt;console.log('result of confirm:' +result))
              &#125;

              runAlert():EventEmitter&lt;boolean&gt;&#123;
                return this.prompts.alert('This is an alert example')
                .subscribe(result=&gt;console.log('alert prompt closed'))
              &#125;
            &#125;



  //-AckApi
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 AckApi
        .text-grey-2x
          |Http util with offline config for request failures
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.ackApi=!views.ackApi" "[ngClass]"="views.ackApi?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackApi"
      "[@fadeInUp]"=1
    )
      .strong.pad-sm Http Tester
      .pad-xs
        .flex-center.flex-valign-center.child-pad-xxs
          div
            label method
            select.text-md.block.width-full("[(ngModel)]"="httpConfig.method" name="httpConfig.method")
              option(value="GET") GET
              option(value="POST") POST
              option(value="PUT") PUT
              option(value="PATCH") PATCH
              option(value="DELETE") DELETE
          .flex-1
            label url
            input.block.width-full.min-width-300.text-md(
              "[(ngModel)]"="httpConfig.url"
              name="httpConfig.url"
              "(enterKey)"="sendHttp()"
            )
          div
            label &nbsp;
            div
              button.border.bg-success.text-success.border-success.text-md(type="submit" "(click)"="sendHttp()")
                |request
        .margin-top-xs.pad-xxs.bg-white.border.border-grey-6x
          .flex-center.child-margin-xxs.child-pad-h-xs.text-center
            a.flex-1.border("(click)"="views.httpSub=views.httpSub=='body'?null:'body'" "[ngClass]"="views.httpSub=='body'?'bg-energized border-energized':'bg-info text-info border-info'")
              |request body
            a.pos-rel.flex-1.border("(click)"="views.httpSub=views.httpSub=='headers'?null:'headers';loadHttpHeaderConfigArray();" "[ngClass]"="views.httpSub=='headers'?'bg-energized border-energized':'bg-info text-info border-info'")
              .pos-abs.pad-xxs.right-0.text-white(style="line-height:20px")
                .font-fixed-width.radius-half.height-20.width-20.bg-grey-3x.pad-h-xxs
                  |{{ httpHeaderConfigArray.length }}
              .pad-h-lg
                |request headers
            a.pos-rel.flex-1.border("(click)"="views.httpSub=views.httpSub=='offlineModel'?null:'offlineModel';" "[ngClass]"="views.httpSub=='offlineModel'?'bg-energized border-energized':'bg-info text-info border-info'")
              .pos-abs.pad-xxs.left-0.text-white(style="line-height:20px")
                .inline-block.font-fixed-width.radius-half.height-20.width-20.bg-grey-3x.pad-h-xxs
                  |{{ httpQueArray.length || 0 }}
              .pos-abs.pad-xxs.right-0.text-white(style="line-height:20px")
                .inline-block.font-fixed-width.radius-half.height-20.width-20.bg-grey-3x.pad-h-xxs
                  |{{ (httpCache|keys).length || 0 }}
              |que and cache


          //-request body
          .pad-xs(*ngIf="views.httpSub=='body'" "[@fadeInUp]"=1)
            select.width-full("[(ngModel)]"="httpConfig.headers['Content-Type']" name="httpConfig.headers['Content-Type']")
              option(value="text/plain") text/plain
              option(value="application/json") application/json
            textarea.width-full.height-100("[(ngModel)]"="httpConfig.body" name="httpConfig.data" placeholder="transmit data here")

          //-request headers
          .pad-xs(*ngIf="views.httpSub=='headers'" "[@fadeInUp]"=1)
            .flex.child-margin-xxs.child-pad-xxs(
              *ngFor="let item of httpHeaderConfigArray; let i = index"
              "[@fadeInUp]"=1
            )
              input.flex-1("[(ngModel)]"="item.name" placeholder="name" "(change)"="readHttpHeaderConfigArray()")
              input.flex-1("[(ngModel)]"="item.value" placeholder="value" "(change)"="readHttpHeaderConfigArray()")
              button.border.border-warning.text-warning.bg-warning(
                type="button"
                "(click)"="httpHeaderConfigArray.splice(i,1);readHttpHeaderConfigArray()"
                "[ngClass]"="0==i?'width-50 margin-right-0 border-right-0':'width-100'"
              ) drop
              button.border-left-0.margin-left-0.width-50.border.border-calm.text-white.bg-calm(
                *ngIf="0==i"
                type="button"
                "(click)"="httpHeaderConfigArray.unshift({name:'', value:''})"
                "[@fadeInUp]"=1
              ) add

          //- QUE CACHE model
          .pad-xs(
            *ngIf="views.httpSub=='offlineModel'"
            "[@fadeInUp]"=1
          )
            //- QUE
            div(*ngIf="httpConfig.method=='GET'" "[@fadeInUp]"=1)
              .text-grey-2x Cache GET requests.
              .pad.flex-wrap.child-margin-xxs
                .flex-1
                  label maxAge #[span.text-xs.text-grey-3x milsecs]
                  input.width-full(type="number" "[(ngModel)]"="httpConfig.offlineModel.maxAge")
                  input-hint
                    |New fetch will occur after cache has aged
                .flex-1
                  label expires
                  input.width-full(type="datetime-local" "[(ngModel)]"="httpConfig.offlineModel.expires")
                  input-hint
                    |New fetch will occur after above date

              .pad-top.text-warning.text-center.text-xs
                |change request method for QUE details

              .pad-xs(*ngIf="(httpCache|keys).length" "[@fadeInUp]"=1)
                h4.margin-0 HTTP Cache Array
                p.text-grey-2x.text-xs
                  |Requests awaiting internet connection to return
                .pad-xxs(
                  *ngFor="let key of (httpCache|keys); let i=index"
                  "[@fadeInUp]"=1
                )
                  error-well([error]="httpCache[key]" cssClasses="bg-info" message="{{key}}")
                p.text-grey-2x.text-xs
                  |#[strong Seconds], after restoring internet connection, the above requests will process
                .pad.text-center
                  button("(click)"="clearHttpCache()") clear cache

            //- CACHE
            div(
              *ngIf="httpConfig.method!='GET'"
              "[@fadeInUp]"=1
            )
              .text-grey-2x Que failed POST/PUT/PATCH/DELETE requests. 
              .pad
                label maxTry
                input.block(type="number" "[(ngModel)]"="httpConfig.offlineModel.maxTry")
                .pos-rel.text-xs
                  .pos-abs.top-0.text-grey-3x.width-full
                    |Control number of failed #[strong attempts] to reprocess

              .pad-top.text-warning.text-center.text-xs
                |change request method to GET for CACHE details

              .pad-xs(*ngIf="httpQueArray.length" "[@fadeInUp]"=1)
                h4.margin-0 HTTP Que Array
                p.text-grey-2x
                  |Requests awaiting internet connection to return. #[strong Seconds], after restoring internet connection, the following requests will process
                .pad-xxs(
                  *ngFor="let item of httpQueArray; let i=index"
                  "[@fadeInUp]"=1
                )
                  error-well([error]="item" cssClasses="border border-info bg-info" message="{{item.method}}:{{ item.url }}")
                .pad.text-center
                  button("(click)"="clearHttpQue()") clear que

      error-well([error]="httpResponse" cssClasses="border border-success text-success bg-success")
      error-well([error]="httpError")

      .margin.pad.bg-royal.text-sm
        .text-white TRY THIS
        ul
          li Disconnect from the internet. You are currently: #[strong {{ statusOnlineModel ? 'online':'offline' }}]
          li Make POST, PUT, or PATCH request(s). Currently: #[strong {{ httpConfig.method }}]
          li Your requests will be qued into offline memory
          li Connect to the internet. Your request should automatically resend and the que is cleared

      h4.pad-h-sm.margin-h-0.margin-bottom-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; AckApi &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              offlineModel = &#123;
                name:'ackHttpTests',
                maxAge:15000,//GET cache busted at 15 seconds
                maxTry:50//POST failure retries allowed
              &#125;

              constructor(public AckApi:AckApi)&#123;&#125;

              monitorOnlineStatus()&#123;
                window.addEventListener('online',()=&gt;&#123;
                  if(navigator.onLine)&#123;
                    this.AckApi.processQue('ackHttpTests')
                  &#125;
                &#125;)
              &#125;

              clearPostQue()&#123;
                return this.AckApi.clearQue('ackHttpTests')
              &#125;

              clearGetCache()&#123;
                return this.AckApi.clearCache('ackHttpTests')
              &#125;

              request()&#123;
                return this.AckApi.request(&#123;
                  url:'...'.
                  method:'...'
                  offlineModel:this.offlineModel
                &#125;)
                .then( response=&gt;console.log('200',response) )
                .catch(e=&gt;&#123;

                  //ignore error, has been qued for when internet returns
                  if(e.sendFailMeta)return

                  return Promise.reject(e)
                &#125;)
              &#125;

              POST()&#123;
                return this.AckApi.post('url', &#123;data&#125;, &#123;offlineModel:this.offlineModel&#125;)
                .then( response=&gt;console.log('200',response) )
                .catch(e=&gt;&#123;
                  //ignore error, has been qued for when internet returns
                  if(e.sendFailMeta)return

                  return Promise.reject(e)
                &#125;)
              &#125;

              GET()&#123;
                return this.AckApi.get('url', &#123;offlineModel:this.offlineModel&#125;)
                .then( response=&gt;console.log('200',response) )
                .catch( e=&gt;console.error(e) )
              &#125;
            &#125;
  //-ErrorLog
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 ErrorLog
        .text-grey-2x
          |Smart error logging for single page apps
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.errorLog=!views.errorLog" "[ngClass]"="views.errorLog?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.errorLog"
      "[@fadeInUp]"=1
    )
      .strong.pad-sm Error Tester
      form.flex-center.flex-valign-center.child-margin-xs
        span.margin-right-0 maxLog:
        input.margin-left-0.width-50.text-md(type="number" "[(ngModel)]"="ErrorLog.maxLog" name="ErrorLog.maxLog")
        button.text-md("(click)"="causeErrorLog()") cause error
      .margin-bottom-xxs(
        *ngFor="let item of ErrorLog.log"
        "[@fadeInUp]"=1
      )
        error-well([error]="item")

      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; ErrorLog &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              constructor(public ErrorLog:ErrorLog)&#123;
                this.ErrorLog.maxLog = 30
                this.ErrorLog.add('some error')
                this.errorCount  = this.ErrorLog.log.length

                //catch and log all uncaught window onerror events
                this.ErrorLog.monitorWindow()
              &#125;
            &#125;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 Log
        .text-grey-2x
          |Smart logging for single page apps
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.log=!views.log" "[ngClass]"="views.log?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.log"
      "[@fadeInUp]"=1
    )
      .strong.pad-sm Log Tester
      form.flex-center.flex-valign-center.child-margin-xs
        span.margin-right-0 maxLog:
        input.margin-left-0.width-50.text-md(type="number" "[(ngModel)]"="Log.maxLog" name="Log.maxLog")
        button.text-md("(click)"="causeLog()") cause log
      .margin-bottom-xxs(
        *ngFor="let item of Log.log"
        "[@fadeInUp]"=1
      )
        error-well([error]="item" cssClasses="border-info border text-info bg-info")

      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; Log &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              constructor(public Log:Log)&#123;
                this.Log.maxLog = 30
                this.Log.add('some error')
                this.logCount  = this.Log.log.length
              &#125;
            &#125;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 UrlVars
        .text-grey-2x
          |Parse and get url query variables regardless of case sensativity
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.urlVars=!views.urlVars" "[ngClass]"="views.urlVars?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.urlVars"
      "[@fadeInUp]"=1
    )
      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; UrlVars &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              token:any

              constructor(public UrlVars:UrlVars)&#123;
                console.log('all parsed variables', this.UrlVars.vars)
                
                this.token = this.UrlVars.get('token')//case insensative variable fetch
              &#125;
            &#125;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 WindowService
        .text-grey-2x
          |Proper dependency injection of window variable
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.windowService=!views.windowService" "[ngClass]"="views.windowService?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.windowService"
      "[@fadeInUp]"=1
    )
      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; WindowService &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              token:any

              constructor(public WindowService:WindowService)&#123;
                console.log('window', this.WindowService.nativeWindow)
              &#125;
            &#125;
 
  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 AckOffline
        .text-grey-2x
          |Offline storage provided by #[a.text-calm(href="https://www.npmjs.com/package/localforage") localforage]
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.ackOffline=!views.ackOffline" "[ngClass]"="views.ackOffline?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackOffline"
      "[@fadeInUp]"=1
    )
      .strong.pad-sm Memory Test
      form.pad-xs.flex.child-margin-xxs("(ngSubmit)"="setOffline(newOfflineStorage)")
        input.flex-1("[(ngModel)]"="newOfflineStorage" name="newOfflineStorage" placeholder="put something into browser memory")
        button("(click)"="setOffline(newOfflineStorage)") set
        button(type="button" "(click)"="clearOffline()") clear
      .text-xs.pad-xs.border-success.text-success.bg-success(
        *ngIf="offlineStorage"
        "[@fadeInUp]"=1
      )
        h5.margin-0 Current Offline Storage
        .pad {{ offlineStorage|json }}
      .text-xs.pad-xs.border-info.text-info.bg-info.margin-bottom
        ul
          li Above you can edit offline browser storage.
          li Come back later and your memory will still be there

      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; AckOffline &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              constructor(public AckOffline:AckOffline)&#123;
                this.AckOffline.get('my-app-data')
                .then(data=&gt;this.appData=data)
              &#125;

              set(data)&#123;
                return this.AckOffline.set('my-app-data', data)
                .catch(e=&gt;console.error(e))
              &#125;

              get()&#123;
                return this.AckOffline.get('my-app-data')
                .catch(e=&gt;console.error(e))
              &#125;

              clear()&#123;
                return this.AckOffline.clear('my-app-data')
                .catch(e=&gt;console.error(e))
              &#125;
            &#125;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 AckCache
        .text-grey-2x
          |Offline storage used with expires and maxAge cache control options
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.ackCache=!views.ackCache" "[ngClass]"="views.ackCache?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackCache"
      "[@fadeInUp]"=1
    )
      .strong.pad-sm Cache Test
      form.pad-xs.flex.child-margin-xxs("(ngSubmit)"="setCache(cacheStorage, cacheSeconds)")
        input.flex-1("[(ngModel)]"="cacheStorage" name="cacheStorage" placeholder="put something expirable into browser memory")
        input.width-50(type="number" "[(ngModel)]"="cacheSeconds" name="cacheSeconds" placeholder="expires in seconds" value="30")
        span.text-xs.text-grey-2x.margin-left-0.flex-stacked.flex-valign-bottom
          .flex-1.line-height-0 &nbsp;
          span.line-height-3-4 secs&nbsp;
        button("(click)"="setCache(cacheStorage, cacheSeconds)") set
        button(type="button" "(click)"="clearCache()") clear
      .text-xs.pad-xs.border-success.text-success.bg-success(
        *ngIf="cache"
        "[@fadeInUp]"=1
      )
        h5.margin-0 Current Cache
        .pad {{ cache|json }}
      .text-xs.pad-xs.border-info.text-info.bg-info.margin-bottom
        ul
          li Above you can edit offline browser storage.
          li Come back later
          li Your memory will still be there (until it expires)

      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; AckCache &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              constructor(public AckCache:AckCache)&#123;
              &#125;

              set(data)&#123;
                return this.AckCache.set('my-app-data', data)
                .catch(e=&gt;console.error(e))
              &#125;

              get()&#123;
                return this.AckCache.get('my-app-data')
                .catch(e=&gt;console.error(e))
              &#125;

              clear()&#123;
                return this.AckCache.clear('my-app-data')
                .catch(e=&gt;console.error(e))
              &#125;
            &#125;

  .flex-1
    .border.border-grey-4x.border.border-bottom-0
      .pad-h
        h3 AckQue
        .text-grey-2x
          |Offline storage used to provide association between data and data-processors
        br
    .text-center
      a.block.border.pad-xs.hover-bg-warning("(click)"="views.ackQue=!views.ackQue" "[ngClass]"="views.ackQue?'border-energized bg-energized':'border-info bg-info'")
        |view details
    .border.border-top-0.border-grey-4x.bg-stable(
      *ngIf="views.ackQue"
      "[@fadeInUp]"=1
    )
      .pad-sm.strong Que Test
      form.flex.child-margin-xxs(
        *ngFor="let item of queArray; let i=index"
        "[@fadeInUp]"=1
      )
        .text-xs.pad-h-xs {{i}}
        input.flex-1("[(ngModel)]"="queArray[i]" name="que{{index}}" readonly)
        button("(click)"="processQuedByIndex(i)") process
        button("(click)"="dequeByIndex(i)") remove
      form.flex.child-margin-xxs("(ngSumbit)"="que(queStorage)")
        .text-xs.pad-h-xs add
        input.flex-1("[(ngModel)]"="queStorage" name="queStorage" placeholder="put process data into que")
        button("(click)"="que(queStorage)") que item
        button("(click)"="clearQue()") clear all
        button("(click)"="processQue()") process all
      .flex.child-margin-xxs(
        *ngFor="let item of processQueResults; let i=index"
        "[@fadeInUp]"=1
      )
        .text-xs.pad-h-xs Completed {{i}} :
        input.flex-1([ngModel]="item" disabled)
      .text-xs.pad-xs.border-info.text-info.bg-info.margin-bottom
        |TRY THIS
        ul
          li Put items into que
          li Disable your internet connection (unplug it)
          li Enable your internet connection
          li The entire que will be processed (takes seconds)
        .pad-xs You are currently : {{statusOnlineModel ? 'online' : 'offline'}}

      h4.pad-h-sm.margin-0 Usage Example
      .pad-xs
        absolute-overflow-x
          pre.code-sample.margin-0(ngNonBindable).
            import &#123; AckOffline &#125; from "ack-angular"
            import &#123; Component &#125; from "@angular/core"
            
            @Component(&#123;...&#125;)
            export class SomeClass&#123;
              constructor(public AckOffline:AckOffline)&#123;
                this.AckOffline.registerQueHandler('postHttpQue',quedData=&gt;&#123;
                  console.log('browser back online, ready to transmit data', quedData)
                &#125;)

                this.onlineEvent = ()=&gt;this.onOnline()

                window.addEventListener('online',this.onlineEvent)
              &#125;

              /** anytime we come back from offline, lets process our que */
              onOnline()&#123;
                this.AckOffline.processQue()
                .catch(e=&gt;console.error(e))
              &#125;

              set(data)&#123;
                return this.AckOffline.set('my-app-que', data)
                .catch(e=&gt;console.error(e))
              &#125;
              
              ngOnDestroy()&#123;
                window.removeEventListender(this.onlineEvent)
              &#125;
            &#125;
.pad
  .text-center.bg-info.pad
    .inline-block.pad.border.border-dotted.border-grey-5x.bg-stable
      .pad-sm.text-sm.text-grey-2x
        |After testing offline storage providers, you may want to clear the memory that was created
      button("(click)"="clearAllOffline()") clear all offline memory
