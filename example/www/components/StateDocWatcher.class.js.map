{"version":3,"file":"StateDocWatcher.class.js","sourceRoot":"","sources":["../../../src/components/StateDocWatcher.class.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAqC;AACrC,mFAA2E;AAC3E,oCAAoC;AACpC,8FAA8F;AAE9F;IAYE,yBAAmB,mBAAmB;QAAtC,iBA6CC;QA7CkB,wBAAmB,GAAnB,mBAAmB,CAAA;QACpC,yBAAyB;QACzB,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAA;QAC9C,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEzB,IAAM,YAAY,GAAG;YACnB,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAAA,KAAI,CAAC,mBAAmB,CAAC,UAAU,GAAC,IAAI,CAAA;QACjE,CAAC,CAAA;QAED,IAAM,eAAe,GAAG;YACtB,KAAI,CAAC,mBAAmB,CAAC,UAAU,GAAC,KAAK,CAAA;QAC3C,CAAC,CAAA;QAED,IAAM,SAAS,GAAG;YAChB,KAAI,CAAC,UAAU,GAAG,KAAK,CAAA;QACzB,CAAC,CAAA;QACL;;;;;;;;;;;;;;;;;;UAkBE;QACE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,UAAU,EAAC,YAAY,CAAC,CAAA;QAC3D,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,EAAC,SAAS,CAAC,CAAA;QACzD,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,EAAC,eAAe,CAAC,CAAA;QAE/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAC;YACzB,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,UAAU,EAAC,YAAY,CAAC,CAAA;YAC9D,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,WAAW,EAAC,eAAe,CAAC,CAAA;YAClE,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,WAAW,EAAC,eAAe,CAAC,CAAA;QACpE,CAAC,CAAC,CAAA;IAEJ,CAAC;IAED,kCAAQ,GAAR;QACE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAA;QAEnC,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA,CAAC;YACd,IAAI,CAAC,MAAM,CAAC;gBACV,KAAK,EAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO;gBAC7C,MAAM,EAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,MAAM;gBAC7C,OAAO,EAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO;aAChD,CAAC,CAAA;QACJ,CAAC;IACH,CAAC;IAED,kCAAQ,GAAR,UAAS,IAAI,EAAE,MAAM;QACnB,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IACjD,CAAC;IAED,iCAAO,GAAP,UAAQ,IAAI,EAAE,MAAM;QAClB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;IAChD,CAAC;IACH,sBAAC;AAAD,CAAC,AA9ED;AAKS,0BAAU,GAAG,CAAC,CAAC,+CAAmB,CAAC,CAAC,CAAA;AAElC;IAAR,YAAK,EAAE;;4CAAW;AACV;IAAR,YAAK,EAAE;;sDAAqB;AACpB;IAAR,YAAK,EAAE;;+CAAc;AATX,0CAAe;AA+E5B;;;;;;GAMG","sourcesContent":["import { Input } from \"@angular/core\"\nimport { StateManagerService } from \"../services/StateManagerService.class\"\n//import injector from \"../injector\"\n//const deps = ['StateManagerService','$state','$rootScope','$document', '$scope', '$timeout']\n\nexport class StateDocWatcher{\n  public $document\n  public $scope\n  public isMouseOut : boolean\n  public StateManagerService : StateManagerService\n  static parameters = [[StateManagerService]]\n\n  @Input() public ref//variable reference\n  @Input() public onStateChange\n  @Input() public onLoad\n\n\n  constructor(public stateManagerService){\n    //inject(arguments, this)\n    this.StateManagerService = stateManagerService\n    this.$document = document\n\n    const isBackButton = ()=>{\n      this.isMouseOut = true;this.StateManagerService.isOsAction=true\n    }\n    \n    const isNotBackButton = ()=>{\n      this.StateManagerService.isOsAction=false\n    }\n    \n    const mouseover = ()=>{\n      this.isMouseOut = false\n    }\n/*\n    this.$rootScope.$on('$stateChangeStart', ()=>this.StateManagerService.stateChange())\n\n    this.$rootScope.$on('$stateChangeSuccess', (event, toState, toParams)=>{\n      this.$timeout(()=>{\n        if(!this.isMouseOut){\n          this.StateManagerService.isNextBackMode = false\n          this.StateManagerService.isOsAction=true\n        }\n\n        this.onStateChange({\n          state:toState,\n          toState:toState,\n          params:toParams,\n          current:this.StateManagerService.$state.current\n        })\n      },1)//allow a digest to occur to ng-model population\n    })\n*/\n    this.$document[0].addEventListener('mouseout',isBackButton)\n    this.$document[0].addEventListener('mouseover',mouseover)\n    this.$document[0].addEventListener('mousedown',isNotBackButton)\n\n    this.$scope.$on('$destroy',()=>{\n      this.$document[0].removeEventListener('mouseout',isBackButton)\n      this.$document[0].removeEventListener('mouseover',isNotBackButton)\n      this.$document[0].removeEventListener('mousedown',isNotBackButton)\n    })\n\n  }\n\n  ngOnInit(){\n    this.ref = this.StateManagerService\n    \n    if(this.onLoad){    \n      this.onLoad({\n        state:this.StateManagerService.$state.current,\n        params:this.StateManagerService.$state.params,\n        current:this.StateManagerService.$state.current\n      })\n    }\n  }\n\n  goBackTo(name, params){\n    this.StateManagerService.goBackTo(name, params)\n  }\n\n  tryBack(name, params){\n    this.StateManagerService.tryBack(name, params)\n  }\n}\n/*\nconst inject = injector(StateDocWatcher, deps)\n\nexport default {\n  bindings:{as:'=?', onStateChange:'&', onLoad:'&'}\n  ,controller:StateDocWatcher\n}*/"]}