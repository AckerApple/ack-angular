{"version":3,"sources":["../src/UrlVars.ts"],"names":[],"mappings":";;AAAA,sCAA2B;AAC3B,iDAA8B;AAE7B;IAGC,iBAAmB,aAA2B;QAA3B,kBAAa,GAAb,aAAa,CAAc;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;IAC1B,CAAC;IAED,uBAAK,GAAL;QACE,IAAI,KAAK,GAAG,wBAAwB,EAChC,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EACnD,MAAM,GAAG,EAAE,EACX,KAAK,CAAC;QAEV,OAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC9B,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,CAAC;QACD,MAAM,CAAC,MAAM,CAAA;IACf,CAAC;IAED,uCAAuC;IACvC,qBAAG,GAAH,UAAI,IAAI,EAAE,KAAM;QACd,EAAE,CAAA,CAAC,CAAC,IAAI,CAAC;YAAA,MAAM,CAAA;QAEf,EAAE,CAAA,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAE,IAAI,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAExB,yBAAyB;QACzB,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;QAC9B,GAAG,CAAA,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YACxB,EAAE,CAAA,CAAC,KAAK,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;gBAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QACzB,CAAC;QAED,MAAM,CAAC,KAAK,CAAA;IACd,CAAC;IAQH,cAAC;AAAD,CA1CC,AA0CA;AAPM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sBAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,6BAAa,GAAG;CACtB,EAF6F,CAE7F,CAAC;AAzCY,0BAAO","file":"UrlVars.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core'\nimport { WindowService } from \"./WindowService\"\n\n export class UrlVars{\n  vars\n\n  constructor(public WindowService:WindowService){\n    this.vars = this.parse()\n  }\n\n  parse(){\n    var regex = /[?&]([^=#]+)=([^&#]*)/g,\n        url = this.WindowService.nativeWindow.location.href,\n        params = {},\n        match;\n\n    while(match = regex.exec(url)) {\n      params[match[1]] = match[2];\n    }\n    return params\n  }\n\n  /** case in-sensative variable fetch */\n  get(name, param?){\n    if(!name)return\n\n    if(this.vars && this.vars[name]!=null)//try exact match first\n      return this.vars[name]\n\n    //case insensative search\n    var lcase = name.toLowerCase()\n    for(var key in this.vars){\n      if(lcase == key.toLowerCase())\n        return this.vars[key]\n    }\n\n    return param\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WindowService, },\n];\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}