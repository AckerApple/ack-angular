{"version":3,"sources":["../src/AckOptionsModal.component.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAMO;AACP,+DAA2B;AAE3B,2EAA0C;AACzC;IAAqC,mCAAU;IAM9C,yBAAmB,OAAkB;QAArC,YACE,iBAAO,SAUR;QAXkB,aAAO,GAAP,OAAO,CAAW;QAH7B,gBAAU,GAAG,IAAI,CAAA;QACjB,aAAO,GAAG,IAAI,mBAAY,EAAE,CAAA;QAKlC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAA;QAC9C,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAA;QACnC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAA;QACpC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,EAAE,CAAC;QACxC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QAC5C,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAA;QAC1C,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;QAC9C,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;;IAChD,CAAC;IAED,yCAAe,GAAf;QAAA,iBAUC;QATC,UAAU,CAAC;YACT,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,UAAA,KAAK;gBACzC,EAAE,CAAA,CAAC,KAAK,IAAI,CAAC,KAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,CAAA,CAAC;oBAC3C,KAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;gBACvB,CAAC;gBAED,KAAI,CAAC,WAAW,CAAC,IAAI,CAAE,KAAI,CAAC,KAAK,CAAE,CAAA;YACrC,CAAC,CAAC,CAAA;QACJ,CAAC,EAAE,CAAC,CAAC,CAAA;IACP,CAAC;IACI,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAC,mBAAmB;oBAC5B,QAAQ,EAAC,8BAAe;iBACzB,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,iBAAU,GAAG;KACnB,EAF6F,CAE7F,CAAC;IACK,8BAAc,GAA2C;QAChE,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;QAChC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;KAC7B,CAAC;IACF,sBAAC;CA5CA,AA4CA,CA5CqC,iCAAU,GA4C/C;AA5Ca,0CAAe","file":"AckOptionsModal.component.js","sourceRoot":"","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef\n} from \"@angular/core\"\nimport { AckOptions } from \"./AckOptions.component\"\n\nimport { string as ackOptionsModal } from \"./templates/ack-options-modal.pug\"\n export class AckOptionsModal extends AckOptions{\n  public ackModal\n  public ackOptions\n   public allowClose = true\n   public onClose = new EventEmitter()\n  \n  constructor(public element:ElementRef){\n    super()\n\n    element.nativeElement.style.position = 'fixed'\n    element.nativeElement.style.top = 0\n    element.nativeElement.style.left = 0\n    element.nativeElement.style.zIndex = 20;\n    element.nativeElement.style.height = '100%';\n    element.nativeElement.style.width = '100%'\n    element.nativeElement.style.overflow = 'auto';\n    element.nativeElement.style.display = 'block';\n  }\n\n  ngAfterViewInit(){\n    setTimeout(()=>{    \n      this.ackOptions.modelChange.subscribe(model=>{\n        if(model && !this.multiple && this.ackModal){\n          this.ackModal.close()\n        }\n\n        this.modelChange.emit( this.model )\n      })\n    }, 0)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector:'ack-options-modal',\n  template:ackOptionsModal\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'allowClose': [{ type: Input },],\n'onClose': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}