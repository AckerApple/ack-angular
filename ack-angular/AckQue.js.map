{"version":3,"sources":["../src/AckQue.ts"],"names":[],"mappings":"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","file":"AckQue.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AckOffline } from './AckOffline';\n\n/** Que data based processes by associating name based handlers */\n export class AckQue extends AckOffline{\n  public prefix:string=\"offline-que\"\n  public handlers = []\n  \n  /** processes with associated that are typically awaiting internet access to complete processing */\n  get(name) {\n    return super.get(name)\n    .then( data => data && data['que'] ? data['que'] : [])\n  }\n\n  /** aka get */\n  getQue(name){\n    return this.get(name)\n  }\n\n  /** aka set */\n  setQue(name, que){\n    return this.set(name, que)\n  }\n\n  /* deprecated : clearQue(name)... Call clear(name) */\n\n  /** add to qued data. Typically when offline, add post/put requests here and process them when back online */\n  que(name, queData) {\n    return super.get(name)\n    .then(data => {\n      data = data || {}\n      data['que'] = data['que'] || []\n\n      if(queData.forEach){\n        queData.forEach(x=>{\n          data['que'].push( x )\n        })\n      }else{\n        data['que'].push( queData )\n      }\n\n      return super.set(name, data)\n    })\n  }\n\n  /** merge new que data overtop of existing que\n    @name:string\n    @que\n  */\n  set(name, queData) {\n    return this.que(name, queData)\n  }\n\n  dequeByIndex(name, index){\n    return this.getQue(name)\n    .then(array=>{\n      array.splice(index, 1)\n      return array\n    })\n    .then( array=>this.setQue(name, array) )\n  }\n\n  processQuedByIndex(name, index){\n    const handler = this.getQueHandlerByName(name)\n    const mem = {item:null, array:null, result:null}\n\n    return this.getQue(name)\n    .then(array=>{\n      mem.item = array.splice(index, 1)\n      mem.array = array\n    })\n    .then( ()=>this.handleQued(name, mem.item, handler))\n    .then( result=>mem.result=result )\n    .then( ()=>this.setQue(name, mem.array) )\n    .then( ()=>mem.result )\n  }\n\n  /** Most important. When a que of data-tasks is being processed, the approperiate handler must be registered here */\n  registerHandler(name, handler){\n    this.handlers.push({name, handler})\n    return this\n  }\n\n  /** aka registerHandler */\n  registerQueHandler(name, handler){\n    return this.registerHandler(name, handler)\n  }\n\n  paramHandler(name, handler) {\n    for(let x=this.handlers.length-1; x >= 0; --x){\n      if(this.handlers[x].name==name){\n        return this\n      }\n    }\n    this.handlers.push({name, handler})\n    return this\n  }\n\n  getQueHandDefByName(name){\n    for(let i=this.handlers.length-1; i >= 0; --i){\n      if(this.handlers[i].name==name)return this.handlers[i]\n    }\n  }\n\n  /** return functions */\n  getQueHandlerByName(name){\n    const hand = this.getQueHandDefByName(name)\n    if(hand)return hand.handler\n  }\n\n  handleQued(name, qued, handler){\n    return Promise.resolve( handler(qued) )\n  }\n\n  /** gets array of qued data and processes all and then clears que\n    @hand{name, handler}\n  */\n  processQuedHandler(hand:{name:string,handler}){\n    const results = []\n    const mem = {que:[]}\n    const eachHandle = this.eachHandler(hand.name, hand.handler)\n\n    return this.get(hand.name)\n    .then( que=>mem.que=que )\n    .then( ()=>this.clear(hand.name) )\n    .then(()=>{\n      var promise = new Promise(function(res,rej){res()})\n      mem.que.forEach((v,i)=>{\n        promise = promise\n        .then( ()=>eachHandle(v) )\n        .catch( e=>e )\n        .then( r=>results.push(r) )\n      })\n      return promise\n    })\n    .then( ()=>results )\n  }\n\n  eachHandler(name, handler){\n    return data=>this.handleQued(name, data, handler)\n  }\n\n  /** call manually in app when back online */\n  processQue(name:string){\n    const handler = this.getQueHandDefByName(name)\n    return handler ? this.processQuedHandler(handler) : Promise.resolve()\n  }\n\n  /** call manually in app when back online and sure you want to process all ques */\n  processAllQues(){\n    const results = [], promises = []\n\n    this.handlers.forEach(hand=>\n      promises.push( this.processQuedHandler(hand) )\n    )\n\n    return Promise.all(promises)\n    .then(proms=>{\n      const results = []\n      proms.forEach( subArray=>results.push.apply(results, subArray) )\n      return Promise.all( results )//array of arrays is now one array\n    })\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}