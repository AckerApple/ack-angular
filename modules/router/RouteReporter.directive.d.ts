import { Subscription } from "rxjs";
import { EventEmitter } from "@angular/core";
import { ActivatedRoute, Route, Router } from "@angular/router";
import { currentRoute, RouteWatchReporter, RouteInsight } from "./RouteWatchReporter";
import * as i0 from "@angular/core";
export declare class RouteReporter {
    Router: Router;
    RouteWatchReporter: RouteWatchReporter;
    ActivatedRoute: ActivatedRoute;
    onLoad: any;
    stateChanger: EventEmitter<RouteWatchReporter>;
    beforeChanger: EventEmitter<any>;
    activated: ActivatedRoute;
    activatedChange: EventEmitter<ActivatedRoute>;
    params: any;
    paramsChange: EventEmitter<any>;
    data: any;
    dataChange: EventEmitter<any>;
    query: any;
    queryChange: EventEmitter<any>;
    route: Route;
    routeChange: EventEmitter<Route>;
    parentRoute?: Route;
    parentRouteChange: EventEmitter<Route>;
    parent?: ActivatedRoute;
    parentChange: EventEmitter<ActivatedRoute>;
    parentData: any;
    parentDataChange: EventEmitter<any>;
    current: currentRoute;
    state: currentRoute;
    stateChange: EventEmitter<currentRoute>;
    $document: any;
    $scope: any;
    docCallbacks: any;
    querySub: Subscription;
    constructor(Router: Router, RouteWatchReporter: RouteWatchReporter, ActivatedRoute: ActivatedRoute);
    ngOnInit(): void;
    ngOnDestroy(): void;
    apply(): void;
    crumbArray: RouteInsight[];
    updateCrumbArray(): void;
    populateCrumbArray(array: RouteInsight[], current: ActivatedRoute): void;
    populateCrumbArrayLikes(array: RouteInsight[], current: Route): void;
    attemptSetParentByCurrent(current: currentRoute): void;
    emit(): void;
    goBackOrUp(): void;
    goUp(): void;
    goBackTo(name: string, params: any): void;
    tryBack(name: string, params: any): void;
    getCrumbParentFor(current: currentRoute): RouteInsight | undefined;
    getLikeParent(route: Route): Route | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<RouteReporter, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RouteReporter, "route-reporter", ["RouteReporter"], { "onLoad": "onLoad"; "activated": "activated"; "params": "params"; "data": "data"; "query": "query"; "route": "route"; "parentRoute": "parentRoute"; "parent": "parent"; "parentData": "parentData"; "current": "current"; "state": "state"; }, { "stateChanger": "onChange"; "beforeChanger": "beforeChange"; "activatedChange": "activatedChange"; "paramsChange": "paramsChange"; "dataChange": "dataChange"; "queryChange": "queryChange"; "routeChange": "routeChange"; "parentRouteChange": "parentRouteChange"; "parentChange": "parentChange"; "parentDataChange": "parentDataChange"; "stateChange": "stateChange"; }, never, never, false>;
}
