{"version":3,"sources":["../src/AckOffline.ts"],"names":[],"mappings":";;AAAA,2DAAC;AACD,yCAA6B;AAC7B,sCAA2C;AAE3C,8CAA8C;AAC7C;IAAA;QACQ,WAAM,GAAQ,SAAS,CAAA;IAqChC,CAAC;IAnCC,wBAAG,GAAH,UAAI,IAAI,EAAE,IAAI;QACZ,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAC,GAAG,GAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IACxD,CAAC;IAED,wBAAG,GAAH,UAAI,IAAI;QACN,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAC,GAAG,GAAC,IAAI,CAAC,CAAA;IAClD,CAAC;IAED,2BAAM,GAAN,UAAO,IAAI;QACT,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAC,GAAG,GAAC,IAAI,CAAC,CAAA;IACrD,CAAC;IAED,oBAAoB;IACpB,0BAAK,GAAL,UAAM,IAAI,IAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA,CAAA,CAAC;IAErC,6BAAQ,GAAR;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI,IAAK,OAAA,IAAI,CAAC,OAAO,CAAC,UAAA,IAAI,IAAE,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC,EAArC,CAAqC,CAAC,CAAA;IACtF,CAAC;IAED,qEAAqE;IACrE,qCAAgB,GAAhB;QAAA,iBAQC;QAPC,IAAI,IAAI,GAAG,EAAE,CAAA;QACb,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,CAAC,EAAE,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC9B,IAAI,CAAC,IAAI,CAAE,CAAC,CAAC,SAAS,CAAC,KAAI,CAAC,MAAM,CAAC,MAAM,GAAC,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAE,CAAA;YAC1D,CAAC;QACH,CAAC,CAAC;aACD,IAAI,CAAC,cAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAA;IACjB,CAAC;IACI,qBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,iBAAC;CAtCA,AAsCA,IAAA;AAtCa,gCAAU","file":"AckOffline.js","sourceRoot":"","sourcesContent":["//import localForage from \"localforage/dist/localforage.js\"\nimport * as localForage from \"localforage\"\nimport { Injectable } from '@angular/core';\n\n/** Offline storage provided by localforage */\n export class AckOffline{\n  public prefix:string=\"offline\"\n\n  set(name, data) {\n    return localForage.setItem(this.prefix+'-'+name, data)\n  }\n\n  get(name) {\n    return localForage.getItem(this.prefix+'-'+name)\n  }\n\n  remove(name){\n    return localForage.removeItem(this.prefix+'-'+name)\n  }\n\n  /** aka of remove */\n  clear(name){return this.remove(name)}\n\n  clearAll() {\n    return this.promiseNameArray().then((keys) => keys.forEach(name=>this.remove(name)))\n  }\n\n  /** returns string array of all key names used for browser storage */\n  promiseNameArray(){\n    let keys = []\n    return localForage.iterate((_, k) => {\n      if (k.startsWith(this.prefix)) {\n        keys.push( k.substring(this.prefix.length+1, k.length) )\n      }\n    })\n    .then(()=>keys)\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}