import { Injectable } from "@angular/core";
import { Router, NavigationEnd } from "@angular/router";
export class RouteHistory {
    constructor(Router) {
        this.Router = Router;
        this.routeHistory = [];
        this.maxHistory = 10;
        this.historyIndex = 0;
        this.subs = [];
        this.monitor();
    }
    monitor() {
        this.subs.push(this.Router.events.subscribe(event => {
            if (event.constructor === NavigationEnd) {
                this.addRouteToHistory();
            }
        }));
    }
    ngOnDestroy() {
        this.subs.forEach(sub => sub.unsubscribe());
    }
    addRouteToHistory() {
        const priorPage = this.historyIndex + 1;
        const nextPage = this.historyIndex - 1;
        const matchesBack = this.routeHistory.length >= priorPage && this.Router.url === this.routeHistory[priorPage];
        const matchesNext = this.routeHistory.length >= nextPage && this.Router.url === this.routeHistory[nextPage];
        const matchesCurrent = this.Router.url === this.routeHistory[this.historyIndex];
        if (matchesNext) {
            --this.historyIndex;
        }
        if (matchesBack) {
            ++this.historyIndex;
        }
        if (matchesNext || matchesCurrent || matchesBack) {
            this.applyNav();
            return;
        }
        //remove old entries
        while (this.routeHistory.length > this.maxHistory) {
            //this.routeHistory.shift()
            this.routeHistory.pop();
        }
        //this.routeHistory.push(this.Router.url)
        this.routeHistory.splice(this.historyIndex, 0, this.Router.url);
        this.applyNav();
    }
    applyNav() {
        const posAvail = this.historyIndex < this.routeHistory.length - 1;
        if (posAvail) {
            this.back = this.routeHistory[this.historyIndex + 1];
        }
        else if (this.routeHistory.length) {
            const newBack = this.routeHistory[this.routeHistory.length - 1].split("/");
            newBack.pop();
            this.back = newBack.join("/");
            ++this.historyIndex;
        }
        else {
            delete this.back;
        }
        if (this.historyIndex > 0) {
            this.forward = this.routeHistory[this.historyIndex - 1];
        }
        else {
            delete this.forward;
        }
    }
    goBack() {
        if (this.historyIndex === this.routeHistory.length - 1)
            return;
        //++this.historyIndex
        const rh = this.routeHistory[this.historyIndex + 1];
        this.Router.navigate([rh]);
    }
    goForward() {
        if (this.historyIndex === 0)
            return;
        //--this.historyIndex
        const rh = this.routeHistory[this.historyIndex - 1];
        this.Router.navigate([rh]);
    }
}
RouteHistory.decorators = [
    { type: Injectable }
];
RouteHistory.ctorParameters = () => [
    { type: Router }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm91dGVIaXN0b3J5LnByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZHVsZXMvcm91dGVyL1JvdXRlSGlzdG9yeS5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFDTCxNQUFNLEVBQ04sYUFBYSxFQUNkLE1BQU0saUJBQWlCLENBQUM7QUFFWCxNQUFNLE9BQU8sWUFBWTtJQVFyQyxZQUNTLE1BQWE7UUFBYixXQUFNLEdBQU4sTUFBTSxDQUFPO1FBUnRCLGlCQUFZLEdBQVksRUFBRSxDQUFBO1FBQzFCLGVBQVUsR0FBVSxFQUFFLENBQUE7UUFDdEIsaUJBQVksR0FBVSxDQUFDLENBQUE7UUFDdkIsU0FBSSxHQUFrQixFQUFFLENBQUE7UUFPdEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2hCLENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQSxFQUFFO1lBQ2xDLElBQUcsS0FBSyxDQUFDLFdBQVcsS0FBSyxhQUFhLEVBQUM7Z0JBQ3JDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO2FBQ3pCO1FBQ0gsQ0FBQyxDQUFDLENBQ0gsQ0FBQTtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFBLEVBQUUsQ0FBQSxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtJQUMzQyxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7UUFDdkMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUE7UUFDdEMs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WUFBWSxLQUFHLENBQUM7WUFBRSxPQUFNO1FBQ2pDLHFCQUFxQjtRQUNyQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFFLElBQUksQ0FBQyxZQUFZLEdBQUMsQ0FBQyxDQUFFLENBQUE7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzVCLENBQUM7OztZQTVGRixVQUFVOzs7WUFKVCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anMvaW50ZXJuYWwvU3Vic2NyaXB0aW9uXCJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXG5pbXBvcnQge1xuICBSb3V0ZXIsXG4gIE5hdmlnYXRpb25FbmRcbn0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBjbGFzcyBSb3V0ZUhpc3Rvcnl7XG4gIHJvdXRlSGlzdG9yeTpzdHJpbmdbXSA9IFtdXG4gIG1heEhpc3Rvcnk6bnVtYmVyID0gMTBcbiAgaGlzdG9yeUluZGV4Om51bWJlciA9IDBcbiAgc3ViczpTdWJzY3JpcHRpb25bXSA9IFtdXG4gIGZvcndhcmQ6c3RyaW5nLy91cmxcbiAgYmFjazpzdHJpbmcvL3VybFxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBSb3V0ZXI6Um91dGVyXG4gICl7XG4gICAgdGhpcy5tb25pdG9yKClcbiAgfVxuXG4gIG1vbml0b3IoKXtcbiAgICB0aGlzLnN1YnMucHVzaChcbiAgICAgIHRoaXMuUm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZXZlbnQ9PntcbiAgICAgICAgaWYoZXZlbnQuY29uc3RydWN0b3IgPT09IE5hdmlnYXRpb25FbmQpe1xuICAgICAgICAgIHRoaXMuYWRkUm91dGVUb0hpc3RvcnkoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIClcbiAgfVxuXG4gIG5nT25EZXN0cm95KCl7XG4gICAgdGhpcy5zdWJzLmZvckVhY2goc3ViPT5zdWIudW5zdWJzY3JpYmUoKSlcbiAgfVxuXG4gIGFkZFJvdXRlVG9IaXN0b3J5KCk6dm9pZHtcbiAgICBjb25zdCBwcmlvclBhZ2UgPSB0aGlzLmhpc3RvcnlJbmRleCArIDFcbiAgICBjb25zdCBuZXh0UGFnZSA9IHRoaXMuaGlzdG9yeUluZGV4IC0gMVxuICAgIGNvbnN0IG1hdGNoZXNCYWNrID0gdGhpcy5yb3V0ZUhpc3RvcnkubGVuZ3RoPj1wcmlvclBhZ2UgJiYgdGhpcy5Sb3V0ZXIudXJsID09PSB0aGlzLnJvdXRlSGlzdG9yeVsgcHJpb3JQYWdlIF1cbiAgICBjb25zdCBtYXRjaGVzTmV4dCA9IHRoaXMucm91dGVIaXN0b3J5Lmxlbmd0aD49bmV4dFBhZ2UgJiYgdGhpcy5Sb3V0ZXIudXJsID09PSB0aGlzLnJvdXRlSGlzdG9yeVsgbmV4dFBhZ2UgXVxuICAgIGNvbnN0IG1hdGNoZXNDdXJyZW50ID0gdGhpcy5Sb3V0ZXIudXJsID09PSB0aGlzLnJvdXRlSGlzdG9yeVsgdGhpcy5oaXN0b3J5SW5kZXggXVxuICAgIFxuICAgIGlmKCBtYXRjaGVzTmV4dCApe1xuICAgICAgLS10aGlzLmhpc3RvcnlJbmRleFxuICAgIH1cbiAgICBcbiAgICBpZiggbWF0Y2hlc0JhY2sgKXtcbiAgICAgICsrdGhpcy5oaXN0b3J5SW5kZXhcbiAgICB9XG5cbiAgICBpZihtYXRjaGVzTmV4dCB8fCBtYXRjaGVzQ3VycmVudCB8fCBtYXRjaGVzQmFjayl7XG4gICAgICB0aGlzLmFwcGx5TmF2KClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vcmVtb3ZlIG9sZCBlbnRyaWVzXG4gICAgd2hpbGUodGhpcy5yb3V0ZUhpc3RvcnkubGVuZ3RoID4gdGhpcy5tYXhIaXN0b3J5KXtcbiAgICAgIC8vdGhpcy5yb3V0ZUhpc3Rvcnkuc2hpZnQoKVxuICAgICAgdGhpcy5yb3V0ZUhpc3RvcnkucG9wKClcbiAgICB9XG5cbiAgICAvL3RoaXMucm91dGVIaXN0b3J5LnB1c2godGhpcy5Sb3V0ZXIudXJsKVxuICAgIHRoaXMucm91dGVIaXN0b3J5LnNwbGljZSh0aGlzLmhpc3RvcnlJbmRleCwgMCwgdGhpcy5Sb3V0ZXIudXJsKVxuICAgIHRoaXMuYXBwbHlOYXYoKVxuICB9XG5cbiAgYXBwbHlOYXYoKXtcbiAgICBjb25zdCBwb3NBdmFpbCA9IHRoaXMuaGlzdG9yeUluZGV4IDwgdGhpcy5yb3V0ZUhpc3RvcnkubGVuZ3RoLTFcblxuICAgIGlmKCBwb3NBdmFpbCApe1xuICAgICAgdGhpcy5iYWNrID0gdGhpcy5yb3V0ZUhpc3RvcnlbIHRoaXMuaGlzdG9yeUluZGV4KzEgXVxuICAgIH0gZWxzZSBpZiAodGhpcy5yb3V0ZUhpc3RvcnkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG5ld0JhY2sgPSB0aGlzLnJvdXRlSGlzdG9yeVt0aGlzLnJvdXRlSGlzdG9yeS5sZW5ndGggLSAxXS5zcGxpdChcIi9cIik7XG4gICAgICAgIG5ld0JhY2sucG9wKCk7XG4gICAgICAgIHRoaXMuYmFjayA9IG5ld0JhY2suam9pbihcIi9cIik7XG4gICAgICAgICsrdGhpcy5oaXN0b3J5SW5kZXg7XG4gICAgfWVsc2V7XG4gICAgICBkZWxldGUgdGhpcy5iYWNrXG4gICAgfVxuXG4gICAgaWYoIHRoaXMuaGlzdG9yeUluZGV4PjAgKXtcbiAgICAgIHRoaXMuZm9yd2FyZCA9IHRoaXMucm91dGVIaXN0b3J5WyB0aGlzLmhpc3RvcnlJbmRleC0xXVxuICAgIH1lbHNle1xuICAgICAgZGVsZXRlIHRoaXMuZm9yd2FyZFxuICAgIH1cbiAgfVxuXG4gIGdvQmFjaygpe1xuICAgIGlmKCB0aGlzLmhpc3RvcnlJbmRleD09PXRoaXMucm91dGVIaXN0b3J5Lmxlbmd0aC0xIClyZXR1cm5cbiAgICAvLysrdGhpcy5oaXN0b3J5SW5kZXhcbiAgICBjb25zdCByaCA9IHRoaXMucm91dGVIaXN0b3J5WyB0aGlzLmhpc3RvcnlJbmRleCsxIF1cbiAgICB0aGlzLlJvdXRlci5uYXZpZ2F0ZShbcmhdKVxuICB9XG5cbiAgZ29Gb3J3YXJkKCl7XG4gICAgaWYoIHRoaXMuaGlzdG9yeUluZGV4PT09MCApcmV0dXJuXG4gICAgLy8tLXRoaXMuaGlzdG9yeUluZGV4XG4gICAgY29uc3QgcmggPSB0aGlzLnJvdXRlSGlzdG9yeVsgdGhpcy5oaXN0b3J5SW5kZXgtMSBdXG4gICAgdGhpcy5Sb3V0ZXIubmF2aWdhdGUoW3JoXSlcbiAgfVxufVxuIl19