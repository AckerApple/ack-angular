import { BehaviorSubject } from "rxjs";
import { EventEmitter, Output, Input, ContentChildren, Directive, IterableDiffers } from "@angular/core";
import { AckAggregate } from "./AckAggregate.directive";
export class AckArray {
    constructor(_iterableDiffers) {
        this._iterableDiffers = _iterableDiffers;
        this.pushed = {};
        this.inSort = false;
        this.sortArray = [];
        this.pageAt = 0; //when to page aka maxrows
        this.pagesChange = new BehaviorSubject(null);
        //@Output() pagesChange:EventEmitter<any[][]> = new EventEmitter()
        //a chance to know when current viewed page should be zero
        this.page = 0;
        this.pageChange = new EventEmitter();
        this.keyMapChange = new EventEmitter();
        this.loopStart = new EventEmitter();
        this.loopEach = new EventEmitter();
        this.loopEnd = new EventEmitter();
        this.arrayChange = new EventEmitter();
        //super()
        //watch deep changes
        const f = this._iterableDiffers.find([]);
        this.iterableDiffer = f.create();
    }
    ngOnDestroy() {
        if (this.array$sub) {
            this.array$sub.unsubscribe();
        }
    }
    ngOnInit() {
        if (this.keyMapChange.observers.length) {
            if (!this.keyMap) {
                Promise.resolve().then(() => {
                    this.keyMap = {};
                    this.keyMapChange.emit(this.keyMap);
                });
            }
            this.pushCreateMap();
        }
    }
    ngAfterViewInit() {
        if (this.AckAggregates) {
            this.pushAggregates(this.AckAggregates);
        }
        this.inited = true;
        Promise.resolve().then(() => this.loop(true));
    }
    //watch array deep changes
    ngDoCheck() {
        if (!this.inited)
            return;
        let changes = this.iterableDiffer.diff(this.array);
        if (changes) {
            Promise.resolve().then(() => this.loop(false));
        }
    }
    ngOnChanges(changes) {
        if (changes.array$) {
            if (this.array$sub) {
                this.array$sub.unsubscribe();
                delete this.array$sub;
            }
            if (this.array$) {
                this.array$sub = this.array$.subscribe(array => {
                    if (this.merge) {
                        mergeArrays(this.array, array, this.idKeys);
                    }
                    else {
                        const reset = this.array != array;
                        this.array = array;
                        this.loop(reset);
                    }
                });
            }
        }
        let loop = changes.array ? true : false;
        if (changes.pageAt) {
            this.pushCreatePages();
            loop = true;
        }
        if (this.inited && loop) {
            Promise.resolve().then(() => this.loop(true));
        }
    }
    pushAggregates(aggs) {
        aggs.forEach(agg => {
            let memory;
            switch (agg.type) {
                //default is to sum
                default: {
                    this.loopStart.subscribe(() => memory = 0);
                    this.loopEach.subscribe(loop => {
                        const value = this.getItemValueByKeys(loop.item, agg.keys);
                        if (value) {
                            memory = memory + value;
                        }
                    });
                    this.loopEnd.subscribe(() => {
                        agg.output = memory;
                        agg.outputChange.emit(memory);
                    });
                }
            }
        });
    }
    getItemValueByKeys(item, keys) {
        for (let x = 0; x < keys.length; ++x) {
            let keyName = keys[x];
            item = item[keyName];
            if (item == null)
                return null;
        }
        return item;
    }
    loop(reset) {
        //super.loop( reset )
        if (!this.array) {
            this.array = [];
        }
        this.loopStart.emit(reset);
        const last = this.array.length;
        for (let x = 0; x < last; ++x) {
            this.loopEach.emit({ index: x, item: this.array[x] });
        }
        //this.performJoins()
        this.loopEnd.emit();
    }
    pushCreateMap() {
        if (this.pushed.createMap)
            return;
        this.pushed.createMap = true;
        this.loopStart.subscribe(() => this.keyMap = {});
        this.loopEach.subscribe(ob => {
            let key = this.getItemId(ob.item);
            this.keyMap[key] = ob.item;
        });
        this.loopEnd.subscribe(() => this.keyMapChange.emit(this.keyMap));
    }
    /** adds to loop functionality how to create pages */
    pushCreatePages() {
        if (this.pushed.createPages)
            return;
        this.pushed.createPages = true;
        let pos = 0;
        let last = 0;
        this.loopStart.subscribe(reset => {
            pos = 0;
            last = this.array.length;
            if (reset) {
                this.pageChange.emit(this.page = 0);
            }
            this.pages = this.pages || [];
            this.pages.length = 0; //dont break binding if pages remembered
            this.pages.push([]);
        });
        this.loopEach.subscribe(ob => {
            this.pages[pos].push(ob.item);
            if (this.pages[pos].length == this.pageAt && ob.index < last - 1) {
                this.pages.push([]);
                ++pos;
            }
        });
        this.loopEnd.subscribe(() => {
            if (this.page && this.page >= this.pages.length) {
                this.pageChange.emit(this.page = 0);
            }
            //this.pagesChange.emit( this.pages )
            this.pagesChange.next(this.pages);
        });
    }
    //reduce array down to one item
    only(item) {
        this.array.length = 0;
        this.array.push(item);
        this.arrayChange.emit(this.array);
        this.loop(true);
    }
    //looks up id or the item itself is an ID
    getItemId(item) {
        return this.idKeys && this.idKeys[0] && item[this.idKeys[0]];
    }
    getCompareArray() {
        if (this.array && this.idKeys && this.idKeys.length) {
            const idKey = this.idKeys[0];
            return this.array.map(item => item[idKey]);
        }
        return this.array || [];
    }
    selected(item) {
        return this.itemIndex(item) >= 0 ? true : false;
    }
    itemIndex(item) {
        const array = this.getCompareArray();
        for (let x = array.length - 1; x >= 0; --x) {
            if (dataKeysMatch(array[x], item, this.idKeys)) {
                return x;
            }
        }
        return -1;
    }
    toggle(item) {
        const index = this.itemIndex(item);
        if (index >= 0) {
            return this.splice(index);
        }
        return this.push(item);
    }
    push(item) {
        this.param().push(item);
        this.loop(false);
        return this;
    }
    unshift(item) {
        this.param().unshift(item);
        return this;
    }
    splice(x, y = 1) {
        this.param().splice(x, y);
        this.loop(false);
        return this;
    }
    param() {
        if (!this.array)
            this.arrayChange.emit(this.array = []);
        return this.array;
    }
    toggleSort(arrayKey, sortType) {
        if (this.inSort)
            return false;
        this.inSort = true;
        let asc = false; //most lists come pre sorted asc, our default should be desc
        if (this.sortArray.length && this.sortArray[0].arrayKey) {
            asc = !this.sortArray[0].asc;
            this.sortArray[0] = {
                arrayKey: arrayKey,
                asc: !this.sortArray[0].asc
            };
        }
        else {
            this.sortArray.unshift({
                arrayKey: arrayKey,
                asc: asc
            });
        }
        const toKey = function (a, index = 0) {
            const value = a[arrayKey[index]];
            if (value == null || index == arrayKey.length - 1) {
                return value;
            }
            return toKey(value, index + 1);
        };
        if (arrayKey.constructor != Array) {
            arrayKey = [arrayKey];
        }
        const numberSort = !isNaN(sortType) || ["int", "number"].indexOf(sortType) >= 0;
        if (numberSort) {
            if (asc) {
                this.array.sort((a, b) => Number(toKey(a)) - Number(toKey(b)));
            }
            else {
                this.array.sort((b, a) => Number(toKey(a)) - Number(toKey(b)));
            }
        }
        else {
            switch (sortType) {
                case "date":
                case "time":
                case "datetime":
                    if (asc) {
                        this.array.sort((a, b) => {
                            a = new Date(toKey(a, 0));
                            b = new Date(toKey(b, 0));
                            return a == "Invalid Date" || a > b ? -1 : b == "Invalid Date" || a < b ? 1 : 0;
                        });
                    }
                    else {
                        this.array.sort((b, a) => {
                            a = new Date(toKey(a, 0));
                            b = new Date(toKey(b, 0));
                            return a == "Invalid Date" || a > b ? -1 : b == "Invalid Date" || a < b ? 1 : 0;
                        });
                    }
                    break;
                default: //STRING BASED SORT
                    if (asc) {
                        this.array.sort((a, b) => String(toKey(a) || "").toLowerCase() > String(toKey(b) || "").toLowerCase() ? 1 : -1);
                    }
                    else {
                        this.array.sort((b, a) => String(toKey(a) || "").toLowerCase() > String(toKey(b) || "").toLowerCase() ? 1 : -1);
                    }
            }
        }
        //cleanup
        if (this.sortArray.length > 3) {
            this.sortArray.pop();
        }
        this.inSort = false;
        this.loop(true); //cause pages to be updated
    }
}
AckArray.decorators = [
    { type: Directive, args: [{
                selector: "ack-array",
                exportAs: "AckArray"
            },] }
];
AckArray.ctorParameters = () => [
    { type: IterableDiffers }
];
AckArray.propDecorators = {
    pageAt: [{ type: Input }],
    pages: [{ type: Input }],
    pagesChange: [{ type: Output }],
    page: [{ type: Input }],
    pageChange: [{ type: Output }],
    keyMap: [{ type: Input }],
    keyMapChange: [{ type: Output }],
    AckAggregates: [{ type: ContentChildren, args: [AckAggregate,] }],
    idKeys: [{ type: Input }],
    merge: [{ type: Input }],
    array: [{ type: Input }],
    arrayChange: [{ type: Output }],
    array$: [{ type: Input }]
};
export function dataKeysMatch(ao, an, idKeys) {
    for (let x = idKeys.length - 1; x >= 0; --x) {
        let idKey = idKeys[x];
        if (ao[idKey] != null && ao[idKey] !== an[idKey]) {
            return false;
        }
    }
    return true;
}
export function mergeArrays(arrayOriginal, arrayNew, idKeys) {
    //removals
    for (let x = arrayOriginal.length - 1; x >= 0; --x) {
        let ao = arrayOriginal[x];
        let an = arrayNew[x];
        //quick match
        if (an && dataKeysMatch(ao, an, idKeys)) {
            continue;
        }
        let found = false;
        for (let xx = arrayNew.length - 1; xx >= 0; --xx) {
            if (dataKeysMatch(ao, arrayNew[xx], idKeys)) {
                found = true;
                break;
            }
        }
        if (found)
            continue;
        arrayOriginal.splice(x, 1);
    }
    //merge and add
    for (let x = 0; x < arrayNew.length; ++x) {
        let ao = arrayOriginal[x];
        let an = arrayNew[x];
        let found = false;
        //try by index match first, may to near identical arrays
        if (ao && dataKeysMatch(ao, an, idKeys)) {
            mergeObjects(ao, an);
            continue;
        }
        //try to match by loop against loop
        for (let xx = arrayOriginal.length - 1; xx >= 0; --xx) {
            ao = arrayOriginal[xx];
            if (dataKeysMatch(ao, an, idKeys)) {
                mergeObjects(ao, an);
                found = true;
                continue;
            }
        }
        if (found) {
            continue;
        }
        //not found, add to array
        //arrayOriginal.unshift(an)
        arrayOriginal.splice(x, 0, an);
    }
}
function mergeObjects(ao, an) {
    for (let x in ao) {
        delete ao[x];
    }
    Object.assign(ao, an);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWNrQXJyYXkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2RpcmVjdGl2ZXMvQWNrQXJyYXkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQWdCLE1BQU0sTUFBTSxDQUFBO0FBQ3BELE9BQU8sRUFDTCxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFDM0IsZUFBZSxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQzVDLE1BQU0sZUFBZSxDQUFBO0FBQ3RCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQWVwRCxNQUFNLE9BQU8sUUFBUTtJQXNDdEIsWUFDVSxnQkFBaUM7UUFBakMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQW5DM0MsV0FBTSxHQUFPLEVBQUUsQ0FBQTtRQUVmLFdBQU0sR0FBVyxLQUFLLENBQUE7UUFDdEIsY0FBUyxHQUFhLEVBQUUsQ0FBQTtRQUdmLFdBQU0sR0FBVSxDQUFDLENBQUEsQ0FBQSwwQkFBMEI7UUFFMUMsZ0JBQVcsR0FBeUIsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkUsa0VBQWtFO1FBRWxFLDBEQUEwRDtRQUNqRCxTQUFJLEdBQVUsQ0FBQyxDQUFBO1FBQ2QsZUFBVSxHQUF3QixJQUFJLFlBQVksRUFBRSxDQUFBO1FBSXBELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUUzQyxjQUFTLEdBQXlCLElBQUksWUFBWSxFQUFFLENBQUE7UUFDcEQsYUFBUSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ2hELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQVNyQyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUE7UUFPeEMsU0FBUztRQUNULG9CQUFvQjtRQUNwQixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxD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TSxHQUFDLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFDO1lBQy9DLEVBQUUsR0FBRyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUE7WUFDdEIsSUFBSSxhQUFhLENBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxNQUFNLENBQUMsRUFBRTtnQkFDL0IsWUFBWSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtnQkFDcEIsS0FBSyxHQUFHLElBQUksQ0FBQTtnQkFDWixTQUFRO2FBQ1Q7U0FDRjtRQUVELElBQUksS0FBSyxFQUFFO1lBQ1QsU0FBUTtTQUNUO1FBRUQseUJBQXlCO1FBQ3pCLDJCQUEyQjtRQUMzQixhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUE7S0FDN0I7QUFDSCxDQUFDO0FBR0QsU0FBUyxZQUFZLENBQUMsRUFBUyxFQUFFLEVBQVM7SUFDeEMsS0FBSSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQUM7UUFDZCxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUNiO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIlxuaW1wb3J0IHtcbiAgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIElucHV0LFxuICBDb250ZW50Q2hpbGRyZW4sIERpcmVjdGl2ZSwgSXRlcmFibGVEaWZmZXJzLCBJdGVyYWJsZURpZmZlclxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXG5pbXBvcnQgeyBBY2tBZ2dyZWdhdGUgfSBmcm9tIFwiLi9BY2tBZ2dyZWdhdGUuZGlyZWN0aXZlXCJcblxuZXhwb3J0IGludGVyZmFjZSBzb3J0RGVme1xuICBhcnJheUtleSA6IHN0cmluZyB8IHN0cmluZ1tdXG4gIGFzYyAgICAgIDogYm9vbGVhblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIGxvb3B7XG4gIGluZGV4Om51bWJlclxuICBpdGVtOmFueVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XCJhY2stYXJyYXlcIixcbiAgZXhwb3J0QXM6XCJBY2tBcnJheVwiXG59KSBleHBvcnQgY2xhc3MgQWNrQXJyYXl7XG4gIGFycmF5JHN1Yj86IFN1YnNjcmlwdGlvblxuICBpdGVyYWJsZURpZmZlcjogSXRlcmFibGVEaWZmZXI8YW55W10+Ly9jaGFuZ2UgZGV0ZWN0aW9uXG4gIGluaXRlZD86IGJvb2xlYW5cbiAgcHVzaGVkOmFueSA9IHt9XG5cbiAgaW5Tb3J0OmJvb2xlYW4gPSBmYWxzZVxuICBzb3J0QXJyYXk6c29ydERlZltdID0gW11cblxuXG4gIEBJbnB1dCgpIHBhZ2VBdDpudW1iZXIgPSAwLy93aGVuIHRvIHBhZ2UgYWthIG1heHJvd3NcbiAgQElucHV0KCkgcGFnZXMhOiBhbnlcbiAgQE91dHB1dCgpIHBhZ2VzQ2hhbmdlOiBCZWhhdmlvclN1YmplY3Q8YW55PiA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbClcbiAgLy9AT3V0cHV0KCkgcGFnZXNDaGFuZ2U6RXZlbnRFbWl0dGVyPGFueVtdW10+ID0gbmV3IEV2ZW50RW1pdHRlcigpXG5cbiAgLy9hIGNoYW5jZSB0byBrbm93IHdoZW4gY3VycmVudCB2aWV3ZWQgcGFnZSBzaG91bGQgYmUgemVyb1xuICBASW5wdXQoKSBwYWdlOm51bWJlciA9IDBcbiAgQE91dHB1dCgpIHBhZ2VDaGFuZ2U6RXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICAvL2Rlc2NyaWJlcyB1bmlxdWUgZmllbGRzIG9mIGFuIG9iamVjdFxuICBASW5wdXQoKSBrZXlNYXA6YW55XG4gIEBPdXRwdXQoKSBrZXlNYXBDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKClcblxuICBsb29wU3RhcnQ6RXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcigpXG4gIGxvb3BFYWNoOkV2ZW50RW1pdHRlcjxsb29wPiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICBsb29wRW5kOkV2ZW50RW1pdHRlcjx2b2lkPiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oQWNrQWdncmVnYXRlKSBBY2tBZ2dyZWdhdGVzPzogQWNrQWdncmVnYXRlW11cbiAgLy9AQ29udGVudENoaWxkcmVuKEFja0FycmF5Sm9pbikgQWNrQXJyYXlKb2luczpBY2tBcnJheUpvaW5bXVxuXG4gIEBJbnB1dCgpIGlkS2V5cyE6IHN0cmluZ1tdXG4gIEBJbnB1dCgpIG1lcmdlPzogYm9vbGVhbi8vbmV3IGFycmF5cyB3aWxsIG1lcmdlIHdpdGggb3JpZ2luYWxcblxuICBASW5wdXQoKSBhcnJheSE6IGFueVtdLy8tZGVwcmVjYXRlZCB1c2UgYXJyYXkkXG4gIEBPdXRwdXQoKSBhcnJheUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIEBJbnB1dCgpIGFycmF5JD86IEV2ZW50RW1pdHRlcjxhbnlbXT5cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9pdGVyYWJsZURpZmZlcnM6IEl0ZXJhYmxlRGlmZmVyc1xuICApe1xuICAgIC8vc3VwZXIoKVxuICAgIC8vd2F0Y2ggZGVlcCBjaGFuZ2VzXG4gICAgY29uc3QgZiA9IHRoaXMuX2l0ZXJhYmxlRGlmZmVycy5maW5kKFtdKVxuICAgIHRoaXMuaXRlcmFibGVEaWZmZXIgPSBmLmNyZWF0ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKXtcbiAgICBpZiggdGhpcy5hcnJheSRzdWIgKXtcbiAgICAgIHRoaXMuYXJyYXkkc3ViLnVuc3Vic2NyaWJlKClcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpe1xuICAgIGlmKCB0aGlzLmtleU1hcENoYW5nZS5vYnNlcnZlcnMubGVuZ3RoICl7XG4gICAgICBpZiggIXRoaXMua2V5TWFwICl7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PntcbiAgICAgICAgICB0aGlzLmtleU1hcCA9IHt9XG4gICAgICAgICAgdGhpcy5rZXlNYXBDaGFuZ2UuZW1pdCh0aGlzLmtleU1hcClcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgdGhpcy5wdXNoQ3JlYXRlTWFwKClcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKXtcbiAgICBpZiggdGhpcy5BY2tBZ2dyZWdhdGVzICl7XG4gICAgICB0aGlzLnB1c2hBZ2dyZWdhdGVzKCB0aGlzLkFja0FnZ3JlZ2F0ZXMgKVxuICAgIH1cblxuICAgIHRoaXMuaW5pdGVkID0gdHJ1ZVxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PlxuICAgICAgdGhpcy5sb29wKCB0cnVlIClcbiAgICApXG4gIH1cblxuICAvL3dhdGNoIGFycmF5IGRlZXAgY2hhbmdlc1xuICBuZ0RvQ2hlY2soKSB7XG4gICAgaWYoICF0aGlzLmluaXRlZCApcmV0dXJuXG5cbiAgICBsZXQgY2hhbmdlcyA9IHRoaXMuaXRlcmFibGVEaWZmZXIuZGlmZiggdGhpcy5hcnJheSApO1xuICAgIGlmIChjaGFuZ2VzKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5cbiAgICAgICAgdGhpcy5sb29wKCBmYWxzZSApXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogYW55KXtcbiAgICBpZiggY2hhbmdlcy5hcnJheSQgKXtcbiAgICAgIGlmKCB0aGlzLmFycmF5JHN1YiApe1xuICAgICAgICB0aGlzLmFycmF5JHN1Yi51bnN1YnNjcmliZSgpXG4gICAgICAgIGRlbGV0ZSB0aGlzLmFycmF5JHN1YlxuICAgICAgfVxuXG4gICAgICBpZiggdGhpcy5hcnJheSQgKXtcbiAgICAgICAgdGhpcy5hcnJheSRzdWIgPSB0aGlzLmFycmF5JC5zdWJzY3JpYmUoYXJyYXk9PntcbiAgICAgICAgICBpZiggdGhpcy5tZXJnZSApe1xuICAgICAgICAgICAgbWVyZ2VBcnJheXModGhpcy5hcnJheSBhcyBhbnksIGFycmF5LCB0aGlzLmlkS2V5cyBhcyBhbnkpXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBjb25zdCByZXNldCA9IHRoaXMuYXJyYXkgIT0gYXJyYXlcbiAgICAgICAgICAgIHRoaXMuYXJyYXkgPSBhcnJheVxuICAgICAgICAgICAgdGhpcy5sb29wKCByZXNldCApXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBsb29wID0gY2hhbmdlcy5hcnJheSA/IHRydWUgOiBmYWxzZVxuXG4gICAgaWYoIGNoYW5nZXMucGFnZUF0ICl7XG4gICAgICB0aGlzLnB1c2hDcmVhdGVQYWdlcygpXG4gICAgICBsb29wID0gdHJ1ZVxuICAgIH1cblxuICAgIGlmKCB0aGlzLmluaXRlZCAmJiBsb29wICl7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT5cbiAgICAgICAgdGhpcy5sb29wKCB0cnVlIClcbiAgICAgIClcbiAgICB9XG4gIH1cblxuICBwdXNoQWdncmVnYXRlcyggYWdnczpBY2tBZ2dyZWdhdGVbXSApe1xuICAgIGFnZ3MuZm9yRWFjaChhZ2c9PntcbiAgICAgIGxldCBtZW1vcnk6IGFueVxuXG4gICAgICBzd2l0Y2goIGFnZy50eXBlICl7XG4gICAgICAgIC8vZGVmYXVsdCBpcyB0byBzdW1cbiAgICAgICAgZGVmYXVsdDp7XG4gICAgICAgICAgdGhpcy5sb29wU3RhcnQuc3Vic2NyaWJlKCAoKT0+bWVtb3J5PTAgKVxuXG4gICAgICAgICAgdGhpcy5sb29wRWFjaC5zdWJzY3JpYmUobG9vcD0+e1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEl0ZW1WYWx1ZUJ5S2V5cyhsb29wLml0ZW0sIGFnZy5rZXlzKVxuICAgICAgICAgICAgaWYoIHZhbHVlICl7XG4gICAgICAgICAgICAgIG1lbW9yeSA9IG1lbW9yeSArIHZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcblxuICAgICAgICAgIHRoaXMubG9vcEVuZC5zdWJzY3JpYmUoKCk9PntcbiAgICAgICAgICAgIGFnZy5vdXRwdXQgPSBtZW1vcnlcbiAgICAgICAgICAgIGFnZy5vdXRwdXRDaGFuZ2UuZW1pdCggbWVtb3J5IClcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGdldEl0ZW1WYWx1ZUJ5S2V5cyhpdGVtOiBhbnksIGtleXM6c3RyaW5nW10pe1xuICAgIGZvcihsZXQgIHg9MDsgIHggPCBrZXlzLmxlbmd0aDsgKysgeCl7XG4gICAgICBsZXQga2V5TmFtZSA9IGtleXNbeF1cbiAgICAgIGl0ZW0gPSBpdGVtW2tleU5hbWVdXG4gICAgICBpZiggaXRlbT09bnVsbCApcmV0dXJuIG51bGxcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1cbiAgfVxuXG4gIGxvb3AoIHJlc2V0OmJvb2xlYW4gKSA6IHZvaWR7XG4gICAgLy9zdXBlci5sb29wKCByZXNldCApXG5cbiAgICBpZighdGhpcy5hcnJheSl7XG4gICAgICB0aGlzLmFycmF5ID0gW11cbiAgICB9XG5cbiAgICB0aGlzLmxvb3BTdGFydC5lbWl0KCByZXNldCApXG5cbiAgICBjb25zdCBsYXN0ID0gdGhpcy5hcnJheS5sZW5ndGhcbiAgICBmb3IobGV0IHg9MDsgeCA8IGxhc3Q7ICsreCl7XG4gICAgICB0aGlzLmxvb3BFYWNoLmVtaXQoe2luZGV4OngsIGl0ZW06dGhpcy5hcnJheVt4XX0pXG4gICAgfVxuXG4gICAgLy90aGlzLnBlcmZvcm1Kb2lucygpXG5cbiAgICB0aGlzLmxvb3BFbmQuZW1pdCgpXG4gIH1cblxuICBwdXNoQ3JlYXRlTWFwKCl7XG4gICAgaWYoIHRoaXMucHVzaGVkLmNyZWF0ZU1hcCApcmV0dXJuXG5cbiAgICB0aGlzLnB1c2hlZC5jcmVhdGVNYXAgPSB0cnVlXG4gICAgdGhpcy5sb29wU3RhcnQuc3Vic2NyaWJlKCgpPT50aGlzLmtleU1hcD17fSlcblxuICAgIHRoaXMubG9vcEVhY2guc3Vic2NyaWJlKG9iPT57XG4gICAgICBsZXQga2V5ID0gdGhpcy5nZXRJdGVtSWQoIG9iLml0ZW0gKVxuICAgICAgdGhpcy5rZXlNYXBbIGtleSBdID0gb2IuaXRlbVxuICAgIH0pXG5cbiAgICB0aGlzLmxvb3BFbmQuc3Vic2NyaWJlKCgpPT50aGlzLmtleU1hcENoYW5nZS5lbWl0KHRoaXMua2V5TWFwKSlcbiAgfVxuXG4gIC8qKiBhZGRzIHRvIGxvb3AgZnVuY3Rpb25hbGl0eSBob3cgdG8gY3JlYXRlIHBhZ2VzICovXG4gIHB1c2hDcmVhdGVQYWdlcygpe1xuICAgIGlmKCB0aGlzLnB1c2hlZC5jcmVhdGVQYWdlcyApcmV0dXJuXG5cbiAgICB0aGlzLnB1c2hlZC5jcmVhdGVQYWdlcyA9IHRydWVcblxuICAgIGxldCBwb3MgPSAwXG4gICAgbGV0IGxhc3QgPSAwXG5cbiAgICB0aGlzLmxvb3BTdGFydC5zdWJzY3JpYmUocmVzZXQ9PntcbiAgICAgIHBvcyA9IDBcbiAgICAgIGxhc3QgPSB0aGlzLmFycmF5Lmxlbmd0aFxuXG4gICAgICBpZiggcmVzZXQgKXtcbiAgICAgICAgdGhpcy5wYWdlQ2hhbmdlLmVtaXQoIHRoaXMucGFnZT0wIClcbiAgICAgIH1cblxuICAgICAgdGhpcy5wYWdlcyA9IHRoaXMucGFnZXMgfHwgW11cbiAgICAgIHRoaXMucGFnZXMubGVuZ3RoID0gMC8vZG9udCBicmVhayBiaW5kaW5nIGlmIHBhZ2VzIHJlbWVtYmVyZWRcbiAgICAgIHRoaXMucGFnZXMucHVzaChbXSlcbiAgICB9KVxuXG4gICAgdGhpcy5sb29wRWFjaC5zdWJzY3JpYmUob2I9PntcbiAgICAgIHRoaXMucGFnZXNbcG9zXS5wdXNoKCBvYi5pdGVtIClcblxuICAgICAgaWYoIHRoaXMucGFnZXNbcG9zXS5sZW5ndGg9PXRoaXMucGFnZUF0ICYmIG9iLmluZGV4PGxhc3QtMSApe1xuICAgICAgICB0aGlzLnBhZ2VzLnB1c2goW10pXG4gICAgICAgICsrcG9zXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMubG9vcEVuZC5zdWJzY3JpYmUoKCk9PntcbiAgICAgIGlmKHRoaXMucGFnZSAmJiB0aGlzLnBhZ2UgPj0gdGhpcy5wYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wYWdlQ2hhbmdlLmVtaXQodGhpcy5wYWdlID0gMClcbiAgICAgIH1cblxuICAgICAgLy90aGlzLnBhZ2VzQ2hhbmdlLmVtaXQoIHRoaXMucGFnZXMgKVxuICAgICAgdGhpcy5wYWdlc0NoYW5nZS5uZXh0KCB0aGlzLnBhZ2VzIClcbiAgICB9KVxuICB9XG5cbiAgLy9yZWR1Y2UgYXJyYXkgZG93biB0byBvbmUgaXRlbVxuICBvbmx5KGl0ZW06IGFueSl7XG4gICAgdGhpcy5hcnJheS5sZW5ndGggPSAwXG4gICAgdGhpcy5hcnJheS5wdXNoKGl0ZW0pXG4gICAgdGhpcy5hcnJheUNoYW5nZS5lbWl0KHRoaXMuYXJyYXkpXG4gICAgdGhpcy5sb29wKCB0cnVlIClcbiAgfVxuXG4gIC8vbG9va3MgdXAgaWQgb3IgdGhlIGl0ZW0gaXRzZWxmIGlzIGFuIElEXG4gIGdldEl0ZW1JZChpdGVtOiBhbnkpOmFueXtcbiAgICByZXR1cm4gdGhpcy5pZEtleXMgJiYgdGhpcy5pZEtleXNbMF0gJiYgaXRlbVsgdGhpcy5pZEtleXNbMF0gXVxuICB9XG5cbiAgZ2V0Q29tcGFyZUFycmF5KCk6KHN0cmluZ3xudW1iZXIpW117XG4gICAgaWYodGhpcy5hcnJheSAmJiB0aGlzLmlkS2V5cyAmJiB0aGlzLmlkS2V5cy5sZW5ndGgpe1xuICAgICAgY29uc3QgaWRLZXkgPSB0aGlzLmlkS2V5c1swXVxuICAgICAgcmV0dXJuIHRoaXMuYXJyYXkubWFwKGl0ZW09Pml0ZW1baWRLZXldKVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFycmF5IHx8IFtdXG4gIH1cblxuICBzZWxlY3RlZChpdGVtOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtSW5kZXgoaXRlbSkgPj0gMCA/IHRydWUgOiBmYWxzZVxuICB9XG5cbiAgaXRlbUluZGV4KGl0ZW06IGFueSk6bnVtYmVyIHtcbiAgICBjb25zdCBhcnJheSA9IHRoaXMuZ2V0Q29tcGFyZUFycmF5KClcblxuICAgIGZvcihsZXQgeD1hcnJheS5sZW5ndGgtMTsgeCA+PSAwOyAtLXgpe1xuICAgICAgaWYoIGRhdGFLZXlzTWF0Y2goYXJyYXlbeF0sIGl0ZW0sIHRoaXMuaWRLZXlzKSApe1xuICAgICAgICByZXR1cm4geFxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAtMVxuICB9XG5cbiAgdG9nZ2xlKGl0ZW06IGFueSl7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLml0ZW1JbmRleChpdGVtKVxuXG4gICAgaWYoaW5kZXg+PTApe1xuICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKGluZGV4KVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnB1c2goIGl0ZW0gKVxuICB9XG5cbiAgcHVzaChpdGVtOiBhbnkpe1xuICAgIHRoaXMucGFyYW0oKS5wdXNoKGl0ZW0pXG4gICAgdGhpcy5sb29wKCBmYWxzZSApXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHVuc2hpZnQoaXRlbTogYW55KXtcbiAgICB0aGlzLnBhcmFtKCkudW5zaGlmdChpdGVtKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzcGxpY2UoeDpudW1iZXIsIHk9MSl7XG4gICAgdGhpcy5wYXJhbSgpLnNwbGljZSh4LHkpXG4gICAgdGhpcy5sb29wKCBmYWxzZSApXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHBhcmFtKCl7XG4gICAgaWYoIXRoaXMuYXJyYXkpdGhpcy5hcnJheUNoYW5nZS5lbWl0KCB0aGlzLmFycmF5PVtdIClcbiAgICByZXR1cm4gdGhpcy5hcnJheVxuICB9XG5cbiAgdG9nZ2xlU29ydChcbiAgICBhcnJheUtleTogc3RyaW5nfHN0cmluZ1tdLFxuICAgIHNvcnRUeXBlPzogXCJkYXRlXCJ8XCJ0aW1lXCJ8XCJkYXRldGltZVwifFwiaW50XCJ8XCJudW1iZXJcInxzdHJpbmd8bnVtYmVyXG4gICl7XG4gICAgaWYodGhpcy5pblNvcnQpcmV0dXJuIGZhbHNlXG5cbiAgICB0aGlzLmluU29ydCA9IHRydWVcbiAgICBsZXQgYXNjID0gZmFsc2UvL21vc3QgbGlzdHMgY29tZSBwcmUgc29ydGVkIGFzYywgb3VyIGRlZmF1bHQgc2hvdWxkIGJlIGRlc2NcblxuICAgIGlmKHRoaXMuc29ydEFycmF5Lmxlbmd0aCAmJiB0aGlzLnNvcnRBcnJheVswXS5hcnJheUtleSl7XG4gICAgICBhc2MgPSAhdGhpcy5zb3J0QXJyYXlbMF0uYXNjXG4gICAgICB0aGlzLnNvcnRBcnJheVswXSA9IHtcbiAgICAgICAgYXJyYXlLZXk6YXJyYXlLZXksXG4gICAgICAgIGFzYzohdGhpcy5zb3J0QXJyYXlbMF0uYXNjXG4gICAgICAgfVxuICAgIH1lbHNle1xuICAgICAgdGhpcy5zb3J0QXJyYXkudW5zaGlmdCh7XG4gICAgICAgIGFycmF5S2V5OmFycmF5S2V5LFxuICAgICAgICBhc2M6YXNjXG4gICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3QgdG9LZXk6IGFueSA9IGZ1bmN0aW9uKGE6YW55LCBpbmRleDpudW1iZXI9MCl7XG4gICAgICBjb25zdCB2YWx1ZSA9IGFbIGFycmF5S2V5W2luZGV4XSBdXG4gICAgICBpZiggdmFsdWU9PW51bGwgfHwgaW5kZXggPT0gYXJyYXlLZXkubGVuZ3RoLTEgKXtcbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICB9XG4gICAgICByZXR1cm4gdG9LZXkodmFsdWUsIGluZGV4KzEpXG4gICAgfVxuXG4gICAgaWYoIGFycmF5S2V5LmNvbnN0cnVjdG9yIT1BcnJheSApe1xuICAgICAgYXJyYXlLZXkgPSBbIDxzdHJpbmc+YXJyYXlLZXkgXVxuICAgIH1cblxuICAgIGNvbnN0IG51bWJlclNvcnQgPSAhaXNOYU4oPG51bWJlcj5zb3J0VHlwZSkgfHwgW1wiaW50XCIsXCJudW1iZXJcIl0uaW5kZXhPZig8c3RyaW5nPnNvcnRUeXBlKT49MFxuXG4gICAgaWYoIG51bWJlclNvcnQgKXtcbiAgICAgIGlmKGFzYyl7XG4gICAgICAgIHRoaXMuYXJyYXkuc29ydCggKGEsYik9Pk51bWJlcih0b0tleShhKSkgLSBOdW1iZXIodG9LZXkoYikpIClcbiAgICAgIH1lbHNle1xuICAgICAgICB0aGlzLmFycmF5LnNvcnQoIChiLGEpPT5OdW1iZXIodG9LZXkoYSkpIC0gTnVtYmVyKHRvS2V5KGIpKSApXG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICBzd2l0Y2goc29ydFR5cGUpe1xuICAgICAgICBjYXNlIFwiZGF0ZVwiOlxuICAgICAgICBjYXNlIFwidGltZVwiOlxuICAgICAgICBjYXNlIFwiZGF0ZXRpbWVcIjpcbiAgICAgICAgICBpZihhc2Mpe1xuICAgICAgICAgICAgdGhpcy5hcnJheS5zb3J0KCAoYSxiKT0+e1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoIHRvS2V5KGEsMCkgKVxuICAgICAgICAgICAgICBiID0gbmV3IERhdGUoIHRvS2V5KGIsMCkgKVxuICAgICAgICAgICAgICByZXR1cm4gYT09XCJJbnZhbGlkIERhdGVcIiB8fCBhPmIgPyAtMSA6IGI9PVwiSW52YWxpZCBEYXRlXCIgfHwgYTxiID8gMSA6IDBcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmFycmF5LnNvcnQoIChiLGEpPT57XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSggdG9LZXkoYSwwKSApXG4gICAgICAgICAgICAgIGIgPSBuZXcgRGF0ZSggdG9LZXkoYiwwKSApXG4gICAgICAgICAgICAgIHJldHVybiBhPT1cIkludmFsaWQgRGF0ZVwiIHx8IGE+YiA/IC0xIDogYj09XCJJbnZhbGlkIERhdGVcIiB8fCBhPGIgPyAxIDogMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDovL1NUUklORyBCQVNFRCBTT1JUXG4gICAgICAgICAgaWYoYXNjKXtcbiAgICAgICAgICAgIHRoaXMuYXJyYXkuc29ydCggKGEsYik9PlN0cmluZyh0b0tleShhKXx8XCJcIikudG9Mb3dlckNhc2UoKT5TdHJpbmcodG9LZXkoYil8fFwiXCIpLnRvTG93ZXJDYXNlKCk/MTotMSApXG4gICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmFycmF5LnNvcnQoIChiLGEpPT5TdHJpbmcodG9LZXkoYSl8fFwiXCIpLnRvTG93ZXJDYXNlKCk+U3RyaW5nKHRvS2V5KGIpfHxcIlwiKS50b0xvd2VyQ2FzZSgpPzE6LTEgKVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NsZWFudXBcbiAgICBpZiggdGhpcy5zb3J0QXJyYXkubGVuZ3RoPjMgKXtcbiAgICAgIHRoaXMuc29ydEFycmF5LnBvcCgpXG4gICAgfVxuXG4gICAgdGhpcy5pblNvcnQgPSBmYWxzZVxuICAgIHRoaXMubG9vcCggdHJ1ZSApLy9jYXVzZSBwYWdlcyB0byBiZSB1cGRhdGVkXG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YUtleXNNYXRjaChhbzogYW55LCBhbjogYW55LCBpZEtleXM6IHN0cmluZ1tdKTpib29sZWFue1xuICBmb3IobGV0IHg9aWRLZXlzLmxlbmd0aC0xOyB4ID49IDA7IC0teCl7XG4gICAgbGV0IGlkS2V5ID0gaWRLZXlzW3hdXG4gICAgaWYoYW9baWRLZXldIT1udWxsICYmIGFvW2lkS2V5XSAhPT0gYW5baWRLZXldICl7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlQXJyYXlzKFxuICBhcnJheU9yaWdpbmFsOmFueVtdLFxuICBhcnJheU5ldzphbnlbXSxcbiAgaWRLZXlzOnN0cmluZ1tdXG4pe1xuXG4gIC8vcmVtb3ZhbHNcbiAgZm9yKGxldCB4PWFycmF5T3JpZ2luYWwubGVuZ3RoLTE7IHggPj0gMDsgLS14KXtcbiAgICBsZXQgYW8gPSBhcnJheU9yaWdpbmFsW3hdXG4gICAgbGV0IGFuID0gYXJyYXlOZXdbeF1cblxuICAgIC8vcXVpY2sgbWF0Y2hcbiAgICBpZihhbiAmJiBkYXRhS2V5c01hdGNoKGFvLGFuLGlkS2V5cykgKXtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgbGV0IGZvdW5kID0gZmFsc2VcbiAgICBmb3IobGV0IHh4PWFycmF5TmV3Lmxlbmd0aC0xOyB4eCA+PSAwOyAtLXh4KXtcbiAgICAgIGlmKCBkYXRhS2V5c01hdGNoKGFvLCBhcnJheU5ld1t4eF0sIGlkS2V5cykpe1xuICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihmb3VuZCljb250aW51ZVxuXG4gICAgYXJyYXlPcmlnaW5hbC5zcGxpY2UoeCwxKVxuICB9XG5cbiAgLy9tZXJnZSBhbmQgYWRkXG4gIGZvcihsZXQgeD0wOyB4IDwgYXJyYXlOZXcubGVuZ3RoOyArK3gpe1xuICAgIGxldCBhbyA9IGFycmF5T3JpZ2luYWxbeF1cbiAgICBsZXQgYW4gPSBhcnJheU5ld1t4XVxuICAgIGxldCBmb3VuZCA9IGZhbHNlXG5cbiAgICAvL3RyeSBieSBpbmRleCBtYXRjaCBmaXJzdCwgbWF5IHRvIG5lYXIgaWRlbnRpY2FsIGFycmF5c1xuICAgIGlmKGFvICYmIGRhdGFLZXlzTWF0Y2goYW8sYW4saWRLZXlzKSl7XG4gICAgICBtZXJnZU9iamVjdHMoYW8sIGFuKVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvL3RyeSB0byBtYXRjaCBieSBsb29wIGFnYWluc3QgbG9vcFxuICAgIGZvcihsZXQgeHg9YXJyYXlPcmlnaW5hbC5sZW5ndGgtMTsgeHggPj0gMDsgLS14eCl7XG4gICAgICBhbyA9IGFycmF5T3JpZ2luYWxbeHhdXG4gICAgICBpZiggZGF0YUtleXNNYXRjaChhbyxhbixpZEtleXMpICl7XG4gICAgICAgIG1lcmdlT2JqZWN0cyhhbywgYW4pXG4gICAgICAgIGZvdW5kID0gdHJ1ZVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKCBmb3VuZCApe1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICAvL25vdCBmb3VuZCwgYWRkIHRvIGFycmF5XG4gICAgLy9hcnJheU9yaWdpbmFsLnVuc2hpZnQoYW4pXG4gICAgYXJyYXlPcmlnaW5hbC5zcGxpY2UoeCwwLGFuKVxuICB9XG59XG5cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3RzKGFvOm9iamVjdCwgYW46b2JqZWN0KXtcbiAgZm9yKGxldCB4IGluIGFvKXtcbiAgICBkZWxldGUgYW9beF1cbiAgfVxuICBPYmplY3QuYXNzaWduKGFvLCBhbilcbn0iXX0=