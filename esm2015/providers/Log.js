import { Injectable } from '@angular/core';
export class Log {
    constructor() {
        this.log = [];
        this.maxLog = 80;
    }
    add(e, toConsole) {
        const ob = this.paramAudit(e, toConsole);
        this.log.unshift(ob);
        if (this.maxLog) {
            while (this.log.length > this.maxLog) {
                this.log.pop(); //remove last
            }
        }
        return e;
    }
    paramAudit(e, toConsole) {
        switch (e.constructor) {
            case String:
            case Boolean:
            case Number: {
                e = { message: e };
            }
        }
        if (toConsole == null || toConsole)
            console.log(e);
        e['datetime'] = e['datetime'] || getDateTimeString();
        return e;
    }
}
Log.decorators = [
    { type: Injectable }
];
function getDateTimeString() {
    return (function (d) { return (('0' + (d.getMonth() + 1)).slice(-2) + '/' + ('0' + d.getDate()).slice(-2) + '/' + d.getFullYear()); })(new Date()) + ' ' + (function (d) { var h = d.getHours(), t = 'AM', m = d.getMinutes(); var mn = m < 10 ? '0' + m : m; h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h; return ('0' + h).slice(-2) + ':' + ('0' + mn).slice(-2) + ' ' + t; })(new Date());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9Mb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QixNQUFNLE9BQU8sR0FBRztJQUE5QjtRQUNTLFFBQUcsR0FBRyxFQUFFLENBQUE7UUFDUixXQUFNLEdBQUcsRUFBRSxDQUFBO0lBNEJwQixDQUFDO0lBMUJDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsU0FBVTtRQUNmLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFFLEVBQUUsQ0FBRSxDQUFDO1FBQ3ZCLElBQUcsSUFBSSxDQUFDLE1BQU0sRUFBQztZQUNiLE9BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQztnQkFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQSxDQUFBLGFBQWE7YUFDNUI7U0FDRjtRQUNELE9BQU8sQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUVELFVBQVUsQ0FBQyxDQUFDLEVBQUUsU0FBVTtRQUN0QixRQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUM7WUFDbkIsS0FBSyxNQUFNLENBQUM7WUFDWixLQUFLLE9BQU8sQ0FBQztZQUNiLEtBQUssTUFBTSxDQUFDLENBQUE7Z0JBQ1YsQ0FBQyxHQUFHLEVBQUMsT0FBTyxFQUFDLENBQUMsRUFBQyxDQUFBO2FBQ2hCO1NBQ0Y7UUFFRCxJQUFHLFNBQVMsSUFBRSxJQUFJLElBQUksU0FBUztZQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFOUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBRSxpQkFBaUIsRUFBRSxDQUFBO1FBRWxELE9BQU8sQ0FBQyxDQUFBO0lBQ1YsQ0FBQzs7O1lBN0JGLFVBQVU7O0FBZ0NYLFNBQVMsaUJBQWlCO0lBQ3hCLE9BQU8sQ0FBQyxVQUFTLENBQUMsSUFBRSxPQUFPLENBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFBLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLFVBQVMsQ0FBQyxJQUFFLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQSxJQUFJLEVBQUUsR0FBRyxDQUFDLEdBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxHQUFHLEdBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFDLEdBQUcsQ0FBQyxJQUFFLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLEdBQUMsSUFBSSxFQUFDLENBQUMsR0FBQyxFQUFFLElBQUUsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUMsSUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFBLEVBQUUsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsT0FBTyxDQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxHQUFHLEdBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUM3VCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBjbGFzcyBMb2d7XG4gIHB1YmxpYyBsb2cgPSBbXVxuICBwdWJsaWMgbWF4TG9nID0gODBcblxuICBhZGQoZSwgdG9Db25zb2xlPyl7XG4gICAgY29uc3Qgb2IgPSB0aGlzLnBhcmFtQXVkaXQoZSx0b0NvbnNvbGUpXG4gICAgdGhpcy5sb2cudW5zaGlmdCggb2IgKTtcbiAgICBpZih0aGlzLm1heExvZyl7XG4gICAgICB3aGlsZSh0aGlzLmxvZy5sZW5ndGg+dGhpcy5tYXhMb2cpe1xuICAgICAgICB0aGlzLmxvZy5wb3AoKS8vcmVtb3ZlIGxhc3RcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIHBhcmFtQXVkaXQoZSwgdG9Db25zb2xlPyl7XG4gICAgc3dpdGNoKGUuY29uc3RydWN0b3Ipe1xuICAgICAgY2FzZSBTdHJpbmc6XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICBjYXNlIE51bWJlcjp7XG4gICAgICAgIGUgPSB7bWVzc2FnZTplfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHRvQ29uc29sZT09bnVsbCB8fCB0b0NvbnNvbGUpY29uc29sZS5sb2coZSlcblxuICAgIGVbJ2RhdGV0aW1lJ10gPSBlWydkYXRldGltZSddfHxnZXREYXRlVGltZVN0cmluZygpXG5cbiAgICByZXR1cm4gZVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERhdGVUaW1lU3RyaW5nKCl7XG4gIHJldHVybiAoZnVuY3Rpb24oZCl7cmV0dXJuICgoJzAnKyhkLmdldE1vbnRoKCkrMSkpLnNsaWNlKC0yKSsnLycrKCcwJytkLmdldERhdGUoKSkuc2xpY2UoLTIpKycvJytkLmdldEZ1bGxZZWFyKCkpfSkobmV3IERhdGUoKSkrJyAnKyhmdW5jdGlvbihkKXt2YXIgaD1kLmdldEhvdXJzKCksdD0nQU0nLG09ZC5nZXRNaW51dGVzKCk7dmFyIG1uID0gbTwxMD8nMCcrbTptO2ggPSBoPj0xMj8odD0nUE0nLGgtMTJ8fDEyKTpoPT0wPzEyOmg7cmV0dXJuICgnMCcraCkuc2xpY2UoLTIpKyc6JysoJzAnK21uKS5zbGljZSgtMikrJyAnK3R9KShuZXcgRGF0ZSgpKVxufSJdfQ==