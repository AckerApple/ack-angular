import { Injectable } from '@angular/core';
export class Log {
    constructor() {
        this.log = [];
        this.maxLog = 80;
    }
    add(e, toConsole) {
        const ob = this.paramAudit(e, toConsole);
        this.log.unshift(ob);
        if (this.maxLog) {
            while (this.log.length > this.maxLog) {
                this.log.pop(); //remove last
            }
        }
        return e;
    }
    paramAudit(e, toConsole) {
        switch (e.constructor) {
            case String:
            case Boolean:
            case Number: {
                e = { message: e };
            }
        }
        if (toConsole == null || toConsole)
            console.log(e);
        e['datetime'] = e['datetime'] || getDateTimeString();
        return e;
    }
}
Log.decorators = [
    { type: Injectable }
];
function getDateTimeString() {
    return (function (d) { return (('0' + (d.getMonth() + 1)).slice(-2) + '/' + ('0' + d.getDate()).slice(-2) + '/' + d.getFullYear()); })(new Date()) + ' ' + (function (d) { var h = d.getHours(), t = 'AM', m = d.getMinutes(); var mn = m < 10 ? '0' + m : m; h = h >= 12 ? (t = 'PM', h - 12 || 12) : h == 0 ? 12 : h; return ('0' + h).slice(-2) + ':' + ('0' + mn).slice(-2) + ' ' + t; })(new Date());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9Mb2cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QixNQUFNLE9BQU8sR0FBRztJQUE5QjtRQUNTLFFBQUcsR0FBVSxFQUFFLENBQUE7UUFDZixXQUFNLEdBQUcsRUFBRSxDQUFBO0lBNEJwQixDQUFDO0lBMUJDLEdBQUcsQ0FBQyxDQUFNLEVBQUUsU0FBZTtRQUN6QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxTQUFTLENBQUMsQ0FBQTtRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBRSxFQUFFLENBQUUsQ0FBQztRQUN2QixJQUFHLElBQUksQ0FBQyxNQUFNLEVBQUM7WUFDYixPQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFDLElBQUksQ0FBQyxNQUFNLEVBQUM7Z0JBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUEsQ0FBQSxhQUFhO2FBQzVCO1NBQ0Y7UUFDRCxPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBTSxFQUFFLFNBQWU7UUFDaEMsUUFBTyxDQUFDLENBQUMsV0FBVyxFQUFDO1lBQ25CLEtBQUssTUFBTSxDQUFDO1lBQ1osS0FBSyxPQUFPLENBQUM7WUFDYixLQUFLLE1BQU0sQ0FBQyxDQUFBO2dCQUNWLENBQUMsR0FBRyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQTthQUNoQjtTQUNGO1FBRUQsSUFBRyxTQUFTLElBQUUsSUFBSSxJQUFJLFNBQVM7WUFBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRTlDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUUsaUJBQWlCLEVBQUUsQ0FBQTtRQUVsRCxPQUFPLENBQUMsQ0FBQTtJQUNWLENBQUM7OztZQTdCRixVQUFVOztBQWdDWCxTQUFTLGlCQUFpQjtJQUN4QixPQUFPLENBQUMsVUFBUyxDQUFDLElBQUUsT0FBTyxDQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBRyxHQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsR0FBQyxHQUFHLEdBQUMsQ0FBQyxVQUFTLENBQUMsSUFBRSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUEsSUFBSSxFQUFFLEdBQUcsQ0FBQyxHQUFDLEVBQUUsQ0FBQSxDQUFDLENBQUEsR0FBRyxHQUFDLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBQyxHQUFHLENBQUMsSUFBRSxFQUFFLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLEdBQUMsRUFBRSxJQUFFLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxDQUFDLElBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQSxFQUFFLENBQUEsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFBLE9BQU8sQ0FBQyxHQUFHLEdBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsR0FBRyxHQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLEdBQUcsR0FBQyxDQUFDLENBQUEsQ0FBQSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUE7QUFDN1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKSBleHBvcnQgY2xhc3MgTG9ne1xuICBwdWJsaWMgbG9nOiBhbnlbXSA9IFtdXG4gIHB1YmxpYyBtYXhMb2cgPSA4MFxuXG4gIGFkZChlOiBhbnksIHRvQ29uc29sZT86IGFueSl7XG4gICAgY29uc3Qgb2IgPSB0aGlzLnBhcmFtQXVkaXQoZSx0b0NvbnNvbGUpXG4gICAgdGhpcy5sb2cudW5zaGlmdCggb2IgKTtcbiAgICBpZih0aGlzLm1heExvZyl7XG4gICAgICB3aGlsZSh0aGlzLmxvZy5sZW5ndGg+dGhpcy5tYXhMb2cpe1xuICAgICAgICB0aGlzLmxvZy5wb3AoKS8vcmVtb3ZlIGxhc3RcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVcbiAgfVxuXG4gIHBhcmFtQXVkaXQoZTogYW55LCB0b0NvbnNvbGU/OiBhbnkpe1xuICAgIHN3aXRjaChlLmNvbnN0cnVjdG9yKXtcbiAgICAgIGNhc2UgU3RyaW5nOlxuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgY2FzZSBOdW1iZXI6e1xuICAgICAgICBlID0ge21lc3NhZ2U6ZX1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0b0NvbnNvbGU9PW51bGwgfHwgdG9Db25zb2xlKWNvbnNvbGUubG9nKGUpXG5cbiAgICBlWydkYXRldGltZSddID0gZVsnZGF0ZXRpbWUnXXx8Z2V0RGF0ZVRpbWVTdHJpbmcoKVxuXG4gICAgcmV0dXJuIGVcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREYXRlVGltZVN0cmluZygpe1xuICByZXR1cm4gKGZ1bmN0aW9uKGQpe3JldHVybiAoKCcwJysoZC5nZXRNb250aCgpKzEpKS5zbGljZSgtMikrJy8nKygnMCcrZC5nZXREYXRlKCkpLnNsaWNlKC0yKSsnLycrZC5nZXRGdWxsWWVhcigpKX0pKG5ldyBEYXRlKCkpKycgJysoZnVuY3Rpb24oZCl7dmFyIGg9ZC5nZXRIb3VycygpLHQ9J0FNJyxtPWQuZ2V0TWludXRlcygpO3ZhciBtbiA9IG08MTA/JzAnK206bTtoID0gaD49MTI/KHQ9J1BNJyxoLTEyfHwxMik6aD09MD8xMjpoO3JldHVybiAoJzAnK2gpLnNsaWNlKC0yKSsnOicrKCcwJyttbikuc2xpY2UoLTIpKycgJyt0fSkobmV3IERhdGUoKSlcbn0iXX0=