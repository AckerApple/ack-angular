import { Injectable, EventEmitter } from '@angular/core';
export class Prompts {
    constructor() {
        this.prompts = [];
    }
    remove(prompt) {
        for (let x = this.prompts.length - 1; x >= 0; --x) {
            if (this.prompts[x] == prompt) {
                this.prompts.splice(x, 1);
                return;
            }
        }
    }
    issuePrompt(prompt) {
        this.prompts.push(prompt);
        prompt.emitter.subscribe(() => this.remove(prompt));
        return prompt.emitter;
    }
    alert(message, options = {}) {
        options.emitter = new EventEmitter();
        options.type = "alert";
        options.message = message;
        return this.issuePrompt(options);
    }
    confirm(message, options = {}) {
        options.emitter = new EventEmitter();
        options.type = "confirm";
        options.message = message;
        return this.issuePrompt(options);
    }
}
Prompts.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvbXB0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm92aWRlcnMvUHJvbXB0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQXNCM0MsTUFBTSxPQUFPLE9BQU87SUFBbEM7UUFDRSxZQUFPLEdBQVksRUFBRSxDQUFBO0lBb0N2QixDQUFDO0lBbENDLE1BQU0sQ0FBQyxNQUFhO1FBQ2xCLEtBQUksSUFBSSxDQUFDLEdBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUM7WUFDM0MsSUFBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sRUFBQztnQkFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO2dCQUN6QixPQUFNO2FBQ1A7U0FDRjtJQUNILENBQUM7SUFFRCxXQUFXLENBQUMsTUFBYTtRQUN2QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUN6QixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFFLEVBQUUsQ0FBQSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUE7UUFDakQsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxLQUFLLENBQ0gsT0FBYyxFQUNkLFVBQXFDLEVBQUU7UUFFdkMsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFBO1FBQ3BDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFBO1FBQ3RCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBVSxPQUFPLENBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsT0FBTyxDQUNMLE9BQWMsRUFDZCxVQUFxQyxFQUFFO1FBRXZDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtRQUNwQyxPQUFPLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQTtRQUN4QixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtRQUN6QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQVUsT0FBTyxDQUFFLENBQUE7SUFDNUMsQ0FBQzs7O1lBcENGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBidXR0b257XG4gIHRleHQ6IHN0cmluZ1xuICAvL3JvbGU/OiBcImNhbmNlbFwiLy93aGVuIFwiY2FuY2VsXCIgdGhlbiBhdXRvIGNvbmZpZ3MgdG8gY2xvc2UgcHJvbXB0XG4gIGhhbmRsZXI/OiAoKSA9PiBhbnlcbn1cblxuZXhwb3J0IGludGVyZmFjZSBwcm9tcHRPcHRpb25ze1xuICB0aXRsZT8gICA6IHN0cmluZ1xuICBidXR0b25zPyA6IGJ1dHRvbltdLy9ub3QgeWV0IHVzZWRcbiAgZW1pdHRlcj8gOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj5cbiAgbWVzc2FnZT8gOiBzdHJpbmdcbiAgdHlwZT8gICAgOiBcImNvbmZpcm1cInxcImFsZXJ0XCJ8XCJzdHJpbmdcIlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIHByb21wdCBleHRlbmRzIHByb21wdE9wdGlvbnN7XG4gIHR5cGU6XCJjb25maXJtXCJ8XCJhbGVydFwifFwic3RyaW5nXCJcbiAgbWVzc2FnZTpzdHJpbmdcbiAgZW1pdHRlcjpFdmVudEVtaXR0ZXI8Ym9vbGVhbj5cbn1cblxuQEluamVjdGFibGUoKSBleHBvcnQgY2xhc3MgUHJvbXB0c3tcbiAgcHJvbXB0czpwcm9tcHRbXSA9IFtdXG4gXG4gIHJlbW92ZShwcm9tcHQ6cHJvbXB0KXtcbiAgICBmb3IobGV0IHg9dGhpcy5wcm9tcHRzLmxlbmd0aC0xOyB4ID49IDA7IC0teCl7XG4gICAgICBpZih0aGlzLnByb21wdHNbeF0gPT0gcHJvbXB0KXtcbiAgICAgICAgdGhpcy5wcm9tcHRzLnNwbGljZSh4LCAxKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc3N1ZVByb21wdChwcm9tcHQ6cHJvbXB0KXtcbiAgICB0aGlzLnByb21wdHMucHVzaChwcm9tcHQpXG4gICAgcHJvbXB0LmVtaXR0ZXIuc3Vic2NyaWJlKCgpPT50aGlzLnJlbW92ZShwcm9tcHQpKVxuICAgIHJldHVybiBwcm9tcHQuZW1pdHRlclxuICB9XG5cbiAgYWxlcnQoXG4gICAgbWVzc2FnZTpzdHJpbmcsXG4gICAgb3B0aW9uczpwcm9tcHRPcHRpb25zPTxwcm9tcHRPcHRpb25zPnt9XG4gICk6RXZlbnRFbWl0dGVyPGJvb2xlYW4+e1xuICAgIG9wdGlvbnMuZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICAgIG9wdGlvbnMudHlwZSA9IFwiYWxlcnRcIlxuICAgIG9wdGlvbnMubWVzc2FnZSA9IG1lc3NhZ2VcbiAgICByZXR1cm4gdGhpcy5pc3N1ZVByb21wdCggPHByb21wdD5vcHRpb25zIClcbiAgfVxuXG4gIGNvbmZpcm0oXG4gICAgbWVzc2FnZTpzdHJpbmcsXG4gICAgb3B0aW9uczpwcm9tcHRPcHRpb25zPTxwcm9tcHRPcHRpb25zPnt9XG4gICk6RXZlbnRFbWl0dGVyPGJvb2xlYW4+e1xuICAgIG9wdGlvbnMuZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuICAgIG9wdGlvbnMudHlwZSA9IFwiY29uZmlybVwiXG4gICAgb3B0aW9ucy5tZXNzYWdlID0gbWVzc2FnZVxuICAgIHJldHVybiB0aGlzLmlzc3VlUHJvbXB0KCA8cHJvbXB0Pm9wdGlvbnMgKVxuICB9XG59Il19